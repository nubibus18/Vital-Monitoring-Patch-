
DPFinalSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009510  08009510  0000a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009778  08009778  0000a778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009784  08009784  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000008  08009788  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000004c  20000074  080097f4  0000b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c0  08009840  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  200000d4  08009851  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08009851  0000b784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08009851  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00029881  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000603c  00000000  00000000  00035318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002708  00000000  00000000  0003b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001dae  00000000  00000000  0003da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c969  00000000  00000000  0003f80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000321a7  00000000  00000000  0006c177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f53ec  00000000  00000000  0009e31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0019370a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a0d4  00000000  00000000  00193750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003c  00000000  00000000  0019d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000d4 	.word	0x200000d4
 8000158:	00000000 	.word	0x00000000
 800015c:	080094f8 	.word	0x080094f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d8 	.word	0x200000d8
 8000178:	080094f8 	.word	0x080094f8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <ADPD1080_ReadAllRegisters>:
 * @brief  Read all registers of the ADPD1080 and store the values in the global array.
 * @param  hi2c: Pointer to the I2C handle structure.
 * @retval None
 */
HAL_StatusTypeDef ADPD1080_ReadAllRegisters(I2C_HandleTypeDef *hi2c)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af04      	add	r7, sp, #16
 8000192:	6078      	str	r0, [r7, #4]
    uint8_t reg_data[2]; // 2 bytes of data for 16-bit register value
    HAL_StatusTypeDef status;

    // Loop through all registers and read their values
    for (uint8_t i = 0; i < ADPD1080_TOTAL_REGS; i++) {
 8000194:	2300      	movs	r3, #0
 8000196:	73bb      	strb	r3, [r7, #14]
 8000198:	e02b      	b.n	80001f2 <ADPD1080_ReadAllRegisters+0x66>
        // Read the register value (2 bytes) from ADPD1080
        status = HAL_I2C_Mem_Read(hi2c, ADPD1080_ADDR, adpd1080_reg_addresses[i], I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 800019a:	7bbb      	ldrb	r3, [r7, #14]
 800019c:	4a19      	ldr	r2, [pc, #100]	@ (8000204 <ADPD1080_ReadAllRegisters+0x78>)
 800019e:	5cd3      	ldrb	r3, [r2, r3]
 80001a0:	461a      	mov	r2, r3
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	9302      	str	r3, [sp, #8]
 80001a8:	2302      	movs	r3, #2
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	f107 030c 	add.w	r3, r7, #12
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2301      	movs	r3, #1
 80001b4:	21c8      	movs	r1, #200	@ 0xc8
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f002 fd9c 	bl	8002cf4 <HAL_I2C_Mem_Read>
 80001bc:	4603      	mov	r3, r0
 80001be:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK) {
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <ADPD1080_ReadAllRegisters+0x54>
            // Combine the two bytes into a 16-bit value
            adpd1080_reg_values[i] = (reg_data[0] << 8) | reg_data[1];
 80001c6:	7b3b      	ldrb	r3, [r7, #12]
 80001c8:	021b      	lsls	r3, r3, #8
 80001ca:	b21a      	sxth	r2, r3
 80001cc:	7b7b      	ldrb	r3, [r7, #13]
 80001ce:	b21b      	sxth	r3, r3
 80001d0:	4313      	orrs	r3, r2
 80001d2:	b21a      	sxth	r2, r3
 80001d4:	7bbb      	ldrb	r3, [r7, #14]
 80001d6:	b291      	uxth	r1, r2
 80001d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000208 <ADPD1080_ReadAllRegisters+0x7c>)
 80001da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001de:	e005      	b.n	80001ec <ADPD1080_ReadAllRegisters+0x60>
        } else {
            // Handle error in reading register
            adpd1080_reg_values[i] = 0xFFFF; // Error code
 80001e0:	7bbb      	ldrb	r3, [r7, #14]
 80001e2:	4a09      	ldr	r2, [pc, #36]	@ (8000208 <ADPD1080_ReadAllRegisters+0x7c>)
 80001e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80001e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < ADPD1080_TOTAL_REGS; i++) {
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	3301      	adds	r3, #1
 80001f0:	73bb      	strb	r3, [r7, #14]
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	2b13      	cmp	r3, #19
 80001f6:	d9d0      	bls.n	800019a <ADPD1080_ReadAllRegisters+0xe>
        }
    }
    return status; // Return the last status
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000008 	.word	0x20000008
 8000208:	200000f0 	.word	0x200000f0

0800020c <ADPD1080_WriteAllRegisters>:
 * @brief  Write all registers of the ADPD1080 with the values from the global array.
 * @param  hi2c: Pointer to the I2C handle structure.
 * @retval None
 */
HAL_StatusTypeDef ADPD1080_WriteAllRegisters(I2C_HandleTypeDef *hi2c)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af04      	add	r7, sp, #16
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t reg_data[2]; // 2 bytes of data for 16-bit register value
    HAL_StatusTypeDef status;

    // Write Startup Configs
    // Write 0x2680 to register 0x4B
    reg_data[0] = (0x2680 >> 8) & 0xFF; // High byte
 8000214:	2326      	movs	r3, #38	@ 0x26
 8000216:	733b      	strb	r3, [r7, #12]
    reg_data[1] = 0x2680 & 0xFF;        // Low byte
 8000218:	2380      	movs	r3, #128	@ 0x80
 800021a:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, 0x4B, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 800021c:	f04f 33ff 	mov.w	r3, #4294967295
 8000220:	9302      	str	r3, [sp, #8]
 8000222:	2302      	movs	r3, #2
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2301      	movs	r3, #1
 800022e:	224b      	movs	r2, #75	@ 0x4b
 8000230:	21c8      	movs	r1, #200	@ 0xc8
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f002 fc4a 	bl	8002acc <HAL_I2C_Mem_Write>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800023c:	7bbb      	ldrb	r3, [r7, #14]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <ADPD1080_WriteAllRegisters+0x3a>
        return status; // Return the last status on failure
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	e061      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
    }

    // Write 0x0001 to register 0x10
    reg_data[0] = (0x0001 >> 8) & 0xFF; // High byte
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]
    reg_data[1] = 0x0001 & 0xFF;        // Low byte
 800024a:	2301      	movs	r3, #1
 800024c:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 800024e:	f04f 33ff 	mov.w	r3, #4294967295
 8000252:	9302      	str	r3, [sp, #8]
 8000254:	2302      	movs	r3, #2
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2301      	movs	r3, #1
 8000260:	2210      	movs	r2, #16
 8000262:	21c8      	movs	r1, #200	@ 0xc8
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f002 fc31 	bl	8002acc <HAL_I2C_Mem_Write>
 800026a:	4603      	mov	r3, r0
 800026c:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800026e:	7bbb      	ldrb	r3, [r7, #14]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <ADPD1080_WriteAllRegisters+0x6c>
        return status; // Return the last status on failure
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	e048      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
    }



    for (uint8_t i = 0; i < ADPD1080_TOTAL_REGS; i++) {
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	e028      	b.n	80002d0 <ADPD1080_WriteAllRegisters+0xc4>
        // Split the 16-bit value into two bytes
        reg_data[0] = (adpd1080_reg_values_write[i] >> 8) & 0xFF; // High byte
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	4a24      	ldr	r2, [pc, #144]	@ (8000314 <ADPD1080_WriteAllRegisters+0x108>)
 8000282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000286:	0a1b      	lsrs	r3, r3, #8
 8000288:	b29b      	uxth	r3, r3
 800028a:	b2db      	uxtb	r3, r3
 800028c:	733b      	strb	r3, [r7, #12]
        reg_data[1] = adpd1080_reg_values_write[i] & 0xFF;        // Low byte
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	4a20      	ldr	r2, [pc, #128]	@ (8000314 <ADPD1080_WriteAllRegisters+0x108>)
 8000292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	737b      	strb	r3, [r7, #13]

        // Write the register value (2 bytes) to ADPD1080
        status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, adpd1080_reg_addresses[i], I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	4a1e      	ldr	r2, [pc, #120]	@ (8000318 <ADPD1080_WriteAllRegisters+0x10c>)
 800029e:	5cd3      	ldrb	r3, [r2, r3]
 80002a0:	461a      	mov	r2, r3
 80002a2:	f04f 33ff 	mov.w	r3, #4294967295
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	2302      	movs	r3, #2
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	f107 030c 	add.w	r3, r7, #12
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2301      	movs	r3, #1
 80002b4:	21c8      	movs	r1, #200	@ 0xc8
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f002 fc08 	bl	8002acc <HAL_I2C_Mem_Write>
 80002bc:	4603      	mov	r3, r0
 80002be:	73bb      	strb	r3, [r7, #14]

        if (status != HAL_OK) {
 80002c0:	7bbb      	ldrb	r3, [r7, #14]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <ADPD1080_WriteAllRegisters+0xbe>
            return status; // Return the last status on failure
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
 80002c8:	e01f      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
    for (uint8_t i = 0; i < ADPD1080_TOTAL_REGS; i++) {
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	3301      	adds	r3, #1
 80002ce:	73fb      	strb	r3, [r7, #15]
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	2b13      	cmp	r3, #19
 80002d4:	d9d3      	bls.n	800027e <ADPD1080_WriteAllRegisters+0x72>
        }
    }

    reg_data[0] = (0x0002 >> 8) & 0xFF; // High byte
 80002d6:	2300      	movs	r3, #0
 80002d8:	733b      	strb	r3, [r7, #12]
    reg_data[1] = 0x0002 & 0xFF;        // Low byte
 80002da:	2302      	movs	r3, #2
 80002dc:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2302      	movs	r3, #2
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	2210      	movs	r2, #16
 80002f2:	21c8      	movs	r1, #200	@ 0xc8
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f002 fbe9 	bl	8002acc <HAL_I2C_Mem_Write>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <ADPD1080_WriteAllRegisters+0xfc>
        return status; // Return the last status on failure
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	e000      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
    }

    return HAL_OK; // Return success if all registers are written successfully
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c
 8000318:	20000008 	.word	0x20000008

0800031c <ADPD1080_CheckRegisters>:
/**
 * @brief  Check if the read registers match the expected write values.
 * @retval uint8_t: Returns 1 if all registers match, 0 otherwise.
 */
HAL_StatusTypeDef ADPD1080_CheckRegisters(I2C_HandleTypeDef *hi2c)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    for (uint8_t i = 0; i < ADPD1080_TOTAL_REGS; i++) {
 8000324:	2300      	movs	r3, #0
 8000326:	73fb      	strb	r3, [r7, #15]
 8000328:	e013      	b.n	8000352 <ADPD1080_CheckRegisters+0x36>
        if (adpd1080_reg_values[i] != adpd1080_reg_values_write[i]) {
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <ADPD1080_CheckRegisters+0x48>)
 800032e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	490c      	ldr	r1, [pc, #48]	@ (8000368 <ADPD1080_CheckRegisters+0x4c>)
 8000336:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800033a:	429a      	cmp	r2, r3
 800033c:	d006      	beq.n	800034c <ADPD1080_CheckRegisters+0x30>
            // Mismatch found, write all registers and return the status
            status = ADPD1080_WriteAllRegisters(hi2c);
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ff64 	bl	800020c <ADPD1080_WriteAllRegisters>
 8000344:	4603      	mov	r3, r0
 8000346:	73bb      	strb	r3, [r7, #14]
            return status;
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	e006      	b.n	800035a <ADPD1080_CheckRegisters+0x3e>
    for (uint8_t i = 0; i < ADPD1080_TOTAL_REGS; i++) {
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	3301      	adds	r3, #1
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	2b13      	cmp	r3, #19
 8000356:	d9e8      	bls.n	800032a <ADPD1080_CheckRegisters+0xe>
        }
    }
    return HAL_OK; // All registers match
 8000358:	2300      	movs	r3, #0
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000f0 	.word	0x200000f0
 8000368:	2000001c 	.word	0x2000001c

0800036c <ADPD1080_Read_Buffer>:
 * @param  Buffer: Number of Bytes that can be stored before Interrupt.
 * @retval uint16_t: return a array of the recieved readings
 */

 HAL_StatusTypeDef ADPD1080_Read_Buffer(I2C_HandleTypeDef *hi2c)
 {
 800036c:	b580      	push	{r7, lr}
 800036e:	b0a4      	sub	sp, #144	@ 0x90
 8000370:	af04      	add	r7, sp, #16
 8000372:	6078      	str	r0, [r7, #4]
    uint8_t reg_data[112]; // Buffer to store 112 bytes of data
    HAL_StatusTypeDef status;

    // Read 112 bytes from the REG_FIFO_VALUES register
    status = HAL_I2C_Mem_Read(hi2c, ADPD1080_ADDR, REG_FIFO_VALUES, I2C_MEMADD_SIZE_8BIT, reg_data, 112, HAL_MAX_DELAY);
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	9302      	str	r3, [sp, #8]
 800037a:	2370      	movs	r3, #112	@ 0x70
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2301      	movs	r3, #1
 8000386:	2260      	movs	r2, #96	@ 0x60
 8000388:	21c8      	movs	r1, #200	@ 0xc8
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f002 fcb2 	bl	8002cf4 <HAL_I2C_Mem_Read>
 8000390:	4603      	mov	r3, r0
 8000392:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    // Send the entire reg_data array as a single USB packet
    

    if (status == HAL_OK) {
 8000396:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800039a:	2b00      	cmp	r3, #0
 800039c:	d127      	bne.n	80003ee <ADPD1080_Read_Buffer+0x82>
        // Store the received data into the 16-bit array
        for (uint8_t i = 0; i < 56; i++) {
 800039e:	2300      	movs	r3, #0
 80003a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80003a4:	e01e      	b.n	80003e4 <ADPD1080_Read_Buffer+0x78>
            adpd1080_recieved_array[i] = (reg_data[2 * i] << 8) | reg_data[2 * i + 1];
 80003a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	3380      	adds	r3, #128	@ 0x80
 80003ae:	443b      	add	r3, r7
 80003b0:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80003b4:	021b      	lsls	r3, r3, #8
 80003b6:	b21a      	sxth	r2, r3
 80003b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	3301      	adds	r3, #1
 80003c0:	3380      	adds	r3, #128	@ 0x80
 80003c2:	443b      	add	r3, r7
 80003c4:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80003c8:	b21b      	sxth	r3, r3
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b21a      	sxth	r2, r3
 80003ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003d2:	b291      	uxth	r1, r2
 80003d4:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <ADPD1080_Read_Buffer+0xb8>)
 80003d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t i = 0; i < 56; i++) {
 80003da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003de:	3301      	adds	r3, #1
 80003e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80003e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003e8:	2b37      	cmp	r3, #55	@ 0x37
 80003ea:	d9dc      	bls.n	80003a6 <ADPD1080_Read_Buffer+0x3a>
 80003ec:	e013      	b.n	8000416 <ADPD1080_Read_Buffer+0xaa>
            //HAL_Delay(1);

        }
    } else {
        // Handle error in reading register
        for (uint8_t i = 0; i < 56; i++) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80003f4:	e00b      	b.n	800040e <ADPD1080_Read_Buffer+0xa2>
            adpd1080_recieved_array[i] = 0xFFFF; // Error code
 80003f6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <ADPD1080_Read_Buffer+0xb8>)
 80003fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000400:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t i = 0; i < 56; i++) {
 8000404:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000408:	3301      	adds	r3, #1
 800040a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800040e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000412:	2b37      	cmp	r3, #55	@ 0x37
 8000414:	d9ef      	bls.n	80003f6 <ADPD1080_Read_Buffer+0x8a>
        }
    }

    return status; // Return the status
 8000416:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 }
 800041a:	4618      	mov	r0, r3
 800041c:	3780      	adds	r7, #128	@ 0x80
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000118 	.word	0x20000118

08000428 <ADPD1080_Check_FIFO>:
 * @param  hi2c: Pointer to the I2C handle structure.
 * @retval HAL_StatusTypeDef: Status of the operation.
 */

HAL_StatusTypeDef ADPD1080_Check_FIFO(I2C_HandleTypeDef *hi2c)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af04      	add	r7, sp, #16
 800042e:	6078      	str	r0, [r7, #4]
    uint8_t reg_data[2]; // 2 bytes of data for 16-bit register value
    HAL_StatusTypeDef status;

    // Read the FIFO status register (0x00)
    status = HAL_I2C_Mem_Read(hi2c, ADPD1080_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
 8000434:	9302      	str	r3, [sp, #8]
 8000436:	2302      	movs	r3, #2
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2301      	movs	r3, #1
 8000442:	2200      	movs	r2, #0
 8000444:	21c8      	movs	r1, #200	@ 0xc8
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f002 fc54 	bl	8002cf4 <HAL_I2C_Mem_Read>
 800044c:	4603      	mov	r3, r0
 800044e:	73fb      	strb	r3, [r7, #15]
    //sendDataOverUSB(reg_data[0], 0, 0, 0);
    //status = HAL_I2C_Mem_Read(hi2c, ADPD1080_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
    //sendDataOverUSB(reg_data[0], 0, 0, 0);


    if (status == HAL_OK) {
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d115      	bne.n	8000482 <ADPD1080_Check_FIFO+0x5a>
        // Extract the number of bytes currently stored in the FIFO (Bits[15:8])
        fifo_byte_count = reg_data[0]; // High byte contains the FIFO byte count
 8000456:	7b3a      	ldrb	r2, [r7, #12]
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <ADPD1080_Check_FIFO+0x6c>)
 800045a:	701a      	strb	r2, [r3, #0]
        //sendDataOverUSB(fifo_byte_count, 0, 0, 0);

        // Compare fifo_byte_count to ADPD_BUFFER
        if (fifo_byte_count >= ADPD1080_BUFFER) {
 800045c:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <ADPD1080_Check_FIFO+0x6c>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b6f      	cmp	r3, #111	@ 0x6f
 8000462:	d90c      	bls.n	800047e <ADPD1080_Check_FIFO+0x56>
            // Call the function to read the FIFO
            status = ADPD1080_Read_Buffer(hi2c);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff ff81 	bl	800036c <ADPD1080_Read_Buffer>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]
            if (status == HAL_OK) {
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d104      	bne.n	800047e <ADPD1080_Check_FIFO+0x56>
                ADPD1080_ProcessFIFO();
 8000474:	f000 f812 	bl	800049c <ADPD1080_ProcessFIFO>
                NewReading_Check=1;
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <ADPD1080_Check_FIFO+0x70>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
        }
        else{
            //sendDataOverUSB(21,21, 21, 21); // Send the FIFO byte count over USB
        }

        return status;
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	e003      	b.n	800048a <ADPD1080_Check_FIFO+0x62>
    } else {
        fifo_byte_count = 0; // Set to 0 in case of error
 8000482:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <ADPD1080_Check_FIFO+0x6c>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
        return status; // Return the error status
 8000488:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000188 	.word	0x20000188
 8000498:	200001fc 	.word	0x200001fc

0800049c <ADPD1080_ProcessFIFO>:
 * @brief  Process the FIFO data and store it in the actual readings array.
 * @retval None
 */

void ADPD1080_ProcessFIFO(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
    // Process the FIFO data stored in adpd1080_recieved_array
    for (uint8_t i = 0; i < 112 / 16; i++) {
 80004a2:	2300      	movs	r3, #0
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	e04d      	b.n	8000544 <ADPD1080_ProcessFIFO+0xa8>
        // Row 1
        adpd1080_actual_reading_row_1[i] = ((uint32_t)adpd1080_recieved_array[8 * i + 1] << 16) | adpd1080_recieved_array[8 * i];
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b4:	041a      	lsls	r2, r3, #16
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4927      	ldr	r1, [pc, #156]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004c0:	4619      	mov	r1, r3
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	4925      	ldr	r1, [pc, #148]	@ (800055c <ADPD1080_ProcessFIFO+0xc0>)
 80004c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // Row 2
        adpd1080_actual_reading_row_2[i] = ((uint32_t)adpd1080_recieved_array[8 * i + 3] << 16) | adpd1080_recieved_array[8 * i + 2];
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	3303      	adds	r3, #3
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d8:	041a      	lsls	r2, r3, #16
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	3302      	adds	r3, #2
 80004e0:	491d      	ldr	r1, [pc, #116]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004e6:	4619      	mov	r1, r3
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	491c      	ldr	r1, [pc, #112]	@ (8000560 <ADPD1080_ProcessFIFO+0xc4>)
 80004ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // Row 3
        adpd1080_actual_reading_row_3[i] = ((uint32_t)adpd1080_recieved_array[8 * i + 5] << 16) | adpd1080_recieved_array[8 * i + 4];
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	3305      	adds	r3, #5
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004fe:	041a      	lsls	r2, r3, #16
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	3304      	adds	r3, #4
 8000506:	4914      	ldr	r1, [pc, #80]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 8000508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800050c:	4619      	mov	r1, r3
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	430a      	orrs	r2, r1
 8000512:	4914      	ldr	r1, [pc, #80]	@ (8000564 <ADPD1080_ProcessFIFO+0xc8>)
 8000514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        //sendDataOverUSB(adpd1080_actual_reading_row_3[i], 0, 0, 0);

        // Row 4
        adpd1080_actual_reading_row_4[i] = ((uint32_t)adpd1080_recieved_array[8 * i + 7] << 16) | adpd1080_recieved_array[8 * i + 6];
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	3307      	adds	r3, #7
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 8000520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000524:	041a      	lsls	r2, r3, #16
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	3306      	adds	r3, #6
 800052c:	490a      	ldr	r1, [pc, #40]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 800052e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000532:	4619      	mov	r1, r3
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	430a      	orrs	r2, r1
 8000538:	490b      	ldr	r1, [pc, #44]	@ (8000568 <ADPD1080_ProcessFIFO+0xcc>)
 800053a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < 112 / 16; i++) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3301      	adds	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d9ae      	bls.n	80004a8 <ADPD1080_ProcessFIFO+0xc>
    }
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	20000118 	.word	0x20000118
 800055c:	2000018c 	.word	0x2000018c
 8000560:	200001a8 	.word	0x200001a8
 8000564:	200001c4 	.word	0x200001c4
 8000568:	200001e0 	.word	0x200001e0

0800056c <ADPD1080_LEDoff>:

HAL_StatusTypeDef ADPD1080_LEDoff(I2C_HandleTypeDef *hi2c)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af04      	add	r7, sp, #16
 8000572:	6078      	str	r0, [r7, #4]
    uint8_t reg_data[2]; // 2 bytes of data for 16-bit register value
    HAL_StatusTypeDef status;

    // Write 0x0000 to register 0x4B
    reg_data[0] = (0x0001 >> 8) & 0xFF; // High byte
 8000574:	2300      	movs	r3, #0
 8000576:	733b      	strb	r3, [r7, #12]
    reg_data[1] = 0x0001 & 0xFF;        // Low byte
 8000578:	2301      	movs	r3, #1
 800057a:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	9302      	str	r3, [sp, #8]
 8000582:	2302      	movs	r3, #2
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	2210      	movs	r2, #16
 8000590:	21c8      	movs	r1, #200	@ 0xc8
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f002 fa9a 	bl	8002acc <HAL_I2C_Mem_Write>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <ADPD1080_LEDoff+0x3a>
            return status; // Return the last status on failure
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	e013      	b.n	80005ce <ADPD1080_LEDoff+0x62>
        }
    // Write 0x0000 to register 0x4B
    reg_data[0] = (0x80FF >> 8) & 0xFF; // High byte
 80005a6:	2380      	movs	r3, #128	@ 0x80
 80005a8:	733b      	strb	r3, [r7, #12]
    reg_data[1] = 0x80FF & 0xFF;        // Low byte
 80005aa:	23ff      	movs	r3, #255	@ 0xff
 80005ac:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	2200      	movs	r2, #0
 80005c2:	21c8      	movs	r1, #200	@ 0xc8
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f002 fa81 	bl	8002acc <HAL_I2C_Mem_Write>
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]



}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <ADPD1080_LEDon>:

HAL_StatusTypeDef ADPD1080_LEDon(I2C_HandleTypeDef *hi2c)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b088      	sub	sp, #32
 80005da:	af04      	add	r7, sp, #16
 80005dc:	6078      	str	r0, [r7, #4]
    uint8_t reg_data[2]; // 2 bytes of data for 16-bit register value
    HAL_StatusTypeDef status;

    // Write 0x0001 to register 0x4B
    reg_data[0] = (0x0002 >> 8) & 0xFF; // High byte
 80005de:	2300      	movs	r3, #0
 80005e0:	733b      	strb	r3, [r7, #12]
    reg_data[1] = 0x0002 & 0xFF;        // Low byte
 80005e2:	2302      	movs	r3, #2
 80005e4:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Mem_Write(hi2c, ADPD1080_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2302      	movs	r3, #2
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	2210      	movs	r2, #16
 80005fa:	21c8      	movs	r1, #200	@ 0xc8
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f002 fa65 	bl	8002acc <HAL_I2C_Mem_Write>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]

        return status; // Return the last status on failure
 8000606:	7bfb      	ldrb	r3, [r7, #15]

}
 8000608:	4618      	mov	r0, r3
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <APPD_EnableCPU2+0x34>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	c403      	stmia	r4!, {r0, r1}
 8000626:	8022      	strh	r2, [r4, #0]
 8000628:	3402      	adds	r4, #2
 800062a:	0c13      	lsrs	r3, r2, #16
 800062c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800062e:	f007 f9a3 	bl	8007978 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f006 fbd8 	bl	8006dea <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800063a:	bf00      	nop
}
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bdb0      	pop	{r4, r5, r7, pc}
 8000642:	bf00      	nop
 8000644:	08009510 	.word	0x08009510

08000648 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <LL_PWR_SMPS_Enable+0x1c>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <LL_PWR_SMPS_Enable+0x1c>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000656:	61d3      	str	r3, [r2, #28]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	58000400 	.word	0x58000400

08000668 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000678:	4904      	ldr	r1, [pc, #16]	@ (800068c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	61cb      	str	r3, [r1, #28]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	58000400 	.word	0x58000400

08000690 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	0a1b      	lsrs	r3, r3, #8
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d108      	bne.n	80006bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f023 020f 	bic.w	r2, r3, #15
 80006b2:	4913      	ldr	r1, [pc, #76]	@ (8000700 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 80006ba:	e019      	b.n	80006f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3b06      	subs	r3, #6
 80006c0:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	693a      	ldr	r2, [r7, #16]
 80006c6:	4413      	add	r3, r2
 80006c8:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da02      	bge.n	80006d6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e004      	b.n	80006e0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	dd01      	ble.n	80006e0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80006dc:	230f      	movs	r3, #15
 80006de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f023 020f 	bic.w	r2, r3, #15
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	4905      	ldr	r1, [pc, #20]	@ (8000700 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80006ec:	4313      	orrs	r3, r2
 80006ee:	61cb      	str	r3, [r1, #28]
}
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	1fff7558 	.word	0x1fff7558
 8000700:	58000400 	.word	0x58000400

08000704 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <LL_C2_PWR_SetPowerMode+0x28>)
 800070e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000712:	f023 0207 	bic.w	r2, r3, #7
 8000716:	4905      	ldr	r1, [pc, #20]	@ (800072c <LL_C2_PWR_SetPowerMode+0x28>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4313      	orrs	r3, r2
 800071c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	58000400 	.word	0x58000400

08000730 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <LL_EXTI_EnableIT_32_63+0x24>)
 800073a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800073e:	4905      	ldr	r1, [pc, #20]	@ (8000754 <LL_EXTI_EnableIT_32_63+0x24>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4313      	orrs	r3, r2
 8000744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	58000800 	.word	0x58000800

08000758 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000766:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800076a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800076e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000772:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800077e:	4313      	orrs	r3, r2
 8000780:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	cafecafe 	.word	0xcafecafe

08000794 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80007a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	608b      	str	r3, [r1, #8]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e0042000 	.word	0xe0042000

080007d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	b29b      	uxth	r3, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e0042000 	.word	0xe0042000

080007f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80007f8:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <LL_LPM_EnableSleep+0x1c>)
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	4a04      	ldr	r2, [pc, #16]	@ (8000810 <LL_LPM_EnableSleep+0x1c>)
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	6113      	str	r3, [r2, #16]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	22ff      	movs	r2, #255	@ 0xff
 8000820:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	22ca      	movs	r2, #202	@ 0xca
 800083a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2253      	movs	r2, #83	@ 0x53
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f023 0207 	bic.w	r2, r3, #7
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	431a      	orrs	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	609a      	str	r2, [r3, #8]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <MX_APPE_Config+0x18>)
 800087a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800087e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000880:	f000 f829 	bl	80008d6 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000884:	f000 f82e 	bl	80008e4 <Config_HSE>

  return;
 8000888:	bf00      	nop
}
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58004000 	.word	0x58004000

08000890 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000894:	f000 f83a 	bl	800090c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000898:	f000 f852 	bl	8000940 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800089c:	4903      	ldr	r1, [pc, #12]	@ (80008ac <MX_APPE_Init+0x1c>)
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 fe76 	bl	8001590 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80008a4:	f000 f85a 	bl	800095c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80008a8:	bf00      	nop
}
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000398 	.word	0x20000398

080008b0 <Init_Smps>:

void Init_Smps(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fed7 	bl	8000668 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff fee8 	bl	8000690 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80008c0:	f7ff fec2 	bl	8000648 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80008c4:	bf00      	nop
}
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <Init_Exti>:

void Init_Exti(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80008cc:	2050      	movs	r0, #80	@ 0x50
 80008ce:	f7ff ff2f 	bl	8000730 <LL_EXTI_EnableIT_32_63>

  return;
 80008d2:	bf00      	nop
}
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008da:	bf00      	nop
}
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f006 fa3e 	bl	8006d6c <OTP_Read>
 80008f0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	799b      	ldrb	r3, [r3, #6]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff2b 	bl	8000758 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000902:	bf00      	nop
 8000904:	bf00      	nop
}
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <System_Init>:

static void System_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000910:	f7ff ffce 	bl	80008b0 <Init_Smps>

  Init_Exti();
 8000914:	f7ff ffd8 	bl	80008c8 <Init_Exti>

  Init_Rtc();
 8000918:	f000 f802 	bl	8000920 <Init_Rtc>

  return;
 800091c:	bf00      	nop
}
 800091e:	bd80      	pop	{r7, pc}

08000920 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <Init_Rtc+0x1c>)
 8000926:	f7ff ff82 	bl	800082e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800092a:	2100      	movs	r1, #0
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <Init_Rtc+0x1c>)
 800092e:	f7ff ff8e 	bl	800084e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000932:	4802      	ldr	r0, [pc, #8]	@ (800093c <Init_Rtc+0x1c>)
 8000934:	f7ff ff6e 	bl	8000814 <LL_RTC_EnableWriteProtection>

  return;
 8000938:	bf00      	nop
}
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40002800 	.word	0x40002800

08000940 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000944:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000948:	f7ff ff24 	bl	8000794 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800094c:	f008 fb3e 	bl	8008fcc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000950:	2004      	movs	r0, #4
 8000952:	f7ff fed7 	bl	8000704 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000956:	bf00      	nop
}
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000962:	f006 fe53 	bl	800760c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000966:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <appe_Tl_Init+0x50>)
 8000968:	2100      	movs	r1, #0
 800096a:	2004      	movs	r0, #4
 800096c:	f008 fc6c 	bl	8009248 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <appe_Tl_Init+0x54>)
 8000972:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <appe_Tl_Init+0x58>)
 8000976:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <appe_Tl_Init+0x5c>)
 800097e:	f006 fb0f 	bl	8006fa0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <appe_Tl_Init+0x60>)
 8000984:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <appe_Tl_Init+0x64>)
 8000988:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <appe_Tl_Init+0x68>)
 800098c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800098e:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000992:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4618      	mov	r0, r3
 800099a:	f006 ff79 	bl	8007890 <TL_MM_Init>

  TL_Enable();
 800099e:	f006 fe2f 	bl	8007600 <TL_Enable>

  return;
 80009a2:	bf00      	nop
}
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08006fd9 	.word	0x08006fd9
 80009b0:	20030734 	.word	0x20030734
 80009b4:	080009c9 	.word	0x080009c9
 80009b8:	080009e1 	.word	0x080009e1
 80009bc:	2003094c 	.word	0x2003094c
 80009c0:	20030840 	.word	0x20030840
 80009c4:	200301f8 	.word	0x200301f8

080009c8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80009d2:	bf00      	nop
}
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	330b      	adds	r3, #11
 80009ee:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d81f      	bhi.n	8000a3e <APPE_SysUserEvtRx+0x5e>
 80009fe:	a201      	add	r2, pc, #4	@ (adr r2, 8000a04 <APPE_SysUserEvtRx+0x24>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a25 	.word	0x08000a25
 8000a08:	08000a37 	.word	0x08000a37
 8000a0c:	08000a3f 	.word	0x08000a3f
 8000a10:	08000a3f 	.word	0x08000a3f
 8000a14:	08000a3f 	.word	0x08000a3f
 8000a18:	08000a3f 	.word	0x08000a3f
 8000a1c:	08000a3f 	.word	0x08000a3f
 8000a20:	08000a3f 	.word	0x08000a3f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f006 fa0b 	bl	8006e44 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f81b 	bl	8000a6a <APPE_SysEvtReadyProcessing>
    break;
 8000a34:	e004      	b.n	8000a40 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f806 	bl	8000a48 <APPE_SysEvtError>
    break;
 8000a3c:	e000      	b.n	8000a40 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a3e:	bf00      	nop
  }

  return;
 8000a40:	bf00      	nop
}
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	330b      	adds	r3, #11
 8000a56:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000a5e:	bf00      	nop
}
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b08a      	sub	sp, #40	@ 0x28
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	330b      	adds	r3, #11
 8000a8e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	3302      	adds	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d11d      	bne.n	8000ada <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000a9e:	f7ff fdb7 	bl	8000610 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000aa2:	230f      	movs	r3, #15
 8000aa4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000aa6:	237f      	movs	r3, #127	@ 0x7f
 8000aa8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000aaa:	f7ff fe95 	bl	80007d8 <LL_DBGMCU_GetRevisionID>
 8000aae:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000ab6:	f7ff fe81 	bl	80007bc <LL_DBGMCU_GetDeviceID>
 8000aba:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 f9a6 	bl	8006e18 <SHCI_C2_Config>

    APP_BLE_Init();
 8000acc:	f007 f804 	bl	8007ad8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f008 fa8c 	bl	8008ff0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000ad8:	e007      	b.n	8000aea <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d103      	bne.n	8000aea <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
  return;
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
}
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afa:	f001 fbbd 	bl	8002278 <HAL_GetTick>
 8000afe:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0a:	d00a      	beq.n	8000b22 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000b0c:	f001 fbcc 	bl	80022a8 <HAL_GetTickFreq>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	e002      	b.n	8000b22 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000b1c:	f7ff fe6a 	bl	80007f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000b20:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000b22:	f001 fba9 	bl	8002278 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d8f4      	bhi.n	8000b1c <HAL_Delay+0x2a>
  }
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f008 fa84 	bl	8009050 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b50:	bf00      	nop
}
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f008 fa72 	bl	8009050 <UTIL_SEQ_Run>
  return;
 8000b6c:	bf00      	nop
}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f008 fb84 	bl	800928c <UTIL_SEQ_SetTask>
  return;
 8000b84:	bf00      	nop
}
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f008 fbe5 	bl	8009364 <UTIL_SEQ_SetEvt>
  return;
 8000b9a:	bf00      	nop
}
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f008 fbfa 	bl	80093a4 <UTIL_SEQ_WaitEvt>
  return;
 8000bb0:	bf00      	nop
}
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff ffd9 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2004      	movs	r0, #4
 8000c08:	f7ff ffd6 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff ffd3 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2080      	movs	r0, #128	@ 0x80
 8000c14:	f7ff ffd0 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c18:	2008      	movs	r0, #8
 8000c1a:	f7ff ffcd 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f7ff ffca 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_PWDN_GPIO_Port, ADS_PWDN_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2140      	movs	r1, #64	@ 0x40
 8000c28:	484a      	ldr	r0, [pc, #296]	@ (8000d54 <MX_GPIO_Init+0x168>)
 8000c2a:	f001 fe53 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADS_RESET_GPIO_Port, ADS_RESET_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c34:	4848      	ldr	r0, [pc, #288]	@ (8000d58 <MX_GPIO_Init+0x16c>)
 8000c36:	f001 fe4d 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	4847      	ldr	r0, [pc, #284]	@ (8000d5c <MX_GPIO_Init+0x170>)
 8000c40:	f001 fe48 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA1 PA0 PA15
                           PA10 PA12 PA11 PA8
                           PA9 PA7 PA6 PA5
                           PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_15
 8000c44:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 8000c48:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_4|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f001 fccb 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC2 PC1 PC0
                           PC10 PC11 PC12 PC6
                           PC5 PC4 PC9 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8000c5e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000c62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_6
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4839      	ldr	r0, [pc, #228]	@ (8000d58 <MX_GPIO_Init+0x16c>)
 8000c72:	f001 fcbf 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB4 PB3
                           PB13 PB14 PB15 PB12
                           PB1 PB0 PB11 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8000c76:	f64f 633b 	movw	r3, #65083	@ 0xfe3b
 8000c7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4832      	ldr	r0, [pc, #200]	@ (8000d54 <MX_GPIO_Init+0x168>)
 8000c8a:	f001 fcb3 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH3 PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4830      	ldr	r0, [pc, #192]	@ (8000d60 <MX_GPIO_Init+0x174>)
 8000ca0:	f001 fca8 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD14 PD13
                           PD12 PD7 PD2 PD3
                           PD4 PD9 PD8 PD15
                           PD10 PD5 PD6 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_13
 8000ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ca8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2303      	movs	r3, #3
 8000cac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	482b      	ldr	r0, [pc, #172]	@ (8000d64 <MX_GPIO_Init+0x178>)
 8000cb8:	f001 fc9c 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_PWDN_Pin */
  GPIO_InitStruct.Pin = ADS_PWDN_Pin;
 8000cbc:	2340      	movs	r3, #64	@ 0x40
 8000cbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADS_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4820      	ldr	r0, [pc, #128]	@ (8000d54 <MX_GPIO_Init+0x168>)
 8000cd2:	f001 fc8f 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_RESET_Pin */
  GPIO_InitStruct.Pin = ADS_RESET_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADS_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	481a      	ldr	r0, [pc, #104]	@ (8000d58 <MX_GPIO_Init+0x16c>)
 8000cee:	f001 fc81 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <MX_GPIO_Init+0x170>)
 8000d08:	f001 fc74 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_GPIO_Init+0x168>)
 8000d20:	f001 fc68 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE3 PE2 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0;
 8000d24:	230f      	movs	r3, #15
 8000d26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_GPIO_Init+0x170>)
 8000d36:	f001 fc5d 	bl	80025f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2008      	movs	r0, #8
 8000d40:	f001 fbf9 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d44:	2008      	movs	r0, #8
 8000d46:	f001 fc10 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48001000 	.word	0x48001000
 8000d60:	48001c00 	.word	0x48001c00
 8000d64:	48000c00 	.word	0x48000c00

08000d68 <LL_EXTI_EnableIT_0_31>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000d72:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000d76:	4905      	ldr	r1, [pc, #20]	@ (8000d8c <LL_EXTI_EnableIT_0_31+0x24>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	58000800 	.word	0x58000800

08000d90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4904      	ldr	r1, [pc, #16]	@ (8000db0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	600b      	str	r3, [r1, #0]

}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58000800 	.word	0x58000800

08000db4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <ReadRtcSsrValue+0x3c>)
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <ReadRtcSsrValue+0x3c>)
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000dca:	e005      	b.n	8000dd8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <ReadRtcSsrValue+0x3c>)
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d1f5      	bne.n	8000dcc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000de0:	683b      	ldr	r3, [r7, #0]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40002800 	.word	0x40002800

08000df4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000e04:	79ba      	ldrb	r2, [r7, #6]
 8000e06:	491d      	ldr	r1, [pc, #116]	@ (8000e7c <LinkTimerAfter+0x88>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3315      	adds	r3, #21
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	d009      	beq.n	8000e32 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	4916      	ldr	r1, [pc, #88]	@ (8000e7c <LinkTimerAfter+0x88>)
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3314      	adds	r3, #20
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000e32:	79fa      	ldrb	r2, [r7, #7]
 8000e34:	4911      	ldr	r1, [pc, #68]	@ (8000e7c <LinkTimerAfter+0x88>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3315      	adds	r3, #21
 8000e42:	7bfa      	ldrb	r2, [r7, #15]
 8000e44:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <LinkTimerAfter+0x88>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	3314      	adds	r3, #20
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000e5a:	79ba      	ldrb	r2, [r7, #6]
 8000e5c:	4907      	ldr	r1, [pc, #28]	@ (8000e7c <LinkTimerAfter+0x88>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3315      	adds	r3, #21
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	701a      	strb	r2, [r3, #0]

  return;
 8000e6e:	bf00      	nop
}
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000200 	.word	0x20000200

08000e80 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e90:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <LinkTimerBefore+0xb8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	79ba      	ldrb	r2, [r7, #6]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d032      	beq.n	8000f02 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000e9c:	79ba      	ldrb	r2, [r7, #6]
 8000e9e:	4927      	ldr	r1, [pc, #156]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3314      	adds	r3, #20
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	4922      	ldr	r1, [pc, #136]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	491d      	ldr	r1, [pc, #116]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3315      	adds	r3, #21
 8000ed4:	79ba      	ldrb	r2, [r7, #6]
 8000ed6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	4918      	ldr	r1, [pc, #96]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3314      	adds	r3, #20
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000eec:	79ba      	ldrb	r2, [r7, #6]
 8000eee:	4913      	ldr	r1, [pc, #76]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	440b      	add	r3, r1
 8000efa:	3314      	adds	r3, #20
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000f00:	e014      	b.n	8000f2c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3315      	adds	r3, #21
 8000f12:	79ba      	ldrb	r2, [r7, #6]
 8000f14:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f16:	79ba      	ldrb	r2, [r7, #6]
 8000f18:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <LinkTimerBefore+0xbc>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3314      	adds	r3, #20
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	701a      	strb	r2, [r3, #0]
  return;
 8000f2a:	bf00      	nop
}
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200002f0 	.word	0x200002f0
 8000f3c:	20000200 	.word	0x20000200

08000f40 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001084 <linkTimer+0x144>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d118      	bne.n	8000f86 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f54:	4b4b      	ldr	r3, [pc, #300]	@ (8001084 <linkTimer+0x144>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001088 <linkTimer+0x148>)
 8000f5c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000f5e:	4a49      	ldr	r2, [pc, #292]	@ (8001084 <linkTimer+0x144>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	4949      	ldr	r1, [pc, #292]	@ (800108c <linkTimer+0x14c>)
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3315      	adds	r3, #21
 8000f74:	220a      	movs	r2, #10
 8000f76:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f78:	4b45      	ldr	r3, [pc, #276]	@ (8001090 <linkTimer+0x150>)
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	81fb      	strh	r3, [r7, #14]
 8000f84:	e078      	b.n	8001078 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000f86:	f000 f909 	bl	800119c <ReturnTimeElapsed>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	493e      	ldr	r1, [pc, #248]	@ (800108c <linkTimer+0x14c>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	6819      	ldr	r1, [r3, #0]
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	4419      	add	r1, r3
 8000fa6:	4839      	ldr	r0, [pc, #228]	@ (800108c <linkTimer+0x14c>)
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	4403      	add	r3, r0
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	4934      	ldr	r1, [pc, #208]	@ (800108c <linkTimer+0x14c>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3308      	adds	r3, #8
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000fca:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <linkTimer+0x144>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800108c <linkTimer+0x14c>)
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	440b      	add	r3, r1
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4413      	add	r3, r2
 8000fde:	3308      	adds	r3, #8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d337      	bcc.n	8001058 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000fe8:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <linkTimer+0x144>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000fee:	7b7a      	ldrb	r2, [r7, #13]
 8000ff0:	4926      	ldr	r1, [pc, #152]	@ (800108c <linkTimer+0x14c>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3315      	adds	r3, #21
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001002:	e013      	b.n	800102c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001004:	7b7a      	ldrb	r2, [r7, #13]
 8001006:	4921      	ldr	r1, [pc, #132]	@ (800108c <linkTimer+0x14c>)
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	3315      	adds	r3, #21
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001018:	7b7a      	ldrb	r2, [r7, #13]
 800101a:	491c      	ldr	r1, [pc, #112]	@ (800108c <linkTimer+0x14c>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	3315      	adds	r3, #21
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d00b      	beq.n	800104a <linkTimer+0x10a>
 8001032:	7b3a      	ldrb	r2, [r7, #12]
 8001034:	4915      	ldr	r1, [pc, #84]	@ (800108c <linkTimer+0x14c>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	3308      	adds	r3, #8
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	d2dc      	bcs.n	8001004 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800104a:	7b7a      	ldrb	r2, [r7, #13]
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fecf 	bl	8000df4 <LinkTimerAfter>
 8001056:	e00f      	b.n	8001078 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <linkTimer+0x144>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff0c 	bl	8000e80 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <linkTimer+0x144>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <linkTimer+0x148>)
 8001070:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <linkTimer+0x144>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001078:	89fb      	ldrh	r3, [r7, #14]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200002f0 	.word	0x200002f0
 8001088:	200002f1 	.word	0x200002f1
 800108c:	20000200 	.word	0x20000200
 8001090:	200002f4 	.word	0x200002f4

08001094 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80010a4:	4b39      	ldr	r3, [pc, #228]	@ (800118c <UnlinkTimer+0xf8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d111      	bne.n	80010d4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010b0:	4b36      	ldr	r3, [pc, #216]	@ (800118c <UnlinkTimer+0xf8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <UnlinkTimer+0xfc>)
 80010b8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80010ba:	79fa      	ldrb	r2, [r7, #7]
 80010bc:	4935      	ldr	r1, [pc, #212]	@ (8001194 <UnlinkTimer+0x100>)
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	3315      	adds	r3, #21
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <UnlinkTimer+0xf8>)
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e03e      	b.n	8001152 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	492f      	ldr	r1, [pc, #188]	@ (8001194 <UnlinkTimer+0x100>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	3314      	adds	r3, #20
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	492a      	ldr	r1, [pc, #168]	@ (8001194 <UnlinkTimer+0x100>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	3315      	adds	r3, #21
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80010fc:	79f9      	ldrb	r1, [r7, #7]
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	4824      	ldr	r0, [pc, #144]	@ (8001194 <UnlinkTimer+0x100>)
 8001102:	460b      	mov	r3, r1
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	440b      	add	r3, r1
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4403      	add	r3, r0
 800110c:	3315      	adds	r3, #21
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2d8      	uxtb	r0, r3
 8001112:	4920      	ldr	r1, [pc, #128]	@ (8001194 <UnlinkTimer+0x100>)
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	440b      	add	r3, r1
 800111e:	3315      	adds	r3, #21
 8001120:	4602      	mov	r2, r0
 8001122:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b0a      	cmp	r3, #10
 8001128:	d013      	beq.n	8001152 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800112a:	79f9      	ldrb	r1, [r7, #7]
 800112c:	7bba      	ldrb	r2, [r7, #14]
 800112e:	4819      	ldr	r0, [pc, #100]	@ (8001194 <UnlinkTimer+0x100>)
 8001130:	460b      	mov	r3, r1
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	440b      	add	r3, r1
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4403      	add	r3, r0
 800113a:	3314      	adds	r3, #20
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	4914      	ldr	r1, [pc, #80]	@ (8001194 <UnlinkTimer+0x100>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3314      	adds	r3, #20
 800114e:	4602      	mov	r2, r0
 8001150:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	490f      	ldr	r1, [pc, #60]	@ (8001194 <UnlinkTimer+0x100>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	330c      	adds	r3, #12
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <UnlinkTimer+0xf8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b0a      	cmp	r3, #10
 800116e:	d107      	bne.n	8001180 <UnlinkTimer+0xec>
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <UnlinkTimer+0x104>)
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	601a      	str	r2, [r3, #0]
  }

  return;
 800117e:	bf00      	nop
 8001180:	bf00      	nop
}
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	200002f0 	.word	0x200002f0
 8001190:	200002f1 	.word	0x200002f1
 8001194:	20000200 	.word	0x20000200
 8001198:	200002f4 	.word	0x200002f4

0800119c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <ReturnTimeElapsed+0x70>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011aa:	d026      	beq.n	80011fa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80011ac:	f7ff fe02 	bl	8000db4 <ReadRtcSsrValue>
 80011b0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <ReturnTimeElapsed+0x70>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d805      	bhi.n	80011c8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <ReturnTimeElapsed+0x70>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e00a      	b.n	80011de <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <ReturnTimeElapsed+0x74>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <ReturnTimeElapsed+0x70>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <ReturnTimeElapsed+0x78>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <ReturnTimeElapsed+0x7c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	40d3      	lsrs	r3, r2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	e001      	b.n	80011fe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	b29b      	uxth	r3, r3
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002f4 	.word	0x200002f4
 8001210:	200002fc 	.word	0x200002fc
 8001214:	200002fa 	.word	0x200002fa
 8001218:	200002f9 	.word	0x200002f9

0800121c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800122c:	f7ff fdc2 	bl	8000db4 <ReadRtcSsrValue>
 8001230:	4603      	mov	r3, r0
 8001232:	4a21      	ldr	r2, [pc, #132]	@ (80012b8 <RestartWakeupCounter+0x9c>)
 8001234:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001236:	2003      	movs	r0, #3
 8001238:	f001 f9bf 	bl	80025ba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800123c:	e039      	b.n	80012b2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d803      	bhi.n	800124c <RestartWakeupCounter+0x30>
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <RestartWakeupCounter+0xa0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d002      	beq.n	8001252 <RestartWakeupCounter+0x36>
      Value -= 1;
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	3b01      	subs	r3, #1
 8001250:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001252:	bf00      	nop
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <RestartWakeupCounter+0xa4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f8      	beq.n	8001254 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <RestartWakeupCounter+0xa4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <RestartWakeupCounter+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001272:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <RestartWakeupCounter+0xa8>)
 8001276:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800127a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800127c:	2003      	movs	r0, #3
 800127e:	f001 f9aa 	bl	80025d6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <RestartWakeupCounter+0xac>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	0c1b      	lsrs	r3, r3, #16
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	88fa      	ldrh	r2, [r7, #6]
 800128c:	490e      	ldr	r1, [pc, #56]	@ (80012c8 <RestartWakeupCounter+0xac>)
 800128e:	4313      	orrs	r3, r2
 8001290:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001292:	f7ff fd8f 	bl	8000db4 <ReadRtcSsrValue>
 8001296:	4603      	mov	r3, r0
 8001298:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <RestartWakeupCounter+0x9c>)
 800129a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <RestartWakeupCounter+0xa4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <RestartWakeupCounter+0xa4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012aa:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80012ac:	f3af 8000 	nop.w
  return ;
 80012b0:	bf00      	nop
}
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002f4 	.word	0x200002f4
 80012bc:	200002f9 	.word	0x200002f9
 80012c0:	20000398 	.word	0x20000398
 80012c4:	58000800 	.word	0x58000800
 80012c8:	40002800 	.word	0x40002800

080012cc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012d2:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <RescheduleTimerList+0x11c>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012de:	d107      	bne.n	80012f0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80012e0:	bf00      	nop
 80012e2:	4b42      	ldr	r3, [pc, #264]	@ (80013ec <RescheduleTimerList+0x120>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f8      	bne.n	80012e2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80012f0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <RescheduleTimerList+0x120>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <RescheduleTimerList+0x120>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012fe:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001300:	4b3b      	ldr	r3, [pc, #236]	@ (80013f0 <RescheduleTimerList+0x124>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	493a      	ldr	r1, [pc, #232]	@ (80013f4 <RescheduleTimerList+0x128>)
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	3308      	adds	r3, #8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800131a:	f7ff ff3f 	bl	800119c <ReturnTimeElapsed>
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	429a      	cmp	r2, r3
 8001328:	d205      	bcs.n	8001336 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800132e:	4b32      	ldr	r3, [pc, #200]	@ (80013f8 <RescheduleTimerList+0x12c>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	e04d      	b.n	80013d2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	4a30      	ldr	r2, [pc, #192]	@ (80013fc <RescheduleTimerList+0x130>)
 800133a:	8812      	ldrh	r2, [r2, #0]
 800133c:	b292      	uxth	r2, r2
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	4293      	cmp	r3, r2
 8001346:	d906      	bls.n	8001356 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001348:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <RescheduleTimerList+0x130>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800134e:	4b2a      	ldr	r3, [pc, #168]	@ (80013f8 <RescheduleTimerList+0x12c>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e03d      	b.n	80013d2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b29a      	uxth	r2, r3
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <RescheduleTimerList+0x12c>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001366:	e034      	b.n	80013d2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	4922      	ldr	r1, [pc, #136]	@ (80013f4 <RescheduleTimerList+0x128>)
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	3308      	adds	r3, #8
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	429a      	cmp	r2, r3
 800137e:	d20a      	bcs.n	8001396 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	491c      	ldr	r1, [pc, #112]	@ (80013f4 <RescheduleTimerList+0x128>)
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	3308      	adds	r3, #8
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e013      	b.n	80013be <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	4916      	ldr	r1, [pc, #88]	@ (80013f4 <RescheduleTimerList+0x128>)
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	3308      	adds	r3, #8
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	1ac9      	subs	r1, r1, r3
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <RescheduleTimerList+0x128>)
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4403      	add	r3, r0
 80013ba:	3308      	adds	r3, #8
 80013bc:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <RescheduleTimerList+0x128>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	3315      	adds	r3, #21
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	2b0a      	cmp	r3, #10
 80013d6:	d1c7      	bne.n	8001368 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80013d8:	89bb      	ldrh	r3, [r7, #12]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff1e 	bl	800121c <RestartWakeupCounter>

  return ;
 80013e0:	bf00      	nop
}
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40002800 	.word	0x40002800
 80013ec:	20000398 	.word	0x20000398
 80013f0:	200002f0 	.word	0x200002f0
 80013f4:	20000200 	.word	0x20000200
 80013f8:	200002f8 	.word	0x200002f8
 80013fc:	200002fe 	.word	0x200002fe

08001400 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001406:	f3ef 8310 	mrs	r3, PRIMASK
 800140a:	617b      	str	r3, [r7, #20]
  return(result);
 800140c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001414:	4b59      	ldr	r3, [pc, #356]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	22ca      	movs	r2, #202	@ 0xca
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24
 800141c:	4b57      	ldr	r3, [pc, #348]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2253      	movs	r2, #83	@ 0x53
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001424:	4b55      	ldr	r3, [pc, #340]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	4b54      	ldr	r3, [pc, #336]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001432:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001434:	4b52      	ldr	r3, [pc, #328]	@ (8001580 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800143c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001440:	4950      	ldr	r1, [pc, #320]	@ (8001584 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	330c      	adds	r3, #12
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d16e      	bne.n	8001534 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001456:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800145a:	494a      	ldr	r1, [pc, #296]	@ (8001584 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800146a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800146e:	4945      	ldr	r1, [pc, #276]	@ (8001584 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3310      	adds	r3, #16
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001480:	4b41      	ldr	r3, [pc, #260]	@ (8001588 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d04c      	beq.n	8001524 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800148a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800148e:	493d      	ldr	r1, [pc, #244]	@ (8001584 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	330d      	adds	r3, #13
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d124      	bne.n	80014ee <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80014a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fdf2 	bl	8001094 <UnlinkTimer>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	f383 8810 	msr	PRIMASK, r3
}
 80014ba:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80014bc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80014c0:	4930      	ldr	r1, [pc, #192]	@ (8001584 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	3304      	adds	r3, #4
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fa32 	bl	8001940 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	22ca      	movs	r2, #202	@ 0xca
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2253      	movs	r2, #83	@ 0x53
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80014ec:	e012      	b.n	8001514 <HW_TS_RTC_Wakeup_Handler+0x114>
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f383 8810 	msr	PRIMASK, r3
}
 80014f8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f99a 	bl	8001838 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	22ca      	movs	r2, #202	@ 0xca
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2253      	movs	r2, #83	@ 0x53
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001514:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	4619      	mov	r1, r3
 800151c:	69b8      	ldr	r0, [r7, #24]
 800151e:	f000 fa95 	bl	8001a4c <HW_TS_RTC_Int_AppNot>
 8001522:	e022      	b.n	800156a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001524:	f7ff fed2 	bl	80012cc <RescheduleTimerList>
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f383 8810 	msr	PRIMASK, r3
}
 8001532:	e01a      	b.n	800156a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001534:	bf00      	nop
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f8      	beq.n	8001536 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001554:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001558:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f383 8810 	msr	PRIMASK, r3
}
 8001568:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800156a:	4b04      	ldr	r3, [pc, #16]	@ (800157c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	22ff      	movs	r2, #255	@ 0xff
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001572:	bf00      	nop
}
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000398 	.word	0x20000398
 8001580:	200002f0 	.word	0x200002f0
 8001584:	20000200 	.word	0x20000200
 8001588:	200002f8 	.word	0x200002f8
 800158c:	58000800 	.word	0x58000800

08001590 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800159c:	4b5e      	ldr	r3, [pc, #376]	@ (8001718 <HW_TS_Init+0x188>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22ca      	movs	r2, #202	@ 0xca
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80015a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001718 <HW_TS_Init+0x188>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2253      	movs	r2, #83	@ 0x53
 80015aa:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80015ac:	4b5b      	ldr	r3, [pc, #364]	@ (800171c <HW_TS_Init+0x18c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a5a      	ldr	r2, [pc, #360]	@ (800171c <HW_TS_Init+0x18c>)
 80015b2:	f043 0320 	orr.w	r3, r3, #32
 80015b6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80015b8:	4b58      	ldr	r3, [pc, #352]	@ (800171c <HW_TS_Init+0x18c>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f1c3 0304 	rsb	r3, r3, #4
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b55      	ldr	r3, [pc, #340]	@ (8001720 <HW_TS_Init+0x190>)
 80015cc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80015ce:	4b53      	ldr	r3, [pc, #332]	@ (800171c <HW_TS_Init+0x18c>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80015d6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80015da:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	fa92 f2a2 	rbit	r2, r2
 80015e2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	2a00      	cmp	r2, #0
 80015ec:	d101      	bne.n	80015f2 <HW_TS_Init+0x62>
  {
    return 32U;
 80015ee:	2220      	movs	r2, #32
 80015f0:	e003      	b.n	80015fa <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	fab2 f282 	clz	r2, r2
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	40d3      	lsrs	r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b48      	ldr	r3, [pc, #288]	@ (8001724 <HW_TS_Init+0x194>)
 8001604:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001606:	4b45      	ldr	r3, [pc, #276]	@ (800171c <HW_TS_Init+0x18c>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	b29b      	uxth	r3, r3
 800160c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001610:	b29b      	uxth	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <HW_TS_Init+0x198>)
 8001618:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800161a:	4b43      	ldr	r3, [pc, #268]	@ (8001728 <HW_TS_Init+0x198>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	3b01      	subs	r3, #1
 8001620:	4a40      	ldr	r2, [pc, #256]	@ (8001724 <HW_TS_Init+0x194>)
 8001622:	7812      	ldrb	r2, [r2, #0]
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800162c:	4a3c      	ldr	r2, [pc, #240]	@ (8001720 <HW_TS_Init+0x190>)
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	40d3      	lsrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800163a:	4293      	cmp	r3, r2
 800163c:	d904      	bls.n	8001648 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HW_TS_Init+0x19c>)
 8001640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	e003      	b.n	8001650 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b37      	ldr	r3, [pc, #220]	@ (800172c <HW_TS_Init+0x19c>)
 800164e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001650:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001654:	f7ff fb9c 	bl	8000d90 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001658:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800165c:	f7ff fb84 	bl	8000d68 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d13d      	bne.n	80016e2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001666:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <HW_TS_Init+0x1a0>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HW_TS_Init+0x1a4>)
 800166e:	f04f 32ff 	mov.w	r2, #4294967295
 8001672:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001674:	2300      	movs	r3, #0
 8001676:	77fb      	strb	r3, [r7, #31]
 8001678:	e00c      	b.n	8001694 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800167a:	7ffa      	ldrb	r2, [r7, #31]
 800167c:	492e      	ldr	r1, [pc, #184]	@ (8001738 <HW_TS_Init+0x1a8>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	330c      	adds	r3, #12
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	3301      	adds	r3, #1
 8001692:	77fb      	strb	r3, [r7, #31]
 8001694:	7ffb      	ldrb	r3, [r7, #31]
 8001696:	2b09      	cmp	r3, #9
 8001698:	d9ef      	bls.n	800167a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <HW_TS_Init+0x1ac>)
 800169c:	220a      	movs	r2, #10
 800169e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HW_TS_Init+0x188>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <HW_TS_Init+0x188>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ae:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HW_TS_Init+0x188>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <HW_TS_Init+0x188>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80016c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80016c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HW_TS_Init+0x1b0>)
 80016c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016c8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80016ca:	2003      	movs	r0, #3
 80016cc:	f000 ff83 	bl	80025d6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HW_TS_Init+0x188>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HW_TS_Init+0x188>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e009      	b.n	80016f6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <HW_TS_Init+0x188>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 ff62 	bl	80025ba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HW_TS_Init+0x188>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	22ff      	movs	r2, #255	@ 0xff
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	2003      	movs	r0, #3
 8001704:	f000 ff17 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001708:	2003      	movs	r0, #3
 800170a:	f000 ff2e 	bl	800256a <HAL_NVIC_EnableIRQ>

  return;
 800170e:	bf00      	nop
}
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000398 	.word	0x20000398
 800171c:	40002800 	.word	0x40002800
 8001720:	200002f9 	.word	0x200002f9
 8001724:	200002fa 	.word	0x200002fa
 8001728:	200002fc 	.word	0x200002fc
 800172c:	200002fe 	.word	0x200002fe
 8001730:	200002f8 	.word	0x200002f8
 8001734:	200002f4 	.word	0x200002f4
 8001738:	20000200 	.word	0x20000200
 800173c:	200002f0 	.word	0x200002f0
 8001740:	58000800 	.word	0x58000800

08001744 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001744:	b480      	push	{r7}
 8001746:	b08b      	sub	sp, #44	@ 0x2c
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175a:	f3ef 8310 	mrs	r3, PRIMASK
 800175e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001760:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001762:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001768:	e004      	b.n	8001774 <HW_TS_Create+0x30>
  {
    loop++;
 800176a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800176e:	3301      	adds	r3, #1
 8001770:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001774:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001778:	2b09      	cmp	r3, #9
 800177a:	d80c      	bhi.n	8001796 <HW_TS_Create+0x52>
 800177c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001780:	492c      	ldr	r1, [pc, #176]	@ (8001834 <HW_TS_Create+0xf0>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	330c      	adds	r3, #12
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e9      	bne.n	800176a <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001796:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d038      	beq.n	8001810 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800179e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80017a2:	4924      	ldr	r1, [pc, #144]	@ (8001834 <HW_TS_Create+0xf0>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	330c      	adds	r3, #12
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f383 8810 	msr	PRIMASK, r3
}
 80017be:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80017c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80017c4:	491b      	ldr	r1, [pc, #108]	@ (8001834 <HW_TS_Create+0xf0>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	3310      	adds	r3, #16
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80017d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80017da:	4916      	ldr	r1, [pc, #88]	@ (8001834 <HW_TS_Create+0xf0>)
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	330d      	adds	r3, #13
 80017e8:	79fa      	ldrb	r2, [r7, #7]
 80017ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80017ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80017f0:	4910      	ldr	r1, [pc, #64]	@ (8001834 <HW_TS_Create+0xf0>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001806:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800180e:	e008      	b.n	8001822 <HW_TS_Create+0xde>
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f383 8810 	msr	PRIMASK, r3
}
 800181a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8001822:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001826:	4618      	mov	r0, r3
 8001828:	372c      	adds	r7, #44	@ 0x2c
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000200 	.word	0x20000200

08001838 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001842:	f3ef 8310 	mrs	r3, PRIMASK
 8001846:	60fb      	str	r3, [r7, #12]
  return(result);
 8001848:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800184a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001850:	2003      	movs	r0, #3
 8001852:	f000 fe98 	bl	8002586 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <HW_TS_Stop+0xf0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	22ca      	movs	r2, #202	@ 0xca
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <HW_TS_Stop+0xf0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2253      	movs	r2, #83	@ 0x53
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	4930      	ldr	r1, [pc, #192]	@ (800192c <HW_TS_Stop+0xf4>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	330c      	adds	r3, #12
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d142      	bne.n	8001904 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fc06 	bl	8001094 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001888:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <HW_TS_Stop+0xf8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	2b0a      	cmp	r3, #10
 8001892:	d12f      	bne.n	80018f4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <HW_TS_Stop+0xfc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018a0:	d107      	bne.n	80018b2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80018a2:	bf00      	nop
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HW_TS_Stop+0xf0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f8      	bne.n	80018a4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80018b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <HW_TS_Stop+0xf0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HW_TS_Stop+0xf0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018c0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80018c2:	bf00      	nop
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <HW_TS_Stop+0xf0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f8      	beq.n	80018c4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HW_TS_Stop+0xf0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HW_TS_Stop+0xf0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80018e2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <HW_TS_Stop+0x100>)
 80018e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018ea:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 fe72 	bl	80025d6 <HAL_NVIC_ClearPendingIRQ>
 80018f2:	e007      	b.n	8001904 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HW_TS_Stop+0x104>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	7cfa      	ldrb	r2, [r7, #19]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001900:	f7ff fce4 	bl	80012cc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HW_TS_Stop+0xf0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	22ff      	movs	r2, #255	@ 0xff
 800190a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800190c:	2003      	movs	r0, #3
 800190e:	f000 fe2c 	bl	800256a <HAL_NVIC_EnableIRQ>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f383 8810 	msr	PRIMASK, r3
}
 800191c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800191e:	bf00      	nop
}
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000398 	.word	0x20000398
 800192c:	20000200 	.word	0x20000200
 8001930:	200002f0 	.word	0x200002f0
 8001934:	40002800 	.word	0x40002800
 8001938:	58000800 	.word	0x58000800
 800193c:	200002f1 	.word	0x200002f1

08001940 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	493b      	ldr	r1, [pc, #236]	@ (8001a3c <HW_TS_Start+0xfc>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	330c      	adds	r3, #12
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d103      	bne.n	800196c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff66 	bl	8001838 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800196c:	f3ef 8310 	mrs	r3, PRIMASK
 8001970:	60fb      	str	r3, [r7, #12]
  return(result);
 8001972:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001974:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001976:	b672      	cpsid	i
}
 8001978:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800197a:	2003      	movs	r0, #3
 800197c:	f000 fe03 	bl	8002586 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001980:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <HW_TS_Start+0x100>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	22ca      	movs	r2, #202	@ 0xca
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
 8001988:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <HW_TS_Start+0x100>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2253      	movs	r2, #83	@ 0x53
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	492a      	ldr	r1, [pc, #168]	@ (8001a3c <HW_TS_Start+0xfc>)
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	330c      	adds	r3, #12
 80019a0:	2202      	movs	r2, #2
 80019a2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	4925      	ldr	r1, [pc, #148]	@ (8001a3c <HW_TS_Start+0xfc>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3308      	adds	r3, #8
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80019b8:	79fa      	ldrb	r2, [r7, #7]
 80019ba:	4920      	ldr	r1, [pc, #128]	@ (8001a3c <HW_TS_Start+0xfc>)
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3304      	adds	r3, #4
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fab6 	bl	8000f40 <linkTimer>
 80019d4:	4603      	mov	r3, r0
 80019d6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <HW_TS_Start+0x104>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HW_TS_Start+0x108>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	7c7a      	ldrb	r2, [r7, #17]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d002      	beq.n	80019f0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80019ea:	f7ff fc6f 	bl	80012cc <RescheduleTimerList>
 80019ee:	e013      	b.n	8001a18 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	4912      	ldr	r1, [pc, #72]	@ (8001a3c <HW_TS_Start+0xfc>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	3308      	adds	r3, #8
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	8a7b      	ldrh	r3, [r7, #18]
 8001a04:	79fa      	ldrb	r2, [r7, #7]
 8001a06:	1ac9      	subs	r1, r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <HW_TS_Start+0xfc>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4403      	add	r3, r0
 8001a14:	3308      	adds	r3, #8
 8001a16:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HW_TS_Start+0x100>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	22ff      	movs	r2, #255	@ 0xff
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 fda2 	bl	800256a <HAL_NVIC_EnableIRQ>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f383 8810 	msr	PRIMASK, r3
}
 8001a30:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a32:	bf00      	nop
}
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000200 	.word	0x20000200
 8001a40:	20000398 	.word	0x20000398
 8001a44:	200002f0 	.word	0x200002f0
 8001a48:	200002f1 	.word	0x200002f1

08001a4c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	460b      	mov	r3, r1
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4798      	blx	r3

  return;
 8001a5e:	bf00      	nop
}
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <LL_AHB2_GRP1_EnableClock>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001aa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <MX_I2C1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <MX_I2C1_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b06:	480e      	ldr	r0, [pc, #56]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b08:	f000 ff44 	bl	8002994 <HAL_I2C_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b12:	f000 f98f 	bl	8001e34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b16:	2100      	movs	r1, #0
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b1a:	f001 fcc7 	bl	80034ac <HAL_I2CEx_ConfigAnalogFilter>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b24:	f000 f986 	bl	8001e34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_I2C1_Init+0x74>)
 8001b2c:	f001 fd09 	bl	8003542 <HAL_I2CEx_ConfigDigitalFilter>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 f97d 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000300 	.word	0x20000300
 8001b44:	40005400 	.word	0x40005400
 8001b48:	00201d2b 	.word	0x00201d2b

08001b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b09c      	sub	sp, #112	@ 0x70
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2250      	movs	r2, #80	@ 0x50
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f007 fc89 	bl	8009484 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <HAL_I2C_MspInit+0x88>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d126      	bne.n	8001bca <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b80:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 f8ad 	bl	8004cea <HAL_RCCEx_PeriphCLKConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b96:	f000 f94d 	bl	8001e34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f7ff ff63 	bl	8001a66 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001ba0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <HAL_I2C_MspInit+0x8c>)
 8001bbe:	f000 fd19 	bl	80025f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001bc6:	f7ff ff67 	bl	8001a98 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3770      	adds	r7, #112	@ 0x70
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	48000400 	.word	0x48000400

08001bdc <LL_AHB3_GRP1_EnableClock>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c00:	68fb      	ldr	r3, [r7, #12]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <MX_IPCC_Init+0x20>)
 8001c16:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <MX_IPCC_Init+0x24>)
 8001c18:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <MX_IPCC_Init+0x20>)
 8001c1c:	f001 fcde 	bl	80035dc <HAL_IPCC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001c26:	f000 f905 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000354 	.word	0x20000354
 8001c34:	58000c00 	.word	0x58000c00

08001c38 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_IPCC_MspInit+0x44>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d113      	bne.n	8001c72 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001c4a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001c4e:	f7ff ffc5 	bl	8001bdc <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	202c      	movs	r0, #44	@ 0x2c
 8001c58:	f000 fc6d 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001c5c:	202c      	movs	r0, #44	@ 0x2c
 8001c5e:	f000 fc84 	bl	800256a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	202d      	movs	r0, #45	@ 0x2d
 8001c68:	f000 fc65 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001c6c:	202d      	movs	r0, #45	@ 0x2d
 8001c6e:	f000 fc7c 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	58000c00 	.word	0x58000c00

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c86:	f000 fa89 	bl	800219c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001c8a:	f7fe fdf3 	bl	8000874 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8e:	f000 f845 	bl	8001d1c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c92:	f000 f8af 	bl	8001df4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001c96:	f7ff ffbb 	bl	8001c10 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001c9a:	f000 f8d1 	bl	8001e40 <MX_RF_Init>
  MX_GPIO_Init();
 8001c9e:	f7fe ffa5 	bl	8000bec <MX_GPIO_Init>
  MX_RTC_Init();
 8001ca2:	f000 f8ff 	bl	8001ea4 <MX_RTC_Init>
  MX_I2C1_Init();
 8001ca6:	f7ff ff11 	bl	8001acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //LSM6DSL_Init();

  uint8_t data1;
  ADPD1080_ReadAllRegisters(&hi2c1);
 8001caa:	4819      	ldr	r0, [pc, #100]	@ (8001d10 <main+0x90>)
 8001cac:	f7fe fa6e 	bl	800018c <ADPD1080_ReadAllRegisters>
  ADPD1080_CheckRegisters(&hi2c1);
 8001cb0:	4817      	ldr	r0, [pc, #92]	@ (8001d10 <main+0x90>)
 8001cb2:	f7fe fb33 	bl	800031c <ADPD1080_CheckRegisters>
  HAL_I2C_Mem_Read(&hi2c1, ADPD1080_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <main+0x94>)
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2214      	movs	r2, #20
 8001cc8:	21c8      	movs	r1, #200	@ 0xc8
 8001cca:	4811      	ldr	r0, [pc, #68]	@ (8001d10 <main+0x90>)
 8001ccc:	f001 f812 	bl	8002cf4 <HAL_I2C_Mem_Read>
  //HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDR, 0x11, I2C_MEMADD_SIZE_8BIT, register_value2, 2, HAL_MAX_DELAY);
  // 1. Configure accelerometer (416Hz, ±8g) - do this once at startup
   // 4. Add small delay between readings
  HAL_Delay(100);
 8001cd0:	2064      	movs	r0, #100	@ 0x64
 8001cd2:	f7fe ff0e 	bl	8000af2 <HAL_Delay>

     // Initialize ADS1296 properly
     

    ADPD1080_LEDoff(&hi2c1);
 8001cd6:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <main+0x90>)
 8001cd8:	f7fe fc48 	bl	800056c <ADPD1080_LEDoff>

    data1 = 0xAA;  // 0b10101010 = enabled, 25Hz, BDU
 8001cdc:	23aa      	movs	r3, #170	@ 0xaa
 8001cde:	71fb      	strb	r3, [r7, #7]
       HAL_I2C_Mem_Write(&hi2c1, STTS22H_I2C_ADDR << 1, STTS22H_CTRL_REG,
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	217e      	movs	r1, #126	@ 0x7e
 8001cf4:	4806      	ldr	r0, [pc, #24]	@ (8001d10 <main+0x90>)
 8001cf6:	f000 fee9 	bl	8002acc <HAL_I2C_Mem_Write>
                                I2C_MEMADD_SIZE_8BIT, &data1, 1, HAL_MAX_DELAY);

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001cfa:	f7fe fdc9 	bl	8000890 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001cfe:	f7fe ff1d 	bl	8000b3c <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  //HAL_I2C_Mem_Read(&hi2c1, 0x6A<<1, 0x0F, I2C_MEMADD_SIZE_8BIT, &check, 1, HAL_MAX_DELAY);
	  count++;
 8001d02:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <main+0x98>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	4a03      	ldr	r2, [pc, #12]	@ (8001d18 <main+0x98>)
 8001d0a:	6013      	str	r3, [r2, #0]
    MX_APPE_Process();
 8001d0c:	bf00      	nop
 8001d0e:	e7f6      	b.n	8001cfe <main+0x7e>
 8001d10:	20000300 	.word	0x20000300
 8001d14:	20000394 	.word	0x20000394
 8001d18:	20000390 	.word	0x20000390

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b09a      	sub	sp, #104	@ 0x68
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 0320 	add.w	r3, r7, #32
 8001d26:	2248      	movs	r2, #72	@ 0x48
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 fbaa 	bl	8009484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]
 8001d3e:	615a      	str	r2, [r3, #20]
 8001d40:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d42:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <SystemClock_Config+0xd4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d4a:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <SystemClock_Config+0xd4>)
 8001d4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <SystemClock_Config+0xd4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001d5e:	232b      	movs	r3, #43	@ 0x2b
 8001d60:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d72:	2340      	movs	r3, #64	@ 0x40
 8001d74:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d7a:	2360      	movs	r3, #96	@ 0x60
 8001d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d86:	2301      	movs	r3, #1
 8001d88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001d8e:	2320      	movs	r3, #32
 8001d90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001d98:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001d9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 f819 	bl	8003de0 <HAL_RCC_OscConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001db4:	f000 f83e 	bl	8001e34 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001db8:	236f      	movs	r3, #111	@ 0x6f
 8001dba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001dc0:	2390      	movs	r3, #144	@ 0x90
 8001dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 fb75 	bl	80044c8 <HAL_RCC_ClockConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001de4:	f000 f826 	bl	8001e34 <Error_Handler>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3768      	adds	r7, #104	@ 0x68
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58000400 	.word	0x58000400

08001df4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b094      	sub	sp, #80	@ 0x50
 8001df8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2250      	movs	r2, #80	@ 0x50
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f007 fb3f 	bl	8009484 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001e06:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e0a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8001e0c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001e12:	2300      	movs	r3, #0
 8001e14:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001e16:	2310      	movs	r3, #16
 8001e18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 ff64 	bl	8004cea <HAL_RCCEx_PeriphCLKConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001e28:	f000 f804 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e2c:	bf00      	nop
 8001e2e:	3750      	adds	r7, #80	@ 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <Error_Handler+0x8>

08001e40 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_APB1_GRP1_EnableClock>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e94:	68fb      	ldr	r3, [r7, #12]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <MX_RTC_Init+0x64>)
 8001eac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001eba:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001ebc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001ec0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eda:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001edc:	f003 f98c 	bl	80051f8 <HAL_RTC_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f7ff ffa5 	bl	8001e34 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_RTC_Init+0x60>)
 8001ef0:	f003 fa82 	bl	80053f8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001efa:	f7ff ff9b 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000398 	.word	0x20000398
 8001f08:	40002800 	.word	0x40002800

08001f0c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b096      	sub	sp, #88	@ 0x58
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0308 	add.w	r3, r7, #8
 8001f18:	2250      	movs	r2, #80	@ 0x50
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f007 fab1 	bl	8009484 <memset>
  if(rtcHandle->Instance==RTC)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <HAL_RTC_MspInit+0x68>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d11f      	bne.n	8001f6c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001f2c:	f001 fbdc 	bl	80036e8 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f34:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fed2 	bl	8004cea <HAL_RCCEx_PeriphCLKConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001f4c:	f7ff ff72 	bl	8001e34 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f50:	f7ff ff7d 	bl	8001e4e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f54:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f58:	f7ff ff8a 	bl	8001e70 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 fae8 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001f66:	2003      	movs	r0, #3
 8001f68:	f000 faff 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3758      	adds	r7, #88	@ 0x58
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40002800 	.word	0x40002800

08001f78 <LL_AHB3_GRP1_EnableClock>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001fae:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001fb2:	f7ff ffe1 	bl	8001f78 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f000 fabb 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f000 fad2 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	202e      	movs	r0, #46	@ 0x2e
 8001fcc:	f000 fab3 	bl	8002536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001fd0:	202e      	movs	r0, #46	@ 0x2e
 8001fd2:	f000 faca 	bl	800256a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fde:	bf00      	nop
 8001fe0:	e7fd      	b.n	8001fde <NMI_Handler+0x4>

08001fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe6:	bf00      	nop
 8001fe8:	e7fd      	b.n	8001fe6 <HardFault_Handler+0x4>

08001fea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	bf00      	nop
 8001ff8:	e7fd      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ffa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <UsageFault_Handler+0x4>

08002002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002030:	f000 f90e 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800203c:	f7ff f9e0 	bl	8001400 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8002056:	2004      	movs	r0, #4
 8002058:	f000 fc54 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002064:	f006 fe74 	bl	8008d50 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002070:	f006 fea4 	bl	8008dbc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800207c:	f000 fc66 	bl	800294c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002088:	4b24      	ldr	r3, [pc, #144]	@ (800211c <SystemInit+0x98>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	4a23      	ldr	r2, [pc, #140]	@ (800211c <SystemInit+0x98>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80020b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <SystemInit+0x9c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ce:	f023 0305 	bic.w	r3, r3, #5
 80020d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <SystemInit+0xa0>)
 80020f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002124 <SystemInit+0xa0>)
 80020f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002108:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	faf6fefb 	.word	0xfaf6fefb
 8002124:	22041000 	.word	0x22041000

08002128 <CopyDataInit>:
 8002128:	58d4      	ldr	r4, [r2, r3]
 800212a:	50c4      	str	r4, [r0, r3]
 800212c:	3304      	adds	r3, #4

0800212e <LoopCopyDataInit>:
 800212e:	18c4      	adds	r4, r0, r3
 8002130:	428c      	cmp	r4, r1
 8002132:	d3f9      	bcc.n	8002128 <CopyDataInit>
 8002134:	4770      	bx	lr

08002136 <FillZerobss>:
 8002136:	6003      	str	r3, [r0, #0]
 8002138:	3004      	adds	r0, #4

0800213a <LoopFillZerobss>:
 800213a:	4288      	cmp	r0, r1
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>
 800213e:	4770      	bx	lr

08002140 <Reset_Handler>:
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <LoopForever+0x2>)
 8002142:	4685      	mov	sp, r0
 8002144:	f7ff ff9e 	bl	8002084 <SystemInit>
 8002148:	480b      	ldr	r0, [pc, #44]	@ (8002178 <LoopForever+0x6>)
 800214a:	490c      	ldr	r1, [pc, #48]	@ (800217c <LoopForever+0xa>)
 800214c:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <LoopForever+0xe>)
 800214e:	2300      	movs	r3, #0
 8002150:	f7ff ffed 	bl	800212e <LoopCopyDataInit>
 8002154:	480b      	ldr	r0, [pc, #44]	@ (8002184 <LoopForever+0x12>)
 8002156:	490c      	ldr	r1, [pc, #48]	@ (8002188 <LoopForever+0x16>)
 8002158:	4a0c      	ldr	r2, [pc, #48]	@ (800218c <LoopForever+0x1a>)
 800215a:	2300      	movs	r3, #0
 800215c:	f7ff ffe7 	bl	800212e <LoopCopyDataInit>
 8002160:	480b      	ldr	r0, [pc, #44]	@ (8002190 <LoopForever+0x1e>)
 8002162:	490c      	ldr	r1, [pc, #48]	@ (8002194 <LoopForever+0x22>)
 8002164:	2300      	movs	r3, #0
 8002166:	f7ff ffe8 	bl	800213a <LoopFillZerobss>
 800216a:	f007 f993 	bl	8009494 <__libc_init_array>
 800216e:	f7ff fd87 	bl	8001c80 <main>

08002172 <LoopForever>:
 8002172:	e7fe      	b.n	8002172 <LoopForever>
 8002174:	20030000 	.word	0x20030000
 8002178:	20000008 	.word	0x20000008
 800217c:	20000074 	.word	0x20000074
 8002180:	08009788 	.word	0x08009788
 8002184:	200301e4 	.word	0x200301e4
 8002188:	20030a67 	.word	0x20030a67
 800218c:	08009851 	.word	0x08009851
 8002190:	200000d4 	.word	0x200000d4
 8002194:	20000784 	.word	0x20000784

08002198 <ADC1_IRQHandler>:
 8002198:	e7fe      	b.n	8002198 <ADC1_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <HAL_Init+0x3c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a0b      	ldr	r2, [pc, #44]	@ (80021d8 <HAL_Init+0x3c>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b2:	2003      	movs	r0, #3
 80021b4:	f000 f9b4 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b8:	200f      	movs	r0, #15
 80021ba:	f000 f80f 	bl	80021dc <HAL_InitTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	e001      	b.n	80021ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ca:	f7ff feee 	bl	8001faa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ce:	79fb      	ldrb	r3, [r7, #7]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	58004000 	.word	0x58004000

080021dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80021e8:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <HAL_InitTick+0x6c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d024      	beq.n	800223a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021f0:	f002 fb16 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_InitTick+0x6c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002200:	fbb3 f3f1 	udiv	r3, r3, r1
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f000 f9ca 	bl	80025a2 <HAL_SYSTICK_Config>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10f      	bne.n	8002234 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	d809      	bhi.n	800222e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221a:	2200      	movs	r2, #0
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
 8002222:	f000 f988 	bl	8002536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002226:	4a09      	ldr	r2, [pc, #36]	@ (800224c <HAL_InitTick+0x70>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	e007      	b.n	800223e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e004      	b.n	800223e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e001      	b.n	800223e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000004c 	.word	0x2000004c
 800224c:	20000048 	.word	0x20000048

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000004c 	.word	0x2000004c
 8002274:	200003bc 	.word	0x200003bc

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	200003bc 	.word	0x200003bc

08002290 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <HAL_GetTickPrio+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000048 	.word	0x20000048

080022a8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <HAL_GetTickFreq+0x14>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	2000004c 	.word	0x2000004c

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	@ (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db12      	blt.n	8002398 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	490a      	ldr	r1, [pc, #40]	@ (80023a4 <__NVIC_DisableIRQ+0x44>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	3320      	adds	r3, #32
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800238c:	f3bf 8f4f 	dsb	sy
}
 8002390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0c      	blt.n	80023d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_SetPendingIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	3340      	adds	r3, #64	@ 0x40
 80023d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0c      	blt.n	8002410 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	@ (800241c <__NVIC_ClearPendingIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	3360      	adds	r3, #96	@ 0x60
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	@ (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	@ (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	@ 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	@ (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff fec9 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff fee0 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff90 	bl	8002474 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5f 	bl	8002420 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fed3 	bl	8002324 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fee3 	bl	8002360 <__NVIC_DisableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff96 	bl	80024dc <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff feed 	bl	80023a8 <__NVIC_SetPendingIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fefd 	bl	80023e4 <__NVIC_ClearPendingIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	e14c      	b.n	800289e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 813e 	beq.w	8002898 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d005      	beq.n	8002634 <HAL_GPIO_Init+0x40>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d130      	bne.n	8002696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266a:	2201      	movs	r2, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0201 	and.w	r2, r3, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d017      	beq.n	80026d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d123      	bne.n	8002726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	6939      	ldr	r1, [r7, #16]
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8098 	beq.w	8002898 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002768:	4a54      	ldr	r2, [pc, #336]	@ (80028bc <HAL_GPIO_Init+0x2c8>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002792:	d019      	beq.n	80027c8 <HAL_GPIO_Init+0x1d4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_GPIO_Init+0x2cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_Init+0x1d0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_Init+0x1cc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a48      	ldr	r2, [pc, #288]	@ (80028c8 <HAL_GPIO_Init+0x2d4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_Init+0x1c8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <HAL_GPIO_Init+0x2d8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_Init+0x1c4>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e008      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027b8:	2307      	movs	r3, #7
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027bc:	2303      	movs	r3, #3
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027da:	4938      	ldr	r1, [pc, #224]	@ (80028bc <HAL_GPIO_Init+0x2c8>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e8:	4b39      	ldr	r3, [pc, #228]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800280c:	4a30      	ldr	r2, [pc, #192]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002812:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002836:	4a26      	ldr	r2, [pc, #152]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800286a:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 800286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002890:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f aeab 	bne.w	8002604 <HAL_GPIO_Init+0x10>
  }
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40010000 	.word	0x40010000
 80028c0:	48000400 	.word	0x48000400
 80028c4:	48000800 	.word	0x48000800
 80028c8:	48000c00 	.word	0x48000c00
 80028cc:	48001000 	.word	0x48001000
 80028d0:	58000800 	.word	0x58000800

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f806 	bl	8002934 <HAL_GPIO_EXTI_Callback>
  }
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	58000800 	.word	0x58000800

08002934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002958:	4b08      	ldr	r3, [pc, #32]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	43db      	mvns	r3, r3
 8002960:	4906      	ldr	r1, [pc, #24]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 8002962:	4013      	ands	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f807 	bl	8002980 <HAL_HSEM_FreeCallback>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58001500 	.word	0x58001500

08002980 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e08d      	b.n	8002ac2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff f8c6 	bl	8001b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	@ 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d107      	bne.n	8002a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	e006      	b.n	8002a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d108      	bne.n	8002a36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	e007      	b.n	8002a46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69d9      	ldr	r1, [r3, #28]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	813b      	strh	r3, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 80f9 	bne.w	8002ce6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_I2C_Mem_Write+0x34>
 8002afa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0ed      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_I2C_Mem_Write+0x4e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0e6      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b22:	f7ff fba9 	bl	8002278 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2319      	movs	r3, #25
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fac3 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d1      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2221      	movs	r2, #33	@ 0x21
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2240      	movs	r2, #64	@ 0x40
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6c:	88f8      	ldrh	r0, [r7, #6]
 8002b6e:	893a      	ldrh	r2, [r7, #8]
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9d3 	bl	8002f28 <I2C_RequestMemoryWrite>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0a9      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2bff      	cmp	r3, #255	@ 0xff
 8002b9c:	d90e      	bls.n	8002bbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	@ 0xff
 8002ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fc47 	bl	8003448 <I2C_TransferConfig>
 8002bba:	e00f      	b.n	8002bdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fc36 	bl	8003448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fac6 	bl	8003172 <I2C_WaitOnTXISFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e07b      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d034      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x1c8>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d130      	bne.n	8002c94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2180      	movs	r1, #128	@ 0x80
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fa3f 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e04d      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2bff      	cmp	r3, #255	@ 0xff
 8002c54:	d90e      	bls.n	8002c74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	@ 0xff
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	2300      	movs	r3, #0
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fbeb 	bl	8003448 <I2C_TransferConfig>
 8002c72:	e00f      	b.n	8002c94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fbda 	bl	8003448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d19e      	bne.n	8002bdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 faac 	bl	8003200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e01a      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf0 <HAL_I2C_Mem_Write+0x224>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	fe00e800 	.word	0xfe00e800

08002cf4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	f040 80fd 	bne.w	8002f16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x34>
 8002d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0f1      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x4e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0ea      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d4a:	f7ff fa95 	bl	8002278 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f9af 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d5      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2222      	movs	r2, #34	@ 0x22
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d94:	88f8      	ldrh	r0, [r7, #6]
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4603      	mov	r3, r0
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f913 	bl	8002fd0 <I2C_RequestMemoryRead>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0ad      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	@ 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	4b52      	ldr	r3, [pc, #328]	@ (8002f20 <HAL_I2C_Mem_Read+0x22c>)
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fb33 	bl	8003448 <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_I2C_Mem_Read+0x22c>)
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fb22 	bl	8003448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f956 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07c      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d034      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0x1d0>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d130      	bne.n	8002ec4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	@ 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f927 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e04d      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2bff      	cmp	r3, #255	@ 0xff
 8002e84:	d90e      	bls.n	8002ea4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	22ff      	movs	r2, #255	@ 0xff
 8002e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	8979      	ldrh	r1, [r7, #10]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fad3 	bl	8003448 <I2C_TransferConfig>
 8002ea2:	e00f      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	8979      	ldrh	r1, [r7, #10]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fac2 	bl	8003448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d19a      	bne.n	8002e04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f994 	bl	8003200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e01a      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_I2C_Mem_Read+0x230>)
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	80002400 	.word	0x80002400
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	4b20      	ldr	r3, [pc, #128]	@ (8002fcc <I2C_RequestMemoryWrite+0xa4>)
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fa79 	bl	8003448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	69b9      	ldr	r1, [r7, #24]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f909 	bl	8003172 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02c      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f7a:	e015      	b.n	8002fa8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f7c:	893b      	ldrh	r3, [r7, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8ef 	bl	8003172 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e012      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9e:	893b      	ldrh	r3, [r7, #8]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2180      	movs	r1, #128	@ 0x80
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f884 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	80002000 	.word	0x80002000

08002fd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	813b      	strh	r3, [r7, #8]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	8979      	ldrh	r1, [r7, #10]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <I2C_RequestMemoryRead+0xa4>)
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fa26 	bl	8003448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	69b9      	ldr	r1, [r7, #24]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f8b6 	bl	8003172 <I2C_WaitOnTXISFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e02c      	b.n	800306a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003020:	e015      	b.n	800304e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	b29b      	uxth	r3, r3
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f89c 	bl	8003172 <I2C_WaitOnTXISFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e012      	b.n	800306a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2200      	movs	r2, #0
 8003056:	2140      	movs	r1, #64	@ 0x40
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f831 	bl	80030c0 <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	80002000 	.word	0x80002000

08003078 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d103      	bne.n	8003096 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d007      	beq.n	80030b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	619a      	str	r2, [r3, #24]
  }
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d0:	e03b      	b.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	6839      	ldr	r1, [r7, #0]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f8d6 	bl	8003288 <I2C_IsErrorOccurred>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e041      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d02d      	beq.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7ff f8c3 	bl	8002278 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d122      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	429a      	cmp	r2, r3
 8003120:	d113      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4013      	ands	r3, r2
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	429a      	cmp	r2, r3
 8003166:	d0b4      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800317e:	e033      	b.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f87f 	bl	8003288 <I2C_IsErrorOccurred>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e031      	b.n	80031f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d025      	beq.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7ff f86c 	bl	8002278 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11a      	bne.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d013      	beq.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d1c4      	bne.n	8003180 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800320c:	e02f      	b.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f838 	bl	8003288 <I2C_IsErrorOccurred>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e02d      	b.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7ff f829 	bl	8002278 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11a      	bne.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b20      	cmp	r3, #32
 8003244:	d013      	beq.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b20      	cmp	r3, #32
 800327a:	d1c8      	bne.n	800320e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	@ 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d068      	beq.n	8003386 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2210      	movs	r2, #16
 80032ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032bc:	e049      	b.n	8003352 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d045      	beq.n	8003352 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7fe ffd7 	bl	8002278 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_IsErrorOccurred+0x54>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d13a      	bne.n	8003352 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032fe:	d121      	bne.n	8003344 <I2C_IsErrorOccurred+0xbc>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003306:	d01d      	beq.n	8003344 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b20      	cmp	r3, #32
 800330c:	d01a      	beq.n	8003344 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800331c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800331e:	f7fe ffab 	bl	8002278 <HAL_GetTick>
 8003322:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003324:	e00e      	b.n	8003344 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003326:	f7fe ffa7 	bl	8002278 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b19      	cmp	r3, #25
 8003332:	d907      	bls.n	8003344 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003342:	e006      	b.n	8003352 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b20      	cmp	r3, #32
 8003350:	d1e9      	bne.n	8003326 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b20      	cmp	r3, #32
 800335e:	d003      	beq.n	8003368 <I2C_IsErrorOccurred+0xe0>
 8003360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0aa      	beq.n	80032be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2220      	movs	r2, #32
 8003376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	f043 0304 	orr.w	r3, r3, #4
 800337e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00b      	beq.n	80033f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01c      	beq.n	8003436 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fe3b 	bl	8003078 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <I2C_IsErrorOccurred+0x1bc>)
 800340e:	400b      	ands	r3, r1
 8003410:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800343a:	4618      	mov	r0, r3
 800343c:	3728      	adds	r7, #40	@ 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	fe00e800 	.word	0xfe00e800

08003448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	4613      	mov	r3, r2
 8003458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003460:	7a7b      	ldrb	r3, [r7, #9]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003468:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	4313      	orrs	r3, r2
 8003472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003476:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	0d5b      	lsrs	r3, r3, #21
 8003482:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <I2C_TransferConfig+0x60>)
 8003488:	430b      	orrs	r3, r1
 800348a:	43db      	mvns	r3, r3
 800348c:	ea02 0103 	and.w	r1, r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	03ff63ff 	.word	0x03ff63ff

080034ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d138      	bne.n	8003534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e032      	b.n	8003536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	@ 0x24
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	d139      	bne.n	80035cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003562:	2302      	movs	r3, #2
 8003564:	e033      	b.n	80035ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2224      	movs	r2, #36	@ 0x24
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01e      	beq.n	800362c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80035ee:	4b13      	ldr	r3, [pc, #76]	@ (800363c <HAL_IPCC_Init+0x60>)
 80035f0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe fb1a 	bl	8001c38 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003604:	68b8      	ldr	r0, [r7, #8]
 8003606:	f000 f85b 	bl	80036c0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f82c 	bl	8003674 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800362a:	e001      	b.n	8003630 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	58000c00 	.word	0x58000c00

08003640 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800365a:	b480      	push	{r7}
 800365c:	b085      	sub	sp, #20
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	4613      	mov	r3, r2
 8003666:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e00f      	b.n	80036a2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	4a0b      	ldr	r2, [pc, #44]	@ (80036b8 <IPCC_SetDefaultCallbacks+0x44>)
 800368c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3306      	adds	r3, #6
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <IPCC_SetDefaultCallbacks+0x48>)
 800369a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d9ec      	bls.n	8003682 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	08003641 	.word	0x08003641
 80036bc:	0800365b 	.word	0x0800365b

080036c0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80036d4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	223f      	movs	r2, #63	@ 0x3f
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	58000400 	.word	0x58000400

08003708 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <HAL_PWREx_GetVoltageRange+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	58000400 	.word	0x58000400

08003724 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003736:	d101      	bne.n	800373c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_RCC_HSE_Enable>:
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_RCC_HSE_Disable>:
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_RCC_HSE_IsReady>:
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003796:	d101      	bne.n	800379c <LL_RCC_HSE_IsReady+0x18>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <LL_RCC_HSE_IsReady+0x1a>
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_RCC_HSI_Enable>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_HSI_Disable>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d8:	6013      	str	r3, [r2, #0]
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_RCC_HSI_IsReady>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f6:	d101      	bne.n	80037fc <LL_RCC_HSI_IsReady+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_RCC_HSI_IsReady+0x1a>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_RCC_HSI48_Enable>:
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800383e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_RCC_HSI48_Disable>:
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800385c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_RCC_HSI48_IsReady>:
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d101      	bne.n	800388e <LL_RCC_HSI48_IsReady+0x18>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <LL_RCC_HSI48_IsReady+0x1a>
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_LSE_Enable>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_LSE_Disable>:
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_LSE_EnableBypass>:
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038f6:	bf00      	nop
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_RCC_LSE_DisableBypass>:
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_RCC_LSE_IsReady>:
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d101      	bne.n	800393a <LL_RCC_LSE_IsReady+0x18>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <LL_RCC_LSE_IsReady+0x1a>
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_RCC_LSI1_Enable>:
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003952:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_RCC_LSI1_Disable>:
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <LL_RCC_LSI1_IsReady>:
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d101      	bne.n	80039a2 <LL_RCC_LSI1_IsReady+0x18>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <LL_RCC_LSI1_IsReady+0x1a>
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_LSI2_Enable>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039be:	f043 0304 	orr.w	r3, r3, #4
 80039c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_RCC_LSI2_Disable>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80039d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <LL_RCC_LSI2_IsReady>:
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d101      	bne.n	8003a0a <LL_RCC_LSI2_IsReady+0x18>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <LL_RCC_LSI2_IsReady+0x1a>
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_LSI2_SetTrimming>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_RCC_MSI_Enable>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_MSI_Disable>:
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_MSI_IsReady>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d101      	bne.n	8003a96 <LL_RCC_MSI_IsReady+0x16>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_RCC_MSI_IsReady+0x18>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_MSI_SetRange>:
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_MSI_GetRange>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ada:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2bb0      	cmp	r3, #176	@ 0xb0
 8003ae0:	d901      	bls.n	8003ae6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003ae2:	23b0      	movs	r3, #176	@ 0xb0
 8003ae4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003ae6:	687b      	ldr	r3, [r7, #4]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_RCC_SetSysClkSource>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 0203 	bic.w	r2, r3, #3
 8003b30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_GetSysClkSource>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_SetAHBPrescaler>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003b96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_RCC_SetAHB4Prescaler>:
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003bc2:	f023 020f 	bic.w	r2, r3, #15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_RCC_SetAPB1Prescaler>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_SetAPB2Prescaler>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_RCC_GetAHBPrescaler>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_GetAHB4Prescaler>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c50:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	6013      	str	r3, [r2, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cb2:	d101      	bne.n	8003cb8 <LL_RCC_PLL_IsReady+0x18>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <LL_RCC_PLL_IsReady+0x1a>
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0303 	and.w	r3, r3, #3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d101      	bne.n	8003d3e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d5e:	d101      	bne.n	8003d64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d78:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d101      	bne.n	8003d8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da8:	d101      	bne.n	8003dae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dcc:	d101      	bne.n	8003dd2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b08d      	sub	sp, #52	@ 0x34
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e363      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 808d 	beq.w	8003f1a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e00:	f7ff fea1 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8003e04:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e06:	f7ff ff82 	bl	8003d0e <LL_RCC_PLL_GetMainSource>
 8003e0a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_RCC_OscConfig+0x3e>
 8003e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d147      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d144      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e347      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003e2e:	f7ff fe4c 	bl	8003aca <LL_RCC_MSI_GetRange>
 8003e32:	4603      	mov	r3, r0
 8003e34:	429c      	cmp	r4, r3
 8003e36:	d914      	bls.n	8003e62 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd03 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e336      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fe26 	bl	8003aa2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fe4a 	bl	8003af4 <LL_RCC_MSI_SetCalibTrimming>
 8003e60:	e013      	b.n	8003e8a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fe1b 	bl	8003aa2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fe3f 	bl	8003af4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fce4 	bl	8004848 <RCC_SetFlashLatencyFromMSIRange>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e317      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003e8a:	f000 fcc9 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4aa4      	ldr	r2, [pc, #656]	@ (8004124 <HAL_RCC_OscConfig+0x344>)
 8003e92:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e94:	4ba4      	ldr	r3, [pc, #656]	@ (8004128 <HAL_RCC_OscConfig+0x348>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe f99f 	bl	80021dc <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d039      	beq.n	8003f18 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e308      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb0:	f7ff fdc8 	bl	8003a44 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f9e0 	bl	8002278 <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ebc:	f7fe f9dc 	bl	8002278 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e2f5      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ece:	f7ff fdd7 	bl	8003a80 <LL_RCC_MSI_IsReady>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f1      	beq.n	8003ebc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fde0 	bl	8003aa2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fe04 	bl	8003af4 <LL_RCC_MSI_SetCalibTrimming>
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eee:	f7ff fdb8 	bl	8003a62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ef2:	f7fe f9c1 	bl	8002278 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003efa:	f7fe f9bd 	bl	8002278 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e2d6      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003f0c:	f7ff fdb8 	bl	8003a80 <LL_RCC_MSI_IsReady>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f1      	bne.n	8003efa <HAL_RCC_OscConfig+0x11a>
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f18:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d047      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	f7ff fe0e 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8003f2a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	f7ff feef 	bl	8003d0e <LL_RCC_PLL_GetMainSource>
 8003f30:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d005      	beq.n	8003f44 <HAL_RCC_OscConfig+0x164>
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d134      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e2b4      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_OscConfig+0x180>
 8003f5a:	f7ff fbf5 	bl	8003748 <LL_RCC_HSE_Enable>
 8003f5e:	e001      	b.n	8003f64 <HAL_RCC_OscConfig+0x184>
 8003f60:	f7ff fc01 	bl	8003766 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d012      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe f984 	bl	8002278 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fe f980 	bl	8002278 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	@ 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e299      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003f86:	f7ff fbfd 	bl	8003784 <LL_RCC_HSE_IsReady>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f1      	beq.n	8003f74 <HAL_RCC_OscConfig+0x194>
 8003f90:	e011      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fe f971 	bl	8002278 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9a:	f7fe f96d 	bl	8002278 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b64      	cmp	r3, #100	@ 0x64
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e286      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003fac:	f7ff fbea 	bl	8003784 <LL_RCC_HSE_IsReady>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f1      	bne.n	8003f9a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04c      	beq.n	800405c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc2:	f7ff fdc0 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8003fc6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc8:	f7ff fea1 	bl	8003d0e <LL_RCC_PLL_GetMainSource>
 8003fcc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x200>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e266      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fc09 	bl	8003808 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ff6:	e031      	b.n	800405c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d019      	beq.n	8004034 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004000:	f7ff fbd2 	bl	80037a8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe f938 	bl	8002278 <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400c:	f7fe f934 	bl	8002278 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e24d      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800401e:	f7ff fbe1 	bl	80037e4 <LL_RCC_HSI_IsReady>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f1      	beq.n	800400c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fbeb 	bl	8003808 <LL_RCC_HSI_SetCalibTrimming>
 8004032:	e013      	b.n	800405c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004034:	f7ff fbc7 	bl	80037c6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe f91e 	bl	8002278 <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004040:	f7fe f91a 	bl	8002278 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e233      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004052:	f7ff fbc7 	bl	80037e4 <LL_RCC_HSI_IsReady>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f1      	bne.n	8004040 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a3 	beq.w	80041bc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d076      	beq.n	800416c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d046      	beq.n	8004118 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800408a:	f7ff fc7e 	bl	800398a <LL_RCC_LSI1_IsReady>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d113      	bne.n	80040bc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004094:	f7ff fc57 	bl	8003946 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004098:	f7fe f8ee 	bl	8002278 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040a0:	f7fe f8ea 	bl	8002278 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e203      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80040b2:	f7ff fc6a 	bl	800398a <LL_RCC_LSI1_IsReady>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f1      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80040bc:	f7ff fc77 	bl	80039ae <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c0:	f7fe f8da 	bl	8002278 <HAL_GetTick>
 80040c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040c8:	f7fe f8d6 	bl	8002278 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e1ef      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80040da:	f7ff fc8a 	bl	80039f2 <LL_RCC_LSI2_IsReady>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f1      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fc94 	bl	8003a16 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80040ee:	f7ff fc3b 	bl	8003968 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe f8c1 	bl	8002278 <HAL_GetTick>
 80040f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040fa:	f7fe f8bd 	bl	8002278 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1d6      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800410c:	f7ff fc3d 	bl	800398a <LL_RCC_LSI1_IsReady>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f1      	bne.n	80040fa <HAL_RCC_OscConfig+0x31a>
 8004116:	e051      	b.n	80041bc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004118:	f7ff fc15 	bl	8003946 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe f8ac 	bl	8002278 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004122:	e00c      	b.n	800413e <HAL_RCC_OscConfig+0x35e>
 8004124:	20000044 	.word	0x20000044
 8004128:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800412c:	f7fe f8a4 	bl	8002278 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1bd      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800413e:	f7ff fc24 	bl	800398a <LL_RCC_LSI1_IsReady>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f1      	beq.n	800412c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004148:	f7ff fc42 	bl	80039d0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800414e:	f7fe f893 	bl	8002278 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1ac      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004160:	f7ff fc47 	bl	80039f2 <LL_RCC_LSI2_IsReady>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f1      	bne.n	800414e <HAL_RCC_OscConfig+0x36e>
 800416a:	e027      	b.n	80041bc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800416c:	f7ff fc30 	bl	80039d0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe f882 	bl	8002278 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004178:	f7fe f87e 	bl	8002278 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b03      	cmp	r3, #3
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e197      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800418a:	f7ff fc32 	bl	80039f2 <LL_RCC_LSI2_IsReady>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f1      	bne.n	8004178 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004194:	f7ff fbe8 	bl	8003968 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fe f86e 	bl	8002278 <HAL_GetTick>
 800419c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80041a0:	f7fe f86a 	bl	8002278 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e183      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80041b2:	f7ff fbea 	bl	800398a <LL_RCC_LSI1_IsReady>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f1      	bne.n	80041a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05b      	beq.n	8004280 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004468 <HAL_RCC_OscConfig+0x688>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d114      	bne.n	80041fe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80041d4:	f7ff fa88 	bl	80036e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d8:	f7fe f84e 	bl	8002278 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7fe f84a 	bl	8002278 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e163      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b9d      	ldr	r3, [pc, #628]	@ (8004468 <HAL_RCC_OscConfig+0x688>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <HAL_RCC_OscConfig+0x42c>
 8004206:	f7ff fb48 	bl	800389a <LL_RCC_LSE_Enable>
 800420a:	e00c      	b.n	8004226 <HAL_RCC_OscConfig+0x446>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d104      	bne.n	800421e <HAL_RCC_OscConfig+0x43e>
 8004214:	f7ff fb63 	bl	80038de <LL_RCC_LSE_EnableBypass>
 8004218:	f7ff fb3f 	bl	800389a <LL_RCC_LSE_Enable>
 800421c:	e003      	b.n	8004226 <HAL_RCC_OscConfig+0x446>
 800421e:	f7ff fb4d 	bl	80038bc <LL_RCC_LSE_Disable>
 8004222:	f7ff fb6d 	bl	8003900 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fe f823 	bl	8002278 <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe f81f 	bl	8002278 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e136      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800424c:	f7ff fb69 	bl	8003922 <LL_RCC_LSE_IsReady>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0ef      	beq.n	8004236 <HAL_RCC_OscConfig+0x456>
 8004256:	e013      	b.n	8004280 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fe f80e 	bl	8002278 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fe f80a 	bl	8002278 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e121      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004276:	f7ff fb54 	bl	8003922 <LL_RCC_LSE_IsReady>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ef      	bne.n	8004260 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d014      	beq.n	80042be <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004294:	f7ff facd 	bl	8003832 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fd ffee 	bl	8002278 <HAL_GetTick>
 800429c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a0:	f7fd ffea 	bl	8002278 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e103      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80042b2:	f7ff fae0 	bl	8003876 <LL_RCC_HSI48_IsReady>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f1      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4c0>
 80042bc:	e013      	b.n	80042e6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042be:	f7ff fac9 	bl	8003854 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd ffd9 	bl	8002278 <HAL_GetTick>
 80042c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ca:	f7fd ffd5 	bl	8002278 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e0ee      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80042dc:	f7ff facb 	bl	8003876 <LL_RCC_HSI48_IsReady>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f1      	bne.n	80042ca <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80e4 	beq.w	80044b8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f0:	f7ff fc29 	bl	8003b46 <LL_RCC_GetSysClkSource>
 80042f4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004302:	2b02      	cmp	r3, #2
 8004304:	f040 80b4 	bne.w	8004470 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	429a      	cmp	r2, r3
 8004314:	d123      	bne.n	800435e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d11c      	bne.n	800435e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004330:	429a      	cmp	r2, r3
 8004332:	d114      	bne.n	800435e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d10d      	bne.n	800435e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d05d      	beq.n	800441a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b0c      	cmp	r3, #12
 8004362:	d058      	beq.n	8004416 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0a1      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004376:	f7ff fc84 	bl	8003c82 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437a:	f7fd ff7d 	bl	8002278 <HAL_GetTick>
 800437e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004382:	f7fd ff79 	bl	8002278 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e092      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ef      	bne.n	8004382 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4b30      	ldr	r3, [pc, #192]	@ (800446c <HAL_RCC_OscConfig+0x68c>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043ba:	0212      	lsls	r2, r2, #8
 80043bc:	4311      	orrs	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043c2:	4311      	orrs	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043c8:	4311      	orrs	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80043ce:	430a      	orrs	r2, r1
 80043d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043d8:	f7ff fc44 	bl	8003c64 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ec:	f7fd ff44 	bl	8002278 <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd ff40 	bl	8002278 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e059      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ef      	beq.n	80043f4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004414:	e050      	b.n	80044b8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e04f      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d147      	bne.n	80044b8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004428:	f7ff fc1c 	bl	8003c64 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800443c:	f7fd ff1c 	bl	8002278 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd ff18 	bl	8002278 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e031      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ef      	beq.n	8004444 <HAL_RCC_OscConfig+0x664>
 8004464:	e028      	b.n	80044b8 <HAL_RCC_OscConfig+0x6d8>
 8004466:	bf00      	nop
 8004468:	58000400 	.word	0x58000400
 800446c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d01e      	beq.n	80044b4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	f7ff fc04 	bl	8003c82 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd fefd 	bl	8002278 <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004482:	f7fd fef9 	bl	8002278 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e012      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ef      	bne.n	8004482 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_RCC_OscConfig+0x6e4>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	60cb      	str	r3, [r1, #12]
 80044b2:	e001      	b.n	80044b8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3734      	adds	r7, #52	@ 0x34
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	eefefffc 	.word	0xeefefffc

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e12d      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	4b98      	ldr	r3, [pc, #608]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d91b      	bls.n	8004522 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b95      	ldr	r3, [pc, #596]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 0207 	bic.w	r2, r3, #7
 80044f2:	4993      	ldr	r1, [pc, #588]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fa:	f7fd febd 	bl	8002278 <HAL_GetTick>
 80044fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004500:	e008      	b.n	8004514 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004502:	f7fd feb9 	bl	8002278 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e111      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004514:	4b8a      	ldr	r3, [pc, #552]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d1ef      	bne.n	8004502 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff fb13 	bl	8003b5e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004538:	f7fd fe9e 	bl	8002278 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004540:	f7fd fe9a 	bl	8002278 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0f2      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004552:	f7ff fbe8 	bl	8003d26 <LL_RCC_IsActiveFlag_HPRE>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f1      	beq.n	8004540 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d016      	beq.n	8004596 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fb0a 	bl	8003b86 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004572:	f7fd fe81 	bl	8002278 <HAL_GetTick>
 8004576:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800457a:	f7fd fe7d 	bl	8002278 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e0d5      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800458c:	f7ff fbdd 	bl	8003d4a <LL_RCC_IsActiveFlag_C2HPRE>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f1      	beq.n	800457a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fb03 	bl	8003bb2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045ac:	f7fd fe64 	bl	8002278 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045b4:	f7fd fe60 	bl	8002278 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0b8      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80045c6:	f7ff fbd3 	bl	8003d70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f1      	beq.n	80045b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d016      	beq.n	800460a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fafd 	bl	8003be0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80045e6:	f7fd fe47 	bl	8002278 <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80045ee:	f7fd fe43 	bl	8002278 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e09b      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004600:	f7ff fbc9 	bl	8003d96 <LL_RCC_IsActiveFlag_PPRE1>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f1      	beq.n	80045ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d017      	beq.n	8004646 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff faf3 	bl	8003c08 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004622:	f7fd fe29 	bl	8002278 <HAL_GetTick>
 8004626:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800462a:	f7fd fe25 	bl	8002278 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e07d      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800463c:	f7ff fbbd 	bl	8003dba <LL_RCC_IsActiveFlag_PPRE2>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f1      	beq.n	800462a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d043      	beq.n	80046da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d106      	bne.n	8004668 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800465a:	f7ff f893 	bl	8003784 <LL_RCC_HSE_IsReady>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11e      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e067      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d106      	bne.n	800467e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004670:	f7ff fb16 	bl	8003ca0 <LL_RCC_PLL_IsReady>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e05c      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004686:	f7ff f9fb 	bl	8003a80 <LL_RCC_MSI_IsReady>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e051      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004694:	f7ff f8a6 	bl	80037e4 <LL_RCC_HSI_IsReady>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e04a      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fa39 	bl	8003b1e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fd fde4 	bl	8002278 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fd fde0 	bl	8002278 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e036      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	f7ff fa3c 	bl	8003b46 <LL_RCC_GetSysClkSource>
 80046ce:	4602      	mov	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d1ec      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046da:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d21b      	bcs.n	8004720 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e8:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 0207 	bic.w	r2, r3, #7
 80046f0:	4913      	ldr	r1, [pc, #76]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd fdbe 	bl	8002278 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004700:	f7fd fdba 	bl	8002278 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e012      	b.n	8004738 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <HAL_RCC_ClockConfig+0x278>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d1ef      	bne.n	8004700 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004720:	f000 f87e 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004724:	4603      	mov	r3, r0
 8004726:	4a07      	ldr	r2, [pc, #28]	@ (8004744 <HAL_RCC_ClockConfig+0x27c>)
 8004728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800472a:	f7fd fdb1 	bl	8002290 <HAL_GetTickPrio>
 800472e:	4603      	mov	r3, r0
 8004730:	4618      	mov	r0, r3
 8004732:	f7fd fd53 	bl	80021dc <HAL_InitTick>
 8004736:	4603      	mov	r3, r0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	58004000 	.word	0x58004000
 8004744:	20000044 	.word	0x20000044

08004748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474e:	f7ff f9fa 	bl	8003b46 <LL_RCC_GetSysClkSource>
 8004752:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800475a:	f7ff f9b6 	bl	8003aca <LL_RCC_MSI_GetRange>
 800475e:	4603      	mov	r3, r0
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a2b      	ldr	r2, [pc, #172]	@ (8004814 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e04b      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d102      	bne.n	800477c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004776:	4b28      	ldr	r3, [pc, #160]	@ (8004818 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e045      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d10a      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004782:	f7fe ffcf 	bl	8003724 <LL_RCC_HSE_IsEnabledDiv2>
 8004786:	4603      	mov	r3, r0
 8004788:	2b01      	cmp	r3, #1
 800478a:	d102      	bne.n	8004792 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800478c:	4b22      	ldr	r3, [pc, #136]	@ (8004818 <HAL_RCC_GetSysClockFreq+0xd0>)
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e03a      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004792:	4b22      	ldr	r3, [pc, #136]	@ (800481c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e037      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004798:	f7ff fab9 	bl	8003d0e <LL_RCC_PLL_GetMainSource>
 800479c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d003      	beq.n	80047ac <HAL_RCC_GetSysClockFreq+0x64>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80047aa:	e00d      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80047ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047ae:	60bb      	str	r3, [r7, #8]
        break;
 80047b0:	e015      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80047b2:	f7fe ffb7 	bl	8003724 <LL_RCC_HSE_IsEnabledDiv2>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d102      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80047bc:	4b16      	ldr	r3, [pc, #88]	@ (8004818 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80047c0:	e00d      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <HAL_RCC_GetSysClockFreq+0xd4>)
 80047c4:	60bb      	str	r3, [r7, #8]
        break;
 80047c6:	e00a      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80047c8:	f7ff f97f 	bl	8003aca <LL_RCC_MSI_GetRange>
 80047cc:	4603      	mov	r3, r0
 80047ce:	091b      	lsrs	r3, r3, #4
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004814 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	60bb      	str	r3, [r7, #8]
        break;
 80047dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80047de:	f7ff fa71 	bl	8003cc4 <LL_RCC_PLL_GetN>
 80047e2:	4602      	mov	r2, r0
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	fb03 f402 	mul.w	r4, r3, r2
 80047ea:	f7ff fa84 	bl	8003cf6 <LL_RCC_PLL_GetDivider>
 80047ee:	4603      	mov	r3, r0
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	3301      	adds	r3, #1
 80047f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80047f8:	f7ff fa71 	bl	8003cde <LL_RCC_PLL_GetR>
 80047fc:	4603      	mov	r3, r0
 80047fe:	0f5b      	lsrs	r3, r3, #29
 8004800:	3301      	adds	r3, #1
 8004802:	fbb4 f3f3 	udiv	r3, r4, r3
 8004806:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004808:	68fb      	ldr	r3, [r7, #12]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bd90      	pop	{r4, r7, pc}
 8004812:	bf00      	nop
 8004814:	08009710 	.word	0x08009710
 8004818:	00f42400 	.word	0x00f42400
 800481c:	01e84800 	.word	0x01e84800

08004820 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b598      	push	{r3, r4, r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004824:	f7ff ff90 	bl	8004748 <HAL_RCC_GetSysClockFreq>
 8004828:	4604      	mov	r4, r0
 800482a:	f7ff fa01 	bl	8003c30 <LL_RCC_GetAHBPrescaler>
 800482e:	4603      	mov	r3, r0
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	4a03      	ldr	r2, [pc, #12]	@ (8004844 <HAL_RCC_GetHCLKFreq+0x24>)
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd98      	pop	{r3, r4, r7, pc}
 8004844:	080096d0 	.word	0x080096d0

08004848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2bb0      	cmp	r3, #176	@ 0xb0
 8004854:	d903      	bls.n	800485e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004856:	4b15      	ldr	r3, [pc, #84]	@ (80048ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e007      	b.n	800486e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800486e:	f7ff f9eb 	bl	8003c48 <LL_RCC_GetAHB4Prescaler>
 8004872:	4603      	mov	r3, r0
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a0a      	ldr	r2, [pc, #40]	@ (80048b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0c9c      	lsrs	r4, r3, #18
 8004892:	f7fe ff39 	bl	8003708 <HAL_PWREx_GetVoltageRange>
 8004896:	4603      	mov	r3, r0
 8004898:	4619      	mov	r1, r3
 800489a:	4620      	mov	r0, r4
 800489c:	f000 f80c 	bl	80048b8 <RCC_SetFlashLatency>
 80048a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08009710 	.word	0x08009710
 80048b0:	080096d0 	.word	0x080096d0
 80048b4:	431bde83 	.word	0x431bde83

080048b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b093      	sub	sp, #76	@ 0x4c
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80048c2:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <RCC_SetFlashLatency+0xe8>)
 80048c4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80048c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80048ce:	4a35      	ldr	r2, [pc, #212]	@ (80049a4 <RCC_SetFlashLatency+0xec>)
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80048d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80048da:	4b33      	ldr	r3, [pc, #204]	@ (80049a8 <RCC_SetFlashLatency+0xf0>)
 80048dc:	f107 040c 	add.w	r4, r7, #12
 80048e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80048e6:	2300      	movs	r3, #0
 80048e8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f0:	d11a      	bne.n	8004928 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f6:	e013      	b.n	8004920 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80048f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	3348      	adds	r3, #72	@ 0x48
 80048fe:	443b      	add	r3, r7
 8004900:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d807      	bhi.n	800491a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800490a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	3348      	adds	r3, #72	@ 0x48
 8004910:	443b      	add	r3, r7
 8004912:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004918:	e020      	b.n	800495c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800491a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491c:	3301      	adds	r3, #1
 800491e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004922:	2b03      	cmp	r3, #3
 8004924:	d9e8      	bls.n	80048f8 <RCC_SetFlashLatency+0x40>
 8004926:	e019      	b.n	800495c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004928:	2300      	movs	r3, #0
 800492a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800492c:	e013      	b.n	8004956 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800492e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3348      	adds	r3, #72	@ 0x48
 8004934:	443b      	add	r3, r7
 8004936:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d807      	bhi.n	8004950 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	3348      	adds	r3, #72	@ 0x48
 8004946:	443b      	add	r3, r7
 8004948:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800494e:	e005      	b.n	800495c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004952:	3301      	adds	r3, #1
 8004954:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004958:	2b02      	cmp	r3, #2
 800495a:	d9e8      	bls.n	800492e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800495c:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <RCC_SetFlashLatency+0xf4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 0207 	bic.w	r2, r3, #7
 8004964:	4911      	ldr	r1, [pc, #68]	@ (80049ac <RCC_SetFlashLatency+0xf4>)
 8004966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800496c:	f7fd fc84 	bl	8002278 <HAL_GetTick>
 8004970:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004972:	e008      	b.n	8004986 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004974:	f7fd fc80 	bl	8002278 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e007      	b.n	8004996 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004986:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <RCC_SetFlashLatency+0xf4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ef      	bne.n	8004974 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	374c      	adds	r7, #76	@ 0x4c
 800499a:	46bd      	mov	sp, r7
 800499c:	bd90      	pop	{r4, r7, pc}
 800499e:	bf00      	nop
 80049a0:	0800952c 	.word	0x0800952c
 80049a4:	0800953c 	.word	0x0800953c
 80049a8:	08009548 	.word	0x08009548
 80049ac:	58004000 	.word	0x58004000

080049b0 <LL_RCC_LSE_IsEnabled>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <LL_RCC_LSE_IsEnabled+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_RCC_LSE_IsEnabled+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_LSE_IsReady>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d101      	bne.n	80049ec <LL_RCC_LSE_IsReady+0x18>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <LL_RCC_LSE_IsReady+0x1a>
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_SetRFWKPClockSource>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_RCC_SetSMPSClockSource>:
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_SetSMPSPrescaler>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_SetUSARTClockSource>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f023 0203 	bic.w	r2, r3, #3
 8004a88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_SetLPUARTClockSource>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <LL_RCC_SetI2CClockSource>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	091b      	lsrs	r3, r3, #4
 8004ae0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004af0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <LL_RCC_SetLPTIMClockSource>:
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b12:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_SetSAIClockSource>:
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_SetRNGClockSource>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_SetCLK48ClockSource>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_RCC_SetUSBClockSource>:
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ffe3 	bl	8004b92 <LL_RCC_SetCLK48ClockSource>
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <LL_RCC_SetADCClockSource>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004be8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_RCC_SetRTCClockSource>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_RCC_GetRTCClockSource>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_ForceBackupDomainReset>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_RCC_PLLSAI1_Enable>:
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c9c:	6013      	str	r3, [r2, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <LL_RCC_PLLSAI1_Disable>:
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <LL_RCC_PLLSAI1_IsReady>:
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd8:	d101      	bne.n	8004cde <LL_RCC_PLLSAI1_IsReady+0x18>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b088      	sub	sp, #32
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d034      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d0e:	d021      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004d10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d14:	d81b      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d1a:	d01d      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d20:	d815      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d2a:	d110      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d3c:	e00d      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f947 	bl	8004fd6 <RCCEx_PLLSAI1_ConfigNP>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004d4c:	e005      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
        break;
 8004d52:	e002      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fee8 	bl	8004b3a <LL_RCC_SetSAIClockSource>
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7ffb      	ldrb	r3, [r7, #31]
 8004d6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d046      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d7c:	f7ff ff56 	bl	8004c2c <LL_RCC_GetRTCClockSource>
 8004d80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d03c      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d8c:	f7fe fcac 	bl	80036e8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff30 	bl	8004c00 <LL_RCC_SetRTCClockSource>
 8004da0:	e02e      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004daa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004dac:	f7ff ff4b 	bl	8004c46 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004db0:	f7ff ff5a 	bl	8004c68 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004dcc:	f7ff fdf0 	bl	80049b0 <LL_RCC_LSE_IsEnabled>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d114      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dd6:	f7fd fa4f 	bl	8002278 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ddc:	e00b      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fd fa4b 	bl	8002278 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d902      	bls.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	77fb      	strb	r3, [r7, #31]
              break;
 8004df4:	e004      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004df6:	f7ff fded 	bl	80049d4 <LL_RCC_LSE_IsReady>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d1ee      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	77bb      	strb	r3, [r7, #30]
 8004e04:	e001      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fe2a 	bl	8004a74 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fe35 	bl	8004aa0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fe5d 	bl	8004b06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fe52 	bl	8004b06 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d004      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fe2a 	bl	8004acc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fe1f 	bl	8004acc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d022      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fe8d 	bl	8004bbe <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eac:	d107      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ebc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f8dd 	bl	800508c <RCCEx_PLLSAI1_ConfigNQ>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef4:	d008      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004efe:	d003      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fe2a 	bl	8004b66 <LL_RCC_SetRNGClockSource>
 8004f12:	e00a      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f7ff fe21 	bl	8004b66 <LL_RCC_SetRNGClockSource>
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fe34 	bl	8004b92 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004f32:	d107      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d022      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fe3d 	bl	8004bd4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f62:	d107      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f8dd 	bl	8005142 <RCCEx_PLLSAI1_ConfigNR>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
 8004f94:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fd26 	bl	80049f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fd45 	bl	8004a4c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fd2c 	bl	8004a24 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004fcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004fe2:	f7ff fe61 	bl	8004ca8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fe6:	f7fd f947 	bl	8002278 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fec:	e009      	b.n	8005002 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fee:	f7fd f943 	bl	8002278 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8005000:	e004      	b.n	800500c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005002:	f7ff fe60 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d137      	bne.n	8005082 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005026:	4313      	orrs	r3, r2
 8005028:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005040:	f7ff fe23 	bl	8004c8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fd f918 	bl	8002278 <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800504a:	e009      	b.n	8005060 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504c:	f7fd f914 	bl	8002278 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d902      	bls.n	8005060 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
        break;
 800505e:	e004      	b.n	800506a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005060:	f7ff fe31 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d1f0      	bne.n	800504c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d108      	bne.n	8005082 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800507e:	4313      	orrs	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005098:	f7ff fe06 	bl	8004ca8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800509c:	f7fd f8ec 	bl	8002278 <HAL_GetTick>
 80050a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050a2:	e009      	b.n	80050b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050a4:	f7fd f8e8 	bl	8002278 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d902      	bls.n	80050b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	73fb      	strb	r3, [r7, #15]
      break;
 80050b6:	e004      	b.n	80050c2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050b8:	f7ff fe05 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d137      	bne.n	8005138 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80050f6:	f7ff fdc8 	bl	8004c8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fa:	f7fd f8bd 	bl	8002278 <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005100:	e009      	b.n	8005116 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005102:	f7fd f8b9 	bl	8002278 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	73fb      	strb	r3, [r7, #15]
        break;
 8005114:	e004      	b.n	8005120 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005116:	f7ff fdd6 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 800511a:	4603      	mov	r3, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	d1f0      	bne.n	8005102 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005134:	4313      	orrs	r3, r2
 8005136:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800514e:	f7ff fdab 	bl	8004ca8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005152:	f7fd f891 	bl	8002278 <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005158:	e009      	b.n	800516e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800515a:	f7fd f88d 	bl	8002278 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d902      	bls.n	800516e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e004      	b.n	8005178 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800516e:	f7ff fdaa 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d137      	bne.n	80051ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005192:	4313      	orrs	r3, r2
 8005194:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80051ac:	f7ff fd6d 	bl	8004c8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b0:	f7fd f862 	bl	8002278 <HAL_GetTick>
 80051b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051b6:	e009      	b.n	80051cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b8:	f7fd f85e 	bl	8002278 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d902      	bls.n	80051cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	73fb      	strb	r3, [r7, #15]
        break;
 80051ca:	e004      	b.n	80051d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80051cc:	f7ff fd7b 	bl	8004cc6 <LL_RCC_PLLSAI1_IsReady>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d1f0      	bne.n	80051b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ea:	4313      	orrs	r3, r2
 80051ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e09f      	b.n	800534a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc fe74 	bl	8001f0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800522c:	4b49      	ldr	r3, [pc, #292]	@ (8005354 <HAL_RTC_Init+0x15c>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	d07e      	beq.n	8005336 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	22ca      	movs	r2, #202	@ 0xca
 800523e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2253      	movs	r2, #83	@ 0x53
 8005246:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f8ab 	bl	80053a4 <RTC_EnterInitMode>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	22ff      	movs	r2, #255	@ 0xff
 800525a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2204      	movs	r2, #4
 8005260:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e067      	b.n	800533a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800527c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68d2      	ldr	r2, [r2, #12]
 80052a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6919      	ldr	r1, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	041a      	lsls	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052c8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0203 	bic.w	r2, r2, #3
 80052d8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f829 	bl	8005358 <HAL_RTC_WaitForSynchro>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	22ff      	movs	r2, #255	@ 0xff
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2204      	movs	r2, #4
 8005318:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e010      	b.n	800534a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	22ff      	movs	r2, #255	@ 0xff
 800532e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	73fb      	strb	r3, [r7, #15]
 8005334:	e001      	b.n	800533a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40002800 	.word	0x40002800

08005358 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800536e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005370:	f7fc ff82 	bl	8002278 <HAL_GetTick>
 8005374:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005376:	e009      	b.n	800538c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005378:	f7fc ff7e 	bl	8002278 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005386:	d901      	bls.n	800538c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e007      	b.n	800539c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ee      	beq.n	8005378 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d119      	bne.n	80053ee <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053c4:	f7fc ff58 	bl	8002278 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053ca:	e009      	b.n	80053e0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053cc:	f7fc ff54 	bl	8002278 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053da:	d901      	bls.n	80053e0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e007      	b.n	80053f0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ee      	beq.n	80053cc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800540e:	2302      	movs	r3, #2
 8005410:	e0a8      	b.n	8005564 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	22ca      	movs	r2, #202	@ 0xca
 8005428:	625a      	str	r2, [r3, #36]	@ 0x24
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2253      	movs	r2, #83	@ 0x53
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005440:	f7fc ff1a 	bl	8002278 <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005446:	e015      	b.n	8005474 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005448:	f7fc ff16 	bl	8002278 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005456:	d90d      	bls.n	8005474 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	22ff      	movs	r2, #255	@ 0xff
 800545e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2203      	movs	r2, #3
 8005464:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e077      	b.n	8005564 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e2      	bne.n	8005448 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005490:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80054a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80054a4:	f7fc fee8 	bl	8002278 <HAL_GetTick>
 80054a8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80054aa:	e015      	b.n	80054d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ac:	f7fc fee4 	bl	8002278 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054ba:	d90d      	bls.n	80054d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	22ff      	movs	r2, #255	@ 0xff
 80054c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2203      	movs	r2, #3
 80054c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e045      	b.n	8005564 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0e2      	beq.n	80054ac <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0207 	bic.w	r2, r2, #7
 80054fc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800550e:	4b17      	ldr	r3, [pc, #92]	@ (800556c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	4a15      	ldr	r2, [pc, #84]	@ (800556c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005516:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800551a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800551e:	4b13      	ldr	r3, [pc, #76]	@ (800556c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a12      	ldr	r2, [pc, #72]	@ (800556c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005538:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005548:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	22ff      	movs	r2, #255	@ 0xff
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	58000800 	.word	0x58000800

08005570 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	2218      	movs	r2, #24
 8005580:	2100      	movs	r1, #0
 8005582:	4618      	mov	r0, r3
 8005584:	f001 fbe2 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005588:	233f      	movs	r3, #63	@ 0x3f
 800558a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800558c:	2381      	movs	r3, #129	@ 0x81
 800558e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005590:	1dfb      	adds	r3, r7, #7
 8005592:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005594:	2301      	movs	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005598:	f107 0308 	add.w	r3, r7, #8
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 fa92 	bl	8006ac8 <hci_send_req>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da01      	bge.n	80055ae <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80055aa:	23ff      	movs	r3, #255	@ 0xff
 80055ac:	e000      	b.n	80055b0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80055ae:	79fb      	ldrb	r3, [r7, #7]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80055b8:	b5b0      	push	{r4, r5, r7, lr}
 80055ba:	b0ce      	sub	sp, #312	@ 0x138
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4605      	mov	r5, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	4610      	mov	r0, r2
 80055c4:	4619      	mov	r1, r3
 80055c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055ca:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80055ce:	462a      	mov	r2, r5
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80055da:	4622      	mov	r2, r4
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055e2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80055e6:	4602      	mov	r2, r0
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80055ee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80055f2:	460a      	mov	r2, r1
 80055f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80055f6:	f107 0310 	add.w	r3, r7, #16
 80055fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80055fe:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005602:	3308      	adds	r3, #8
 8005604:	f107 0210 	add.w	r2, r7, #16
 8005608:	4413      	add	r3, r2
 800560a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800560e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005612:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005616:	4413      	add	r3, r2
 8005618:	3309      	adds	r3, #9
 800561a:	f107 0210 	add.w	r2, r7, #16
 800561e:	4413      	add	r3, r2
 8005620:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005624:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005628:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005636:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800563a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800563e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005646:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800564a:	3301      	adds	r3, #1
 800564c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005650:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005654:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005658:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800565c:	8812      	ldrh	r2, [r2, #0]
 800565e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005662:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005666:	3302      	adds	r3, #2
 8005668:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800566c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005670:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005674:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005678:	8812      	ldrh	r2, [r2, #0]
 800567a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800567e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005682:	3302      	adds	r3, #2
 8005684:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005688:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800568c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005690:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005694:	7812      	ldrb	r2, [r2, #0]
 8005696:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005698:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80056a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80056a6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80056aa:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80056ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056b0:	3301      	adds	r3, #1
 80056b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80056b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80056ba:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80056be:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80056c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056c4:	3301      	adds	r3, #1
 80056c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80056ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80056ce:	3308      	adds	r3, #8
 80056d0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80056d4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fb27 	bl	8006d2c <Osal_MemCpy>
    index_input += Local_Name_Length;
 80056de:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80056e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80056e6:	4413      	add	r3, r2
 80056e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80056ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80056f0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80056f4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80056f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056fa:	3301      	adds	r3, #1
 80056fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005700:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005704:	3301      	adds	r3, #1
 8005706:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800570a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800570e:	4618      	mov	r0, r3
 8005710:	f001 fb0c 	bl	8006d2c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005714:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005718:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800571c:	4413      	add	r3, r2
 800571e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005722:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005726:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800572a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800572c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005730:	3302      	adds	r3, #2
 8005732:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800573a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800573e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005740:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005744:	3302      	adds	r3, #2
 8005746:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800574a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800574e:	2218      	movs	r2, #24
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fafa 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005758:	233f      	movs	r3, #63	@ 0x3f
 800575a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800575e:	2383      	movs	r3, #131	@ 0x83
 8005760:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005764:	f107 0310 	add.w	r3, r7, #16
 8005768:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800576c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005770:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005774:	f107 030f 	add.w	r3, r7, #15
 8005778:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800577c:	2301      	movs	r3, #1
 800577e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f99d 	bl	8006ac8 <hci_send_req>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	da01      	bge.n	8005798 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005794:	23ff      	movs	r3, #255	@ 0xff
 8005796:	e004      	b.n	80057a2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005798:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800579c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80057a0:	781b      	ldrb	r3, [r3, #0]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bdb0      	pop	{r4, r5, r7, pc}

080057ac <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b0cc      	sub	sp, #304	@ 0x130
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4602      	mov	r2, r0
 80057b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80057bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80057be:	f107 0310 	add.w	r3, r7, #16
 80057c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80057c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057e0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ec:	3301      	adds	r3, #1
 80057ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057f6:	2218      	movs	r2, #24
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f001 faa6 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005800:	233f      	movs	r3, #63	@ 0x3f
 8005802:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005806:	2385      	movs	r3, #133	@ 0x85
 8005808:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800580c:	f107 0310 	add.w	r3, r7, #16
 8005810:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005814:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005818:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800581c:	f107 030f 	add.w	r3, r7, #15
 8005820:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005824:	2301      	movs	r3, #1
 8005826:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800582a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 f949 	bl	8006ac8 <hci_send_req>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	da01      	bge.n	8005840 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800583c:	23ff      	movs	r3, #255	@ 0xff
 800583e:	e004      	b.n	800584a <aci_gap_set_io_capability+0x9e>
  return status;
 8005840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005844:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005848:	781b      	ldrb	r3, [r3, #0]
}
 800584a:	4618      	mov	r0, r3
 800584c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b0cc      	sub	sp, #304	@ 0x130
 8005858:	af00      	add	r7, sp, #0
 800585a:	4605      	mov	r5, r0
 800585c:	460c      	mov	r4, r1
 800585e:	4610      	mov	r0, r2
 8005860:	4619      	mov	r1, r3
 8005862:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005866:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800586a:	462a      	mov	r2, r5
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005872:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005876:	4622      	mov	r2, r4
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800587e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005882:	4602      	mov	r2, r0
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800588a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800588e:	460a      	mov	r2, r1
 8005890:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800589a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800589e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80058ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80058b8:	7812      	ldrb	r2, [r2, #0]
 80058ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80058bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058c0:	3301      	adds	r3, #1
 80058c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058ce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80058d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058da:	3301      	adds	r3, #1
 80058dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058e8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80058f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058f4:	3301      	adds	r3, #1
 80058f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005902:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800590a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800590e:	3301      	adds	r3, #1
 8005910:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005918:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800591c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800591e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005922:	3301      	adds	r3, #1
 8005924:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005928:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800592c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005930:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005932:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005936:	3301      	adds	r3, #1
 8005938:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800593c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005940:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005944:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005946:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800594a:	3301      	adds	r3, #1
 800594c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005950:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005954:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005958:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800595c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005960:	3304      	adds	r3, #4
 8005962:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005966:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800596a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800596e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005970:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005974:	3301      	adds	r3, #1
 8005976:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800597a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800597e:	2218      	movs	r2, #24
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f001 f9e2 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005988:	233f      	movs	r3, #63	@ 0x3f
 800598a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800598e:	2386      	movs	r3, #134	@ 0x86
 8005990:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800599c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80059a4:	f107 030f 	add.w	r3, r7, #15
 80059a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 f885 	bl	8006ac8 <hci_send_req>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da01      	bge.n	80059c8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80059c4:	23ff      	movs	r3, #255	@ 0xff
 80059c6:	e004      	b.n	80059d2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80059c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80059d0:	781b      	ldrb	r3, [r3, #0]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80059d8:	46bd      	mov	sp, r7
 80059da:	bdb0      	pop	{r4, r5, r7, pc}

080059dc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b0cc      	sub	sp, #304	@ 0x130
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4602      	mov	r2, r0
 80059e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059ec:	6019      	str	r1, [r3, #0]
 80059ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059f2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80059f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80059f8:	f107 0310 	add.w	r3, r7, #16
 80059fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a04:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a1a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005a1e:	8812      	ldrh	r2, [r2, #0]
 8005a20:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a26:	3302      	adds	r3, #2
 8005a28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005a34:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a42:	3304      	adds	r3, #4
 8005a44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a4c:	2218      	movs	r2, #24
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f97b 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a56:	233f      	movs	r3, #63	@ 0x3f
 8005a58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005a5c:	2388      	movs	r3, #136	@ 0x88
 8005a5e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a62:	f107 0310 	add.w	r3, r7, #16
 8005a66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a72:	f107 030f 	add.w	r3, r7, #15
 8005a76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f81e 	bl	8006ac8 <hci_send_req>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da01      	bge.n	8005a96 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005a92:	23ff      	movs	r3, #255	@ 0xff
 8005a94:	e004      	b.n	8005aa0 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005a96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a9e:	781b      	ldrb	r3, [r3, #0]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005aaa:	b590      	push	{r4, r7, lr}
 8005aac:	b0cd      	sub	sp, #308	@ 0x134
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	4608      	mov	r0, r1
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005aba:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ac4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005ac8:	4622      	mov	r2, r4
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ad0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005adc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	2207      	movs	r2, #7
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f929 	bl	8006d4c <Osal_MemSet>
  int index_input = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b08:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005b0c:	7812      	ldrb	r2, [r2, #0]
 8005b0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b14:	3301      	adds	r3, #1
 8005b16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b22:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b3c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b48:	3301      	adds	r3, #1
 8005b4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b52:	2218      	movs	r2, #24
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f8f8 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b5c:	233f      	movs	r3, #63	@ 0x3f
 8005b5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005b62:	238a      	movs	r3, #138	@ 0x8a
 8005b64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b68:	f107 0310 	add.w	r3, r7, #16
 8005b6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005b80:	2307      	movs	r3, #7
 8005b82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 ff9b 	bl	8006ac8 <hci_send_req>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da01      	bge.n	8005b9c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005b98:	23ff      	movs	r3, #255	@ 0xff
 8005b9a:	e02e      	b.n	8005bfa <aci_gap_init+0x150>
  if ( resp.Status )
 8005b9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ba0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <aci_gap_init+0x10c>
    return resp.Status;
 8005baa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	e021      	b.n	8005bfa <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005bb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bbe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005bd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bd4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bd8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005be2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005be8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005bec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005bf6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}

08005c04 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b0cc      	sub	sp, #304	@ 0x130
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c10:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c14:	6019      	str	r1, [r3, #0]
 8005c16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c1a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005c20:	f107 0310 	add.w	r3, r7, #16
 8005c24:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005c28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c2c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c42:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c58:	1c58      	adds	r0, r3, #1
 8005c5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c5e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c68:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	f001 f85d 	bl	8006d2c <Osal_MemCpy>
  index_input += AdvDataLen;
 8005c72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c76:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005c80:	4413      	add	r3, r2
 8005c82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c8a:	2218      	movs	r2, #24
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 f85c 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c94:	233f      	movs	r3, #63	@ 0x3f
 8005c96:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005c9a:	238e      	movs	r3, #142	@ 0x8e
 8005c9c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005cb0:	f107 030f 	add.w	r3, r7, #15
 8005cb4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 feff 	bl	8006ac8 <hci_send_req>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	da01      	bge.n	8005cd4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005cd0:	23ff      	movs	r3, #255	@ 0xff
 8005cd2:	e004      	b.n	8005cde <aci_gap_update_adv_data+0xda>
  return status;
 8005cd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cd8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005cdc:	781b      	ldrb	r3, [r3, #0]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	2218      	movs	r2, #24
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 f826 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d00:	233f      	movs	r3, #63	@ 0x3f
 8005d02:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005d04:	2392      	movs	r3, #146	@ 0x92
 8005d06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005d08:	1dfb      	adds	r3, r7, #7
 8005d0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fed6 	bl	8006ac8 <hci_send_req>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da01      	bge.n	8005d26 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005d22:	23ff      	movs	r3, #255	@ 0xff
 8005d24:	e000      	b.n	8005d28 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8005d26:	79fb      	ldrb	r3, [r7, #7]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b0cc      	sub	sp, #304	@ 0x130
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4602      	mov	r2, r0
 8005d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d46:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005d4e:	f107 0310 	add.w	r3, r7, #16
 8005d52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d70:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8005d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d8a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d96:	3301      	adds	r3, #1
 8005d98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005da0:	2218      	movs	r2, #24
 8005da2:	2100      	movs	r1, #0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ffd1 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005daa:	233f      	movs	r3, #63	@ 0x3f
 8005dac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8005db0:	23a5      	movs	r3, #165	@ 0xa5
 8005db2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005dc6:	f107 030f 	add.w	r3, r7, #15
 8005dca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fe74 	bl	8006ac8 <hci_send_req>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da01      	bge.n	8005dea <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8005de6:	23ff      	movs	r3, #255	@ 0xff
 8005de8:	e004      	b.n	8005df4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005df2:	781b      	ldrb	r3, [r3, #0]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	2218      	movs	r2, #24
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ff9b 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e16:	233f      	movs	r3, #63	@ 0x3f
 8005e18:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005e1a:	f240 1301 	movw	r3, #257	@ 0x101
 8005e1e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005e20:	1dfb      	adds	r3, r7, #7
 8005e22:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005e24:	2301      	movs	r3, #1
 8005e26:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e28:	f107 0308 	add.w	r3, r7, #8
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fe4a 	bl	8006ac8 <hci_send_req>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da01      	bge.n	8005e3e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005e3a:	23ff      	movs	r3, #255	@ 0xff
 8005e3c:	e000      	b.n	8005e40 <aci_gatt_init+0x42>
  return status;
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b0cf      	sub	sp, #316	@ 0x13c
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4604      	mov	r4, r0
 8005e50:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005e54:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005e58:	6001      	str	r1, [r0, #0]
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e62:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005e66:	4622      	mov	r2, r4
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e6e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005e72:	4602      	mov	r2, r0
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e7a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005e7e:	460a      	mov	r2, r1
 8005e80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005e82:	f107 0310 	add.w	r3, r7, #16
 8005e86:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005e8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e8e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d00a      	beq.n	8005eae <aci_gatt_add_service+0x66>
 8005e98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e9c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d101      	bne.n	8005eaa <aci_gatt_add_service+0x62>
 8005ea6:	2311      	movs	r3, #17
 8005ea8:	e002      	b.n	8005eb0 <aci_gatt_add_service+0x68>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <aci_gatt_add_service+0x68>
 8005eae:	2303      	movs	r3, #3
 8005eb0:	f107 0210 	add.w	r2, r7, #16
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005eba:	f107 030c 	add.w	r3, r7, #12
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 ff42 	bl	8006d4c <Osal_MemSet>
  int index_input = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005ece:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ed2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005ed6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005eda:	7812      	ldrb	r2, [r2, #0]
 8005edc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005ee8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005eec:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d002      	beq.n	8005efc <aci_gatt_add_service+0xb4>
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d004      	beq.n	8005f04 <aci_gatt_add_service+0xbc>
 8005efa:	e007      	b.n	8005f0c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005efc:	2302      	movs	r3, #2
 8005efe:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005f02:	e005      	b.n	8005f10 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005f0a:	e001      	b.n	8005f10 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005f0c:	2397      	movs	r3, #151	@ 0x97
 8005f0e:	e06c      	b.n	8005fea <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005f10:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f14:	1c58      	adds	r0, r3, #1
 8005f16:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005f1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	f000 ff02 	bl	8006d2c <Osal_MemCpy>
    index_input += size;
 8005f28:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005f2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f30:	4413      	add	r3, r2
 8005f32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f3a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005f3e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005f58:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f64:	3301      	adds	r3, #1
 8005f66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f6e:	2218      	movs	r2, #24
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 feea 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f78:	233f      	movs	r3, #63	@ 0x3f
 8005f7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005f7e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005f82:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005f96:	f107 030c 	add.w	r3, r7, #12
 8005f9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fd8c 	bl	8006ac8 <hci_send_req>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da01      	bge.n	8005fba <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005fb6:	23ff      	movs	r3, #255	@ 0xff
 8005fb8:	e017      	b.n	8005fea <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005fba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	e00a      	b.n	8005fea <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005fd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005fdc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005fe6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b0d1      	sub	sp, #324	@ 0x144
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006002:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006006:	600a      	str	r2, [r1, #0]
 8006008:	4619      	mov	r1, r3
 800600a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800600e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006012:	4622      	mov	r2, r4
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800601a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800601e:	4602      	mov	r2, r0
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006026:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800602a:	460a      	mov	r2, r1
 800602c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800602e:	f107 0318 	add.w	r3, r7, #24
 8006032:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006036:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800603a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d00a      	beq.n	800605a <aci_gatt_add_char+0x66>
 8006044:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006048:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d101      	bne.n	8006056 <aci_gatt_add_char+0x62>
 8006052:	2313      	movs	r3, #19
 8006054:	e002      	b.n	800605c <aci_gatt_add_char+0x68>
 8006056:	2303      	movs	r3, #3
 8006058:	e000      	b.n	800605c <aci_gatt_add_char+0x68>
 800605a:	2305      	movs	r3, #5
 800605c:	f107 0218 	add.w	r2, r7, #24
 8006060:	4413      	add	r3, r2
 8006062:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006066:	f107 0314 	add.w	r3, r7, #20
 800606a:	2203      	movs	r2, #3
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fe6c 	bl	8006d4c <Osal_MemSet>
  int index_input = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800607a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800607e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006082:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006086:	8812      	ldrh	r2, [r2, #0]
 8006088:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800608a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800608e:	3302      	adds	r3, #2
 8006090:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006094:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006098:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800609c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80060a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80060a8:	3301      	adds	r3, #1
 80060aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80060ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060b2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d002      	beq.n	80060c2 <aci_gatt_add_char+0xce>
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d004      	beq.n	80060ca <aci_gatt_add_char+0xd6>
 80060c0:	e007      	b.n	80060d2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80060c2:	2302      	movs	r3, #2
 80060c4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80060c8:	e005      	b.n	80060d6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80060ca:	2310      	movs	r3, #16
 80060cc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80060d0:	e001      	b.n	80060d6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80060d2:	2397      	movs	r3, #151	@ 0x97
 80060d4:	e091      	b.n	80061fa <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80060d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80060da:	1cd8      	adds	r0, r3, #3
 80060dc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80060e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80060e4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	f000 fe1f 	bl	8006d2c <Osal_MemCpy>
    index_input += size;
 80060ee:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80060f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80060f6:	4413      	add	r3, r2
 80060f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80060fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006100:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006104:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006108:	8812      	ldrh	r2, [r2, #0]
 800610a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800610c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006110:	3302      	adds	r3, #2
 8006112:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006116:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800611a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800611e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006120:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006124:	3301      	adds	r3, #1
 8006126:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800612a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800612e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006132:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006134:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006138:	3301      	adds	r3, #1
 800613a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800613e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006142:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006146:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006148:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800614c:	3301      	adds	r3, #1
 800614e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006152:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006156:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800615a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800615c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006160:	3301      	adds	r3, #1
 8006162:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800616a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800616e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006170:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006174:	3301      	adds	r3, #1
 8006176:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800617a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800617e:	2218      	movs	r2, #24
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fde2 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006188:	233f      	movs	r3, #63	@ 0x3f
 800618a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800618e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006192:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8006196:	f107 0318 	add.w	r3, r7, #24
 800619a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800619e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80061a6:	f107 0314 	add.w	r3, r7, #20
 80061aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80061ae:	2303      	movs	r3, #3
 80061b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fc84 	bl	8006ac8 <hci_send_req>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	da01      	bge.n	80061ca <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80061c6:	23ff      	movs	r3, #255	@ 0xff
 80061c8:	e017      	b.n	80061fa <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80061ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80061ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80061d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80061dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	e00a      	b.n	80061fa <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80061e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80061e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80061ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80061f6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006200:	46bd      	mov	sp, r7
 8006202:	bd90      	pop	{r4, r7, pc}

08006204 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b0cc      	sub	sp, #304	@ 0x130
 8006208:	af00      	add	r7, sp, #0
 800620a:	4605      	mov	r5, r0
 800620c:	460c      	mov	r4, r1
 800620e:	4610      	mov	r0, r2
 8006210:	4619      	mov	r1, r3
 8006212:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006216:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800621a:	462a      	mov	r2, r5
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006222:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006226:	4622      	mov	r2, r4
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800622e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006232:	4602      	mov	r2, r0
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800623a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800623e:	460a      	mov	r2, r1
 8006240:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006242:	f107 0310 	add.w	r3, r7, #16
 8006246:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800624a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800624e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800625c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006260:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006264:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800626c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006270:	3302      	adds	r3, #2
 8006272:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006276:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800627a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800627e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006282:	8812      	ldrh	r2, [r2, #0]
 8006284:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006286:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800628a:	3302      	adds	r3, #2
 800628c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8006290:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006294:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006298:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80062a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062a4:	3301      	adds	r3, #1
 80062a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80062b2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80062ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062be:	3301      	adds	r3, #1
 80062c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80062c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062c8:	1d98      	adds	r0, r3, #6
 80062ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062ce:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80062da:	f000 fd27 	bl	8006d2c <Osal_MemCpy>
  index_input += Char_Value_Length;
 80062de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062e2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80062ec:	4413      	add	r3, r2
 80062ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062f6:	2218      	movs	r2, #24
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fd26 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006300:	233f      	movs	r3, #63	@ 0x3f
 8006302:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006306:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800630a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800630e:	f107 0310 	add.w	r3, r7, #16
 8006312:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006316:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800631a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800631e:	f107 030f 	add.w	r3, r7, #15
 8006322:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006326:	2301      	movs	r3, #1
 8006328:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800632c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fbc8 	bl	8006ac8 <hci_send_req>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	da01      	bge.n	8006342 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800633e:	23ff      	movs	r3, #255	@ 0xff
 8006340:	e004      	b.n	800634c <aci_gatt_update_char_value+0x148>
  return status;
 8006342:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006346:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800634a:	781b      	ldrb	r3, [r3, #0]
}
 800634c:	4618      	mov	r0, r3
 800634e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006352:	46bd      	mov	sp, r7
 8006354:	bdb0      	pop	{r4, r5, r7, pc}

08006356 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b0cc      	sub	sp, #304	@ 0x130
 800635a:	af00      	add	r7, sp, #0
 800635c:	4602      	mov	r2, r0
 800635e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006362:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006366:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006368:	f107 0310 	add.w	r3, r7, #16
 800636c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006374:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006386:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800638a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800638e:	8812      	ldrh	r2, [r2, #0]
 8006390:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006396:	3302      	adds	r3, #2
 8006398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800639c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063a0:	2218      	movs	r2, #24
 80063a2:	2100      	movs	r1, #0
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fcd1 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80063aa:	233f      	movs	r3, #63	@ 0x3f
 80063ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80063b0:	f240 1325 	movw	r3, #293	@ 0x125
 80063b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80063b8:	f107 0310 	add.w	r3, r7, #16
 80063bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80063c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80063c8:	f107 030f 	add.w	r3, r7, #15
 80063cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fb73 	bl	8006ac8 <hci_send_req>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da01      	bge.n	80063ec <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80063e8:	23ff      	movs	r3, #255	@ 0xff
 80063ea:	e004      	b.n	80063f6 <aci_gatt_confirm_indication+0xa0>
  return status;
 80063ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063f4:	781b      	ldrb	r3, [r3, #0]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b0cc      	sub	sp, #304	@ 0x130
 8006404:	af00      	add	r7, sp, #0
 8006406:	4602      	mov	r2, r0
 8006408:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800640c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006410:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8006412:	f107 0310 	add.w	r3, r7, #16
 8006416:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800641a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800641e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800642c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006430:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006434:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006438:	8812      	ldrh	r2, [r2, #0]
 800643a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800643c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006440:	3302      	adds	r3, #2
 8006442:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006446:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800644a:	2218      	movs	r2, #24
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fc7c 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006454:	233f      	movs	r3, #63	@ 0x3f
 8006456:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800645a:	f240 1327 	movw	r3, #295	@ 0x127
 800645e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006462:	f107 0310 	add.w	r3, r7, #16
 8006466:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800646a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800646e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006472:	f107 030f 	add.w	r3, r7, #15
 8006476:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800647a:	2301      	movs	r3, #1
 800647c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006480:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fb1e 	bl	8006ac8 <hci_send_req>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	da01      	bge.n	8006496 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8006492:	23ff      	movs	r3, #255	@ 0xff
 8006494:	e004      	b.n	80064a0 <aci_gatt_allow_read+0xa0>
  return status;
 8006496:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800649a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800649e:	781b      	ldrb	r3, [r3, #0]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 80064aa:	b5b0      	push	{r4, r5, r7, lr}
 80064ac:	b0cc      	sub	sp, #304	@ 0x130
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	4605      	mov	r5, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064bc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80064c0:	462a      	mov	r2, r5
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064cc:	4622      	mov	r2, r4
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064d4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80064d8:	4602      	mov	r2, r0
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064e0:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 80064e4:	460a      	mov	r2, r1
 80064e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 80064e8:	f107 0310 	add.w	r3, r7, #16
 80064ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80064f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006506:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800650a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800650e:	8812      	ldrh	r2, [r2, #0]
 8006510:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006516:	3302      	adds	r3, #2
 8006518:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800651c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006520:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006524:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006528:	8812      	ldrh	r2, [r2, #0]
 800652a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800652c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006530:	3302      	adds	r3, #2
 8006532:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800653a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800653e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8006542:	8812      	ldrh	r2, [r2, #0]
 8006544:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8006546:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800654a:	3302      	adds	r3, #2
 800654c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Update_Type = Update_Type;
 8006550:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006554:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006558:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006560:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006564:	3301      	adds	r3, #1
 8006566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Length = Char_Length;
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800656e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8006572:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8006576:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800657a:	3302      	adds	r3, #2
 800657c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Offset = Value_Offset;
 8006580:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006584:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 8006588:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 800658c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006590:	3302      	adds	r3, #2
 8006592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Length = Value_Length;
 8006596:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800659a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800659e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80065a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065a4:	3301      	adds	r3, #1
 80065a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065ae:	330c      	adds	r3, #12
 80065b0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80065b4:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fbb7 	bl	8006d2c <Osal_MemCpy>
  index_input += Value_Length;
 80065be:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 80065c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80065c6:	4413      	add	r3, r2
 80065c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065d0:	2218      	movs	r2, #24
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fbb9 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80065da:	233f      	movs	r3, #63	@ 0x3f
 80065dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x12c;
 80065e0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80065e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80065f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80065f8:	f107 030f 	add.w	r3, r7, #15
 80065fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006600:	2301      	movs	r3, #1
 8006602:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006606:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fa5b 	bl	8006ac8 <hci_send_req>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	da01      	bge.n	800661c <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8006618:	23ff      	movs	r3, #255	@ 0xff
 800661a:	e004      	b.n	8006626 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 800661c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006620:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006624:	781b      	ldrb	r3, [r3, #0]
}
 8006626:	4618      	mov	r0, r3
 8006628:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800662c:	46bd      	mov	sp, r7
 800662e:	bdb0      	pop	{r4, r5, r7, pc}

08006630 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b0cc      	sub	sp, #304	@ 0x130
 8006634:	af00      	add	r7, sp, #0
 8006636:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800663a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006644:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006648:	4602      	mov	r2, r0
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006650:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006654:	460a      	mov	r2, r1
 8006656:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006658:	f107 0310 	add.w	r3, r7, #16
 800665c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006660:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006664:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006672:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006676:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800667a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006682:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006686:	3301      	adds	r3, #1
 8006688:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800668c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006690:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006694:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800669c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066a0:	3301      	adds	r3, #1
 80066a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80066a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066aa:	1c98      	adds	r0, r3, #2
 80066ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	f000 fb34 	bl	8006d2c <Osal_MemCpy>
  index_input += Length;
 80066c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80066d2:	4413      	add	r3, r2
 80066d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066dc:	2218      	movs	r2, #24
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fb33 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80066e6:	233f      	movs	r3, #63	@ 0x3f
 80066e8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80066ec:	230c      	movs	r3, #12
 80066ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066f2:	f107 0310 	add.w	r3, r7, #16
 80066f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80066fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006702:	f107 030f 	add.w	r3, r7, #15
 8006706:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800670a:	2301      	movs	r3, #1
 800670c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006710:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f9d6 	bl	8006ac8 <hci_send_req>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	da01      	bge.n	8006726 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006722:	23ff      	movs	r3, #255	@ 0xff
 8006724:	e004      	b.n	8006730 <aci_hal_write_config_data+0x100>
  return status;
 8006726:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800672a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800672e:	781b      	ldrb	r3, [r3, #0]
}
 8006730:	4618      	mov	r0, r3
 8006732:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b0cc      	sub	sp, #304	@ 0x130
 800673e:	af00      	add	r7, sp, #0
 8006740:	4602      	mov	r2, r0
 8006742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006746:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006750:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006754:	460a      	mov	r2, r1
 8006756:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006758:	f107 0310 	add.w	r3, r7, #16
 800675c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006760:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006764:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006772:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006776:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800677a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006782:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006786:	3301      	adds	r3, #1
 8006788:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800678c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006790:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006794:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800679c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067a0:	3301      	adds	r3, #1
 80067a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067aa:	2218      	movs	r2, #24
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 facc 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 80067b4:	233f      	movs	r3, #63	@ 0x3f
 80067b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80067ba:	230f      	movs	r3, #15
 80067bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067c0:	f107 0310 	add.w	r3, r7, #16
 80067c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80067d0:	f107 030f 	add.w	r3, r7, #15
 80067d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067d8:	2301      	movs	r3, #1
 80067da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 f96f 	bl	8006ac8 <hci_send_req>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da01      	bge.n	80067f4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80067f0:	23ff      	movs	r3, #255	@ 0xff
 80067f2:	e004      	b.n	80067fe <aci_hal_set_tx_power_level+0xc4>
  return status;
 80067f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80067fc:	781b      	ldrb	r3, [r3, #0]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b0cc      	sub	sp, #304	@ 0x130
 800680c:	af00      	add	r7, sp, #0
 800680e:	4602      	mov	r2, r0
 8006810:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006814:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006818:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800681a:	f107 0310 	add.w	r3, r7, #16
 800681e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006826:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006838:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800683c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006840:	8812      	ldrh	r2, [r2, #0]
 8006842:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006848:	3302      	adds	r3, #2
 800684a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800684e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006852:	2218      	movs	r2, #24
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fa78 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x3f;
 800685c:	233f      	movs	r3, #63	@ 0x3f
 800685e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006862:	2318      	movs	r3, #24
 8006864:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006868:	f107 0310 	add.w	r3, r7, #16
 800686c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006870:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006874:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006878:	f107 030f 	add.w	r3, r7, #15
 800687c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006880:	2301      	movs	r3, #1
 8006882:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006886:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f91b 	bl	8006ac8 <hci_send_req>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	da01      	bge.n	800689c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006898:	23ff      	movs	r3, #255	@ 0xff
 800689a:	e004      	b.n	80068a6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800689c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068a4:	781b      	ldrb	r3, [r3, #0]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	2218      	movs	r2, #24
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fa42 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x03;
 80068c8:	2303      	movs	r3, #3
 80068ca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80068cc:	2303      	movs	r3, #3
 80068ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80068d0:	1dfb      	adds	r3, r7, #7
 80068d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80068d4:	2301      	movs	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	2100      	movs	r1, #0
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f8f2 	bl	8006ac8 <hci_send_req>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da01      	bge.n	80068ee <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80068ea:	23ff      	movs	r3, #255	@ 0xff
 80068ec:	e000      	b.n	80068f0 <hci_reset+0x40>
  return status;
 80068ee:	79fb      	ldrb	r3, [r7, #7]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3720      	adds	r7, #32
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b0cd      	sub	sp, #308	@ 0x134
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006908:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800690c:	4622      	mov	r2, r4
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006914:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006918:	4602      	mov	r2, r0
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006920:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006924:	460a      	mov	r2, r1
 8006926:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006928:	f107 0310 	add.w	r3, r7, #16
 800692c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006930:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006934:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006942:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006946:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800694a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006952:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006956:	3301      	adds	r3, #1
 8006958:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800695c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006960:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006964:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800696c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006970:	3301      	adds	r3, #1
 8006972:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006976:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800697a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800697e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800698a:	3301      	adds	r3, #1
 800698c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006994:	2218      	movs	r2, #24
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f9d7 	bl	8006d4c <Osal_MemSet>
  rq.ogf = 0x08;
 800699e:	2308      	movs	r3, #8
 80069a0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80069a4:	2331      	movs	r3, #49	@ 0x31
 80069a6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80069aa:	f107 0310 	add.w	r3, r7, #16
 80069ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80069b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80069ba:	f107 030f 	add.w	r3, r7, #15
 80069be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f87a 	bl	8006ac8 <hci_send_req>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da01      	bge.n	80069de <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80069da:	23ff      	movs	r3, #255	@ 0xff
 80069dc:	e004      	b.n	80069e8 <hci_le_set_default_phy+0xf0>
  return status;
 80069de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069e6:	781b      	ldrb	r3, [r3, #0]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd90      	pop	{r4, r7, pc}
	...

080069f4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4a08      	ldr	r2, [pc, #32]	@ (8006a24 <hci_init+0x30>)
 8006a04:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006a06:	4a08      	ldr	r2, [pc, #32]	@ (8006a28 <hci_init+0x34>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006a0c:	4806      	ldr	r0, [pc, #24]	@ (8006a28 <hci_init+0x34>)
 8006a0e:	f000 f979 	bl	8006d04 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f8da 	bl	8006bd0 <TlInit>

  return;
 8006a1c:	bf00      	nop
}
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	200003e8 	.word	0x200003e8
 8006a28:	200003c0 	.word	0x200003c0

08006a2c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006a32:	4822      	ldr	r0, [pc, #136]	@ (8006abc <hci_user_evt_proc+0x90>)
 8006a34:	f000 fbfc 	bl	8007230 <LST_is_empty>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d12b      	bne.n	8006a96 <hci_user_evt_proc+0x6a>
 8006a3e:	4b20      	ldr	r3, [pc, #128]	@ (8006ac0 <hci_user_evt_proc+0x94>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d027      	beq.n	8006a96 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006a46:	f107 030c 	add.w	r3, r7, #12
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	481b      	ldr	r0, [pc, #108]	@ (8006abc <hci_user_evt_proc+0x90>)
 8006a4e:	f000 fc7e 	bl	800734e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006a52:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac4 <hci_user_evt_proc+0x98>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006a62:	4b18      	ldr	r3, [pc, #96]	@ (8006ac4 <hci_user_evt_proc+0x98>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	1d3a      	adds	r2, r7, #4
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006a6c:	793a      	ldrb	r2, [r7, #4]
 8006a6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <hci_user_evt_proc+0x94>)
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006a74:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <hci_user_evt_proc+0x94>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006a7a:	4b11      	ldr	r3, [pc, #68]	@ (8006ac0 <hci_user_evt_proc+0x94>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 ff3f 	bl	8007908 <TL_MM_EvtDone>
 8006a8a:	e004      	b.n	8006a96 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	480a      	ldr	r0, [pc, #40]	@ (8006abc <hci_user_evt_proc+0x90>)
 8006a92:	f000 fbef 	bl	8007274 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006a96:	4809      	ldr	r0, [pc, #36]	@ (8006abc <hci_user_evt_proc+0x90>)
 8006a98:	f000 fbca 	bl	8007230 <LST_is_empty>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <hci_user_evt_proc+0x86>
 8006aa2:	4b07      	ldr	r3, [pc, #28]	@ (8006ac0 <hci_user_evt_proc+0x94>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006aaa:	4804      	ldr	r0, [pc, #16]	@ (8006abc <hci_user_evt_proc+0x90>)
 8006aac:	f001 faa2 	bl	8007ff4 <hci_notify_asynch_evt>
  }


  return;
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
}
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000078 	.word	0x20000078
 8006ac0:	20000084 	.word	0x20000084
 8006ac4:	200003c0 	.word	0x200003c0

08006ac8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f000 f8d1 	bl	8006c7c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006ada:	2300      	movs	r3, #0
 8006adc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	885b      	ldrh	r3, [r3, #2]
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ae8:	b21a      	sxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	4313      	orrs	r3, r2
 8006af4:	b21b      	sxth	r3, r3
 8006af6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006af8:	4b33      	ldr	r3, [pc, #204]	@ (8006bc8 <hci_send_req+0x100>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	b2d9      	uxtb	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	8bbb      	ldrh	r3, [r7, #28]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f890 	bl	8006c30 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006b10:	e04e      	b.n	8006bb0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006b12:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006b16:	f001 fa84 	bl	8008022 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006b1a:	e043      	b.n	8006ba4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4619      	mov	r1, r3
 8006b22:	482a      	ldr	r0, [pc, #168]	@ (8006bcc <hci_send_req+0x104>)
 8006b24:	f000 fc13 	bl	800734e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	7a5b      	ldrb	r3, [r3, #9]
 8006b2c:	2b0f      	cmp	r3, #15
 8006b2e:	d114      	bne.n	8006b5a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	330b      	adds	r3, #11
 8006b34:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8bba      	ldrh	r2, [r7, #28]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d104      	bne.n	8006b4c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	7812      	ldrb	r2, [r2, #0]
 8006b4a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d027      	beq.n	8006ba4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006b54:	2301      	movs	r3, #1
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e024      	b.n	8006ba4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	330b      	adds	r3, #11
 8006b5e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	8bba      	ldrh	r2, [r7, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d114      	bne.n	8006b98 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	7a9b      	ldrb	r3, [r3, #10]
 8006b72:	3b03      	subs	r3, #3
 8006b74:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	bfa8      	it	ge
 8006b80:	461a      	movge	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6918      	ldr	r0, [r3, #16]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	1cd9      	adds	r1, r3, #3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f002 fca2 	bl	80094dc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d001      	beq.n	8006ba4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006ba4:	4809      	ldr	r0, [pc, #36]	@ (8006bcc <hci_send_req+0x104>)
 8006ba6:	f000 fb43 	bl	8007230 <LST_is_empty>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0b5      	beq.n	8006b1c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006bb0:	7ffb      	ldrb	r3, [r7, #31]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ad      	beq.n	8006b12 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	f000 f860 	bl	8006c7c <NotifyCmdStatus>

  return 0;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200003ec 	.word	0x200003ec
 8006bcc:	200003e0 	.word	0x200003e0

08006bd0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006bd8:	480f      	ldr	r0, [pc, #60]	@ (8006c18 <TlInit+0x48>)
 8006bda:	f000 fb19 	bl	8007210 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006bde:	4a0f      	ldr	r2, [pc, #60]	@ (8006c1c <TlInit+0x4c>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006be4:	480e      	ldr	r0, [pc, #56]	@ (8006c20 <TlInit+0x50>)
 8006be6:	f000 fb13 	bl	8007210 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006bea:	4b0e      	ldr	r3, [pc, #56]	@ (8006c24 <TlInit+0x54>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <TlInit+0x58>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <TlInit+0x5c>)
 8006bfe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006c00:	4b09      	ldr	r3, [pc, #36]	@ (8006c28 <TlInit+0x58>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f107 0208 	add.w	r2, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
  }

  return;
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
}
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	200003e0 	.word	0x200003e0
 8006c1c:	20000080 	.word	0x20000080
 8006c20:	20000078 	.word	0x20000078
 8006c24:	20000084 	.word	0x20000084
 8006c28:	200003c0 	.word	0x200003c0
 8006c2c:	08006cbd 	.word	0x08006cbd

08006c30 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	603a      	str	r2, [r7, #0]
 8006c3a:	80fb      	strh	r3, [r7, #6]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006c40:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <SendCmd+0x44>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	88fa      	ldrh	r2, [r7, #6]
 8006c46:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <SendCmd+0x44>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	797a      	ldrb	r2, [r7, #5]
 8006c50:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006c52:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <SendCmd+0x44>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	797a      	ldrb	r2, [r7, #5]
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f002 fc3d 	bl	80094dc <memcpy>

  hciContext.io.Send(0,0);
 8006c62:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <SendCmd+0x48>)
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2100      	movs	r1, #0
 8006c68:	2000      	movs	r0, #0
 8006c6a:	4798      	blx	r3

  return;
 8006c6c:	bf00      	nop
}
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000080 	.word	0x20000080
 8006c78:	200003c0 	.word	0x200003c0

08006c7c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d108      	bne.n	8006c9e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <NotifyCmdStatus+0x3c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006c94:	4b08      	ldr	r3, [pc, #32]	@ (8006cb8 <NotifyCmdStatus+0x3c>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2000      	movs	r0, #0
 8006c9a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006c9c:	e008      	b.n	8006cb0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006c9e:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <NotifyCmdStatus+0x3c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006ca6:	4b04      	ldr	r3, [pc, #16]	@ (8006cb8 <NotifyCmdStatus+0x3c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2001      	movs	r0, #1
 8006cac:	4798      	blx	r3
  return;
 8006cae:	bf00      	nop
 8006cb0:	bf00      	nop
}
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	200003e8 	.word	0x200003e8

08006cbc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7a5b      	ldrb	r3, [r3, #9]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d003      	beq.n	8006cd4 <TlEvtReceived+0x18>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7a5b      	ldrb	r3, [r3, #9]
 8006cd0:	2b0e      	cmp	r3, #14
 8006cd2:	d107      	bne.n	8006ce4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4809      	ldr	r0, [pc, #36]	@ (8006cfc <TlEvtReceived+0x40>)
 8006cd8:	f000 faf2 	bl	80072c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f001 f995 	bl	800800c <hci_cmd_resp_release>
 8006ce2:	e006      	b.n	8006cf2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4806      	ldr	r0, [pc, #24]	@ (8006d00 <TlEvtReceived+0x44>)
 8006ce8:	f000 faea 	bl	80072c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006cec:	4804      	ldr	r0, [pc, #16]	@ (8006d00 <TlEvtReceived+0x44>)
 8006cee:	f001 f981 	bl	8007ff4 <hci_notify_asynch_evt>
  }

  return;
 8006cf2:	bf00      	nop
}
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200003e0 	.word	0x200003e0
 8006d00:	20000078 	.word	0x20000078

08006d04 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a05      	ldr	r2, [pc, #20]	@ (8006d24 <hci_register_io_bus+0x20>)
 8006d10:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a04      	ldr	r2, [pc, #16]	@ (8006d28 <hci_register_io_bus+0x24>)
 8006d16:	611a      	str	r2, [r3, #16]

  return;
 8006d18:	bf00      	nop
}
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	08007681 	.word	0x08007681
 8006d28:	080076e9 	.word	0x080076e9

08006d2c <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f002 fbcd 	bl	80094dc <memcpy>
 8006d42:	4603      	mov	r3, r0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f002 fb91 	bl	8009484 <memset>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	4603      	mov	r3, r0
 8006d74:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006d76:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <OTP_Read+0x48>)
 8006d78:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006d7a:	e002      	b.n	8006d82 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3b08      	subs	r3, #8
 8006d80:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3307      	adds	r3, #7
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	79fa      	ldrb	r2, [r7, #7]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d003      	beq.n	8006d96 <OTP_Read+0x2a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4a09      	ldr	r2, [pc, #36]	@ (8006db8 <OTP_Read+0x4c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d1f2      	bne.n	8006d7c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3307      	adds	r3, #7
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	79fa      	ldrb	r2, [r7, #7]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d001      	beq.n	8006da6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006da6:	68fb      	ldr	r3, [r7, #12]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	1fff73f8 	.word	0x1fff73f8
 8006db8:	1fff7000 	.word	0x1fff7000

08006dbc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006dc4:	f107 030c 	add.w	r3, r7, #12
 8006dc8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	212e      	movs	r1, #46	@ 0x2e
 8006dd4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006dd8:	f000 f94c 	bl	8007074 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	330b      	adds	r3, #11
 8006de0:	78db      	ldrb	r3, [r3, #3]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b088      	sub	sp, #32
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006df2:	f107 030c 	add.w	r3, r7, #12
 8006df6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	210f      	movs	r1, #15
 8006e02:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006e06:	f000 f935 	bl	8007074 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	330b      	adds	r3, #11
 8006e0e:	78db      	ldrb	r3, [r3, #3]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	2110      	movs	r1, #16
 8006e2c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006e30:	f000 f920 	bl	8007074 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	330b      	adds	r3, #11
 8006e38:	78db      	ldrb	r3, [r3, #3]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b08b      	sub	sp, #44	@ 0x2c
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8006f98 <SHCI_GetWirelessFwInfo+0x154>)
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006e74:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e7e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a44      	ldr	r2, [pc, #272]	@ (8006f9c <SHCI_GetWirelessFwInfo+0x158>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d10f      	bne.n	8006eb0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	e01a      	b.n	8006ee6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006eb8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006ebc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	0e1b      	lsrs	r3, r3, #24
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	0c1b      	lsrs	r3, r3, #16
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	0a1b      	lsrs	r3, r3, #8
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	0e1b      	lsrs	r3, r3, #24
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	0a1b      	lsrs	r3, r3, #8
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	0e1b      	lsrs	r3, r3, #24
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	0e1b      	lsrs	r3, r3, #24
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	0c1b      	lsrs	r3, r3, #16
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	372c      	adds	r7, #44	@ 0x2c
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	58004000 	.word	0x58004000
 8006f9c:	a94656b9 	.word	0xa94656b9

08006fa0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4a08      	ldr	r2, [pc, #32]	@ (8006fd0 <shci_init+0x30>)
 8006fb0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006fb2:	4a08      	ldr	r2, [pc, #32]	@ (8006fd4 <shci_init+0x34>)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006fb8:	4806      	ldr	r0, [pc, #24]	@ (8006fd4 <shci_init+0x34>)
 8006fba:	f000 f915 	bl	80071e8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f898 	bl	80070f8 <TlInit>

  return;
 8006fc8:	bf00      	nop
}
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000410 	.word	0x20000410
 8006fd4:	200003f0 	.word	0x200003f0

08006fd8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006fde:	4822      	ldr	r0, [pc, #136]	@ (8007068 <shci_user_evt_proc+0x90>)
 8006fe0:	f000 f926 	bl	8007230 <LST_is_empty>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d12b      	bne.n	8007042 <shci_user_evt_proc+0x6a>
 8006fea:	4b20      	ldr	r3, [pc, #128]	@ (800706c <shci_user_evt_proc+0x94>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d027      	beq.n	8007042 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006ff2:	f107 030c 	add.w	r3, r7, #12
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	481b      	ldr	r0, [pc, #108]	@ (8007068 <shci_user_evt_proc+0x90>)
 8006ffa:	f000 f9a8 	bl	800734e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8007070 <shci_user_evt_proc+0x98>)
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800700a:	2301      	movs	r3, #1
 800700c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800700e:	4b18      	ldr	r3, [pc, #96]	@ (8007070 <shci_user_evt_proc+0x98>)
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	1d3a      	adds	r2, r7, #4
 8007014:	4610      	mov	r0, r2
 8007016:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007018:	793a      	ldrb	r2, [r7, #4]
 800701a:	4b14      	ldr	r3, [pc, #80]	@ (800706c <shci_user_evt_proc+0x94>)
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e002      	b.n	8007026 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007020:	4b12      	ldr	r3, [pc, #72]	@ (800706c <shci_user_evt_proc+0x94>)
 8007022:	2201      	movs	r2, #1
 8007024:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007026:	4b11      	ldr	r3, [pc, #68]	@ (800706c <shci_user_evt_proc+0x94>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fc69 	bl	8007908 <TL_MM_EvtDone>
 8007036:	e004      	b.n	8007042 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4619      	mov	r1, r3
 800703c:	480a      	ldr	r0, [pc, #40]	@ (8007068 <shci_user_evt_proc+0x90>)
 800703e:	f000 f919 	bl	8007274 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007042:	4809      	ldr	r0, [pc, #36]	@ (8007068 <shci_user_evt_proc+0x90>)
 8007044:	f000 f8f4 	bl	8007230 <LST_is_empty>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d107      	bne.n	800705e <shci_user_evt_proc+0x86>
 800704e:	4b07      	ldr	r3, [pc, #28]	@ (800706c <shci_user_evt_proc+0x94>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007056:	4804      	ldr	r0, [pc, #16]	@ (8007068 <shci_user_evt_proc+0x90>)
 8007058:	f7f9 fd8c 	bl	8000b74 <shci_notify_asynch_evt>
  }


  return;
 800705c:	bf00      	nop
 800705e:	bf00      	nop
}
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200000c0 	.word	0x200000c0
 800706c:	200000d0 	.word	0x200000d0
 8007070:	200003f0 	.word	0x200003f0

08007074 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60ba      	str	r2, [r7, #8]
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	4603      	mov	r3, r0
 8007080:	81fb      	strh	r3, [r7, #14]
 8007082:	460b      	mov	r3, r1
 8007084:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007086:	2000      	movs	r0, #0
 8007088:	f000 f868 	bl	800715c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <shci_send+0x78>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	89fa      	ldrh	r2, [r7, #14]
 8007092:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007096:	4b15      	ldr	r3, [pc, #84]	@ (80070ec <shci_send+0x78>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	7b7a      	ldrb	r2, [r7, #13]
 800709c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800709e:	4b13      	ldr	r3, [pc, #76]	@ (80070ec <shci_send+0x78>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	7b7a      	ldrb	r2, [r7, #13]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f002 fa17 	bl	80094dc <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80070ae:	4b10      	ldr	r3, [pc, #64]	@ (80070f0 <shci_send+0x7c>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80070b4:	4b0f      	ldr	r3, [pc, #60]	@ (80070f4 <shci_send+0x80>)
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2100      	movs	r1, #0
 80070ba:	2000      	movs	r0, #0
 80070bc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80070be:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80070c2:	f7f9 fd6e 	bl	8000ba2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0008 	add.w	r0, r3, #8
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <shci_send+0x78>)
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <shci_send+0x78>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	789b      	ldrb	r3, [r3, #2]
 80070d6:	3303      	adds	r3, #3
 80070d8:	461a      	mov	r2, r3
 80070da:	f002 f9ff 	bl	80094dc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80070de:	2001      	movs	r0, #1
 80070e0:	f000 f83c 	bl	800715c <Cmd_SetStatus>

  return;
 80070e4:	bf00      	nop
}
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200000cc 	.word	0x200000cc
 80070f0:	20000414 	.word	0x20000414
 80070f4:	200003f0 	.word	0x200003f0

080070f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007100:	4a10      	ldr	r2, [pc, #64]	@ (8007144 <TlInit+0x4c>)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007106:	4810      	ldr	r0, [pc, #64]	@ (8007148 <TlInit+0x50>)
 8007108:	f000 f882 	bl	8007210 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800710c:	2001      	movs	r0, #1
 800710e:	f000 f825 	bl	800715c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <TlInit+0x54>)
 8007114:	2201      	movs	r2, #1
 8007116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007118:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <TlInit+0x58>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <TlInit+0x5c>)
 8007126:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <TlInit+0x60>)
 800712a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800712c:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <TlInit+0x58>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f107 020c 	add.w	r2, r7, #12
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
  }

  return;
 8007138:	bf00      	nop
 800713a:	bf00      	nop
}
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200000cc 	.word	0x200000cc
 8007148:	200000c0 	.word	0x200000c0
 800714c:	200000d0 	.word	0x200000d0
 8007150:	200003f0 	.word	0x200003f0
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071c5 	.word	0x080071c5

0800715c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800716c:	4b0d      	ldr	r3, [pc, #52]	@ (80071a4 <Cmd_SetStatus+0x48>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007174:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <Cmd_SetStatus+0x48>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2000      	movs	r0, #0
 800717a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800717c:	4b0a      	ldr	r3, [pc, #40]	@ (80071a8 <Cmd_SetStatus+0x4c>)
 800717e:	2200      	movs	r2, #0
 8007180:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007182:	e00b      	b.n	800719c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007184:	4b08      	ldr	r3, [pc, #32]	@ (80071a8 <Cmd_SetStatus+0x4c>)
 8007186:	2201      	movs	r2, #1
 8007188:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800718a:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <Cmd_SetStatus+0x48>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007192:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <Cmd_SetStatus+0x48>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2001      	movs	r0, #1
 8007198:	4798      	blx	r3
  return;
 800719a:	bf00      	nop
 800719c:	bf00      	nop
}
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000410 	.word	0x20000410
 80071a8:	200000c8 	.word	0x200000c8

080071ac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80071b4:	2000      	movs	r0, #0
 80071b6:	f7f9 fce9 	bl	8000b8c <shci_cmd_resp_release>

  return;
 80071ba:	bf00      	nop
}
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4805      	ldr	r0, [pc, #20]	@ (80071e4 <TlUserEvtReceived+0x20>)
 80071d0:	f000 f876 	bl	80072c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80071d4:	4803      	ldr	r0, [pc, #12]	@ (80071e4 <TlUserEvtReceived+0x20>)
 80071d6:	f7f9 fccd 	bl	8000b74 <shci_notify_asynch_evt>

  return;
 80071da:	bf00      	nop
}
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200000c0 	.word	0x200000c0

080071e8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a05      	ldr	r2, [pc, #20]	@ (8007208 <shci_register_io_bus+0x20>)
 80071f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a04      	ldr	r2, [pc, #16]	@ (800720c <shci_register_io_bus+0x24>)
 80071fa:	611a      	str	r2, [r3, #16]

  return;
 80071fc:	bf00      	nop
}
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	08007795 	.word	0x08007795
 800720c:	080077e9 	.word	0x080077e9

08007210 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007238:	f3ef 8310 	mrs	r3, PRIMASK
 800723c:	60fb      	str	r3, [r7, #12]
  return(result);
 800723e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007242:	b672      	cpsid	i
}
 8007244:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d102      	bne.n	8007256 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007250:	2301      	movs	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
 8007254:	e001      	b.n	800725a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	75fb      	strb	r3, [r7, #23]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f383 8810 	msr	PRIMASK, r3
}
 8007264:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727e:	f3ef 8310 	mrs	r3, PRIMASK
 8007282:	60fb      	str	r3, [r7, #12]
  return(result);
 8007284:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007288:	b672      	cpsid	i
}
 800728a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ca:	f3ef 8310 	mrs	r3, PRIMASK
 80072ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80072d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072d4:	b672      	cpsid	i
}
 80072d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f383 8810 	msr	PRIMASK, r3
}
 80072fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007314:	f3ef 8310 	mrs	r3, PRIMASK
 8007318:	60fb      	str	r3, [r7, #12]
  return(result);
 800731a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800731c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800731e:	b672      	cpsid	i
}
 8007320:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6852      	ldr	r2, [r2, #4]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f383 8810 	msr	PRIMASK, r3
}
 8007340:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007358:	f3ef 8310 	mrs	r3, PRIMASK
 800735c:	60fb      	str	r3, [r7, #12]
  return(result);
 800735e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007362:	b672      	cpsid	i
}
 8007364:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ffca 	bl	800730c <LST_remove_node>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f383 8810 	msr	PRIMASK, r3
}
 8007382:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007384:	bf00      	nop
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return;
 8007390:	bf00      	nop
}
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  return;
 800739e:	bf00      	nop
}
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return;
 80073ac:	bf00      	nop
}
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80073b6:	b480      	push	{r7}
 80073b8:	af00      	add	r7, sp, #0
  return;
 80073ba:	bf00      	nop
}
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  return;
 80073c8:	bf00      	nop
}
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80073d2:	b480      	push	{r7}
 80073d4:	af00      	add	r7, sp, #0
  return;
 80073d6:	bf00      	nop
}
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return;
 80073e4:	bf00      	nop
}
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  return;
 80073f2:	bf00      	nop
}
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0
  return;
 8007400:	bf00      	nop
}
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800740a:	b480      	push	{r7}
 800740c:	af00      	add	r7, sp, #0
  return;
 800740e:	bf00      	nop
}
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  return;
 800741c:	bf00      	nop
}
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007426:	b480      	push	{r7}
 8007428:	af00      	add	r7, sp, #0
  return;
 800742a:	bf00      	nop
}
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  return;
 8007438:	bf00      	nop
}
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007442:	b480      	push	{r7}
 8007444:	af00      	add	r7, sp, #0
  return;
 8007446:	bf00      	nop
}
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  return;
 8007454:	bf00      	nop
}
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  return;
 8007462:	bf00      	nop
}
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return;
 8007470:	bf00      	nop
}
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007480:	4b04      	ldr	r3, [pc, #16]	@ (8007494 <SVCCTL_Init+0x18>)
 8007482:	2200      	movs	r2, #0
 8007484:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007486:	4b04      	ldr	r3, [pc, #16]	@ (8007498 <SVCCTL_Init+0x1c>)
 8007488:	2200      	movs	r2, #0
 800748a:	751a      	strb	r2, [r3, #20]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800748c:	f000 f806 	bl	800749c <SVCCTL_SvcInit>

  return;
 8007490:	bf00      	nop
}
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000088 	.word	0x20000088
 8007498:	200000a8 	.word	0x200000a8

0800749c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  BAS_Init();
 80074a0:	f7ff ff74 	bl	800738c <BAS_Init>

  BLS_Init();
 80074a4:	f7ff ff79 	bl	800739a <BLS_Init>

  CRS_STM_Init();
 80074a8:	f7ff ff7e 	bl	80073a8 <CRS_STM_Init>

  DIS_Init();
 80074ac:	f7ff ff83 	bl	80073b6 <DIS_Init>

  EDS_STM_Init();
 80074b0:	f7ff ff88 	bl	80073c4 <EDS_STM_Init>

  HIDS_Init();
 80074b4:	f7ff ff8d 	bl	80073d2 <HIDS_Init>

  HRS_Init();
 80074b8:	f7ff ff92 	bl	80073e0 <HRS_Init>

  HTS_Init();
 80074bc:	f7ff ff97 	bl	80073ee <HTS_Init>

  IAS_Init();
 80074c0:	f7ff ff9c 	bl	80073fc <IAS_Init>

  LLS_Init();
 80074c4:	f7ff ffa1 	bl	800740a <LLS_Init>

  TPS_Init();
 80074c8:	f7ff ffa6 	bl	8007418 <TPS_Init>

  MOTENV_STM_Init();
 80074cc:	f7ff ffab 	bl	8007426 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80074d0:	f7ff ffb0 	bl	8007434 <P2PS_STM_Init>

  ZDD_STM_Init();
 80074d4:	f7ff ffb5 	bl	8007442 <ZDD_STM_Init>

  OTAS_STM_Init();
 80074d8:	f7ff ffba 	bl	8007450 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80074dc:	f7ff ffc6 	bl	800746c <BVOPUS_STM_Init>

  MESH_Init();
 80074e0:	f7ff ffbd 	bl	800745e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80074e4:	f001 f97a 	bl	80087dc <SVCCTL_InitCustomSvc>
  
  return;
 80074e8:	bf00      	nop
}
 80074ea:	bd80      	pop	{r7, pc}

080074ec <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80074f4:	4b09      	ldr	r3, [pc, #36]	@ (800751c <SVCCTL_RegisterSvcHandler+0x30>)
 80074f6:	7f1b      	ldrb	r3, [r3, #28]
 80074f8:	4619      	mov	r1, r3
 80074fa:	4a08      	ldr	r2, [pc, #32]	@ (800751c <SVCCTL_RegisterSvcHandler+0x30>)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <SVCCTL_RegisterSvcHandler+0x30>)
 8007504:	7f1b      	ldrb	r3, [r3, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	b2da      	uxtb	r2, r3
 800750a:	4b04      	ldr	r3, [pc, #16]	@ (800751c <SVCCTL_RegisterSvcHandler+0x30>)
 800750c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800750e:	bf00      	nop
}
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000088 	.word	0x20000088

08007520 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3301      	adds	r3, #1
 800752c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2bff      	cmp	r3, #255	@ 0xff
 8007538:	d13f      	bne.n	80075ba <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3302      	adds	r3, #2
 800753e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800754a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800754e:	d132      	bne.n	80075b6 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007550:	2300      	movs	r3, #0
 8007552:	757b      	strb	r3, [r7, #21]
 8007554:	e00d      	b.n	8007572 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007556:	7d7b      	ldrb	r3, [r7, #21]
 8007558:	4a27      	ldr	r2, [pc, #156]	@ (80075f8 <SVCCTL_UserEvtRx+0xd8>)
 800755a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
 8007562:	4603      	mov	r3, r0
 8007564:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d108      	bne.n	800757e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800756c:	7d7b      	ldrb	r3, [r7, #21]
 800756e:	3301      	adds	r3, #1
 8007570:	757b      	strb	r3, [r7, #21]
 8007572:	4b21      	ldr	r3, [pc, #132]	@ (80075f8 <SVCCTL_UserEvtRx+0xd8>)
 8007574:	7f1b      	ldrb	r3, [r3, #28]
 8007576:	7d7a      	ldrb	r2, [r7, #21]
 8007578:	429a      	cmp	r2, r3
 800757a:	d3ec      	bcc.n	8007556 <SVCCTL_UserEvtRx+0x36>
 800757c:	e000      	b.n	8007580 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800757e:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8007580:	2300      	movs	r3, #0
 8007582:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8007584:	2300      	movs	r3, #0
 8007586:	757b      	strb	r3, [r7, #21]
 8007588:	e00d      	b.n	80075a6 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800758a:	7d7b      	ldrb	r3, [r7, #21]
 800758c:	4a1b      	ldr	r2, [pc, #108]	@ (80075fc <SVCCTL_UserEvtRx+0xdc>)
 800758e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80075a0:	7d7b      	ldrb	r3, [r7, #21]
 80075a2:	3301      	adds	r3, #1
 80075a4:	757b      	strb	r3, [r7, #21]
 80075a6:	4b15      	ldr	r3, [pc, #84]	@ (80075fc <SVCCTL_UserEvtRx+0xdc>)
 80075a8:	7d1b      	ldrb	r3, [r3, #20]
 80075aa:	7d7a      	ldrb	r2, [r7, #21]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d3ec      	bcc.n	800758a <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 80075b0:	e002      	b.n	80075b8 <SVCCTL_UserEvtRx+0x98>
              break;
 80075b2:	bf00      	nop
          break;
 80075b4:	e000      	b.n	80075b8 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 80075b6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80075b8:	e000      	b.n	80075bc <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 80075ba:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d00f      	beq.n	80075e2 <SVCCTL_UserEvtRx+0xc2>
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	dc10      	bgt.n	80075e8 <SVCCTL_UserEvtRx+0xc8>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <SVCCTL_UserEvtRx+0xb0>
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d006      	beq.n	80075dc <SVCCTL_UserEvtRx+0xbc>
 80075ce:	e00b      	b.n	80075e8 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fadb 	bl	8007b8c <SVCCTL_App_Notification>
 80075d6:	4603      	mov	r3, r0
 80075d8:	75bb      	strb	r3, [r7, #22]
      break;
 80075da:	e008      	b.n	80075ee <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80075dc:	2301      	movs	r3, #1
 80075de:	75bb      	strb	r3, [r7, #22]
      break;
 80075e0:	e005      	b.n	80075ee <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75bb      	strb	r3, [r7, #22]
      break;
 80075e6:	e002      	b.n	80075ee <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75bb      	strb	r3, [r7, #22]
      break;
 80075ec:	bf00      	nop
  }

  return (return_status);
 80075ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000088 	.word	0x20000088
 80075fc:	200000a8 	.word	0x200000a8

08007600 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007604:	f001 fc10 	bl	8008e28 <HW_IPCC_Enable>

  return;
 8007608:	bf00      	nop
}
 800760a:	bd80      	pop	{r7, pc}

0800760c <TL_Init>:


void TL_Init( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007610:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <TL_Init+0x48>)
 8007612:	4a11      	ldr	r2, [pc, #68]	@ (8007658 <TL_Init+0x4c>)
 8007614:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007616:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <TL_Init+0x48>)
 8007618:	4a10      	ldr	r2, [pc, #64]	@ (800765c <TL_Init+0x50>)
 800761a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800761c:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <TL_Init+0x48>)
 800761e:	4a10      	ldr	r2, [pc, #64]	@ (8007660 <TL_Init+0x54>)
 8007620:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007622:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <TL_Init+0x48>)
 8007624:	4a0f      	ldr	r2, [pc, #60]	@ (8007664 <TL_Init+0x58>)
 8007626:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007628:	4b0a      	ldr	r3, [pc, #40]	@ (8007654 <TL_Init+0x48>)
 800762a:	4a0f      	ldr	r2, [pc, #60]	@ (8007668 <TL_Init+0x5c>)
 800762c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800762e:	4b09      	ldr	r3, [pc, #36]	@ (8007654 <TL_Init+0x48>)
 8007630:	4a0e      	ldr	r2, [pc, #56]	@ (800766c <TL_Init+0x60>)
 8007632:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007634:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <TL_Init+0x48>)
 8007636:	4a0e      	ldr	r2, [pc, #56]	@ (8007670 <TL_Init+0x64>)
 8007638:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800763a:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <TL_Init+0x48>)
 800763c:	4a0d      	ldr	r2, [pc, #52]	@ (8007674 <TL_Init+0x68>)
 800763e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007640:	4b04      	ldr	r3, [pc, #16]	@ (8007654 <TL_Init+0x48>)
 8007642:	4a0d      	ldr	r2, [pc, #52]	@ (8007678 <TL_Init+0x6c>)
 8007644:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007646:	4b03      	ldr	r3, [pc, #12]	@ (8007654 <TL_Init+0x48>)
 8007648:	4a0c      	ldr	r2, [pc, #48]	@ (800767c <TL_Init+0x70>)
 800764a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800764c:	f001 fc00 	bl	8008e50 <HW_IPCC_Init>

  return;
 8007650:	bf00      	nop
}
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20030000 	.word	0x20030000
 8007658:	20030028 	.word	0x20030028
 800765c:	20030048 	.word	0x20030048
 8007660:	20030058 	.word	0x20030058
 8007664:	20030068 	.word	0x20030068
 8007668:	20030070 	.word	0x20030070
 800766c:	20030078 	.word	0x20030078
 8007670:	20030080 	.word	0x20030080
 8007674:	2003009c 	.word	0x2003009c
 8007678:	200300a0 	.word	0x200300a0
 800767c:	200300ac 	.word	0x200300ac

08007680 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800768c:	4811      	ldr	r0, [pc, #68]	@ (80076d4 <TL_BLE_Init+0x54>)
 800768e:	f7ff fdbf 	bl	8007210 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007692:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <TL_BLE_Init+0x58>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4a0c      	ldr	r2, [pc, #48]	@ (80076dc <TL_BLE_Init+0x5c>)
 80076ac:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4a08      	ldr	r2, [pc, #32]	@ (80076d4 <TL_BLE_Init+0x54>)
 80076b2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80076b4:	f001 fbe2 	bl	8008e7c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a08      	ldr	r2, [pc, #32]	@ (80076e0 <TL_BLE_Init+0x60>)
 80076be:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a07      	ldr	r2, [pc, #28]	@ (80076e4 <TL_BLE_Init+0x64>)
 80076c6:	6013      	str	r3, [r2, #0]

  return 0;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200300c8 	.word	0x200300c8
 80076d8:	20030000 	.word	0x20030000
 80076dc:	20030a58 	.word	0x20030a58
 80076e0:	20000420 	.word	0x20000420
 80076e4:	20000424 	.word	0x20000424

080076e8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80076f4:	4b09      	ldr	r3, [pc, #36]	@ (800771c <TL_BLE_SendCmd+0x34>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2201      	movs	r2, #1
 80076fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80076fe:	4b07      	ldr	r3, [pc, #28]	@ (800771c <TL_BLE_SendCmd+0x34>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	2001      	movs	r0, #1
 8007708:	f000 f96c 	bl	80079e4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800770c:	f001 fbc0 	bl	8008e90 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20030000 	.word	0x20030000

08007720 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007726:	e01c      	b.n	8007762 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007728:	1d3b      	adds	r3, r7, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4812      	ldr	r0, [pc, #72]	@ (8007778 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800772e:	f7ff fe0e 	bl	800734e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7a5b      	ldrb	r3, [r3, #9]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d003      	beq.n	8007742 <HW_IPCC_BLE_RxEvtNot+0x22>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7a5b      	ldrb	r3, [r3, #9]
 800773e:	2b0e      	cmp	r3, #14
 8007740:	d105      	bne.n	800774e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4619      	mov	r1, r3
 8007746:	2002      	movs	r0, #2
 8007748:	f000 f94c 	bl	80079e4 <OutputDbgTrace>
 800774c:	e004      	b.n	8007758 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4619      	mov	r1, r3
 8007752:	2003      	movs	r0, #3
 8007754:	f000 f946 	bl	80079e4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007758:	4b08      	ldr	r3, [pc, #32]	@ (800777c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4610      	mov	r0, r2
 8007760:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007762:	4805      	ldr	r0, [pc, #20]	@ (8007778 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007764:	f7ff fd64 	bl	8007230 <LST_is_empty>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0dc      	beq.n	8007728 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800776e:	bf00      	nop
}
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	200300c8 	.word	0x200300c8
 800777c:	20000420 	.word	0x20000420

08007780 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007784:	4b02      	ldr	r3, [pc, #8]	@ (8007790 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4798      	blx	r3

  return;
 800778a:	bf00      	nop
}
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000424 	.word	0x20000424

08007794 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80077a0:	480d      	ldr	r0, [pc, #52]	@ (80077d8 <TL_SYS_Init+0x44>)
 80077a2:	f7ff fd35 	bl	8007210 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80077a6:	4b0d      	ldr	r3, [pc, #52]	@ (80077dc <TL_SYS_Init+0x48>)
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4a08      	ldr	r2, [pc, #32]	@ (80077d8 <TL_SYS_Init+0x44>)
 80077b8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80077ba:	f001 fb8b 	bl	8008ed4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a07      	ldr	r2, [pc, #28]	@ (80077e0 <TL_SYS_Init+0x4c>)
 80077c4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	4a06      	ldr	r2, [pc, #24]	@ (80077e4 <TL_SYS_Init+0x50>)
 80077cc:	6013      	str	r3, [r2, #0]

  return 0;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200300d0 	.word	0x200300d0
 80077dc:	20030000 	.word	0x20030000
 80077e0:	20000428 	.word	0x20000428
 80077e4:	2000042c 	.word	0x2000042c

080077e8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80077f4:	4b09      	ldr	r3, [pc, #36]	@ (800781c <TL_SYS_SendCmd+0x34>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2210      	movs	r2, #16
 80077fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80077fe:	4b07      	ldr	r3, [pc, #28]	@ (800781c <TL_SYS_SendCmd+0x34>)
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4619      	mov	r1, r3
 8007806:	2004      	movs	r0, #4
 8007808:	f000 f8ec 	bl	80079e4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800780c:	f001 fb6c 	bl	8008ee8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20030000 	.word	0x20030000

08007820 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007824:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4619      	mov	r1, r3
 800782c:	2005      	movs	r0, #5
 800782e:	f000 f8d9 	bl	80079e4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007832:	4b05      	ldr	r3, [pc, #20]	@ (8007848 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a03      	ldr	r2, [pc, #12]	@ (8007844 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007838:	68d2      	ldr	r2, [r2, #12]
 800783a:	6812      	ldr	r2, [r2, #0]
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3

  return;
 8007840:	bf00      	nop
}
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20030000 	.word	0x20030000
 8007848:	20000428 	.word	0x20000428

0800784c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007852:	e00e      	b.n	8007872 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	4619      	mov	r1, r3
 8007858:	480b      	ldr	r0, [pc, #44]	@ (8007888 <HW_IPCC_SYS_EvtNot+0x3c>)
 800785a:	f7ff fd78 	bl	800734e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4619      	mov	r1, r3
 8007862:	2006      	movs	r0, #6
 8007864:	f000 f8be 	bl	80079e4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007868:	4b08      	ldr	r3, [pc, #32]	@ (800788c <HW_IPCC_SYS_EvtNot+0x40>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4610      	mov	r0, r2
 8007870:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007872:	4805      	ldr	r0, [pc, #20]	@ (8007888 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007874:	f7ff fcdc 	bl	8007230 <LST_is_empty>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0ea      	beq.n	8007854 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800787e:	bf00      	nop
}
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200300d0 	.word	0x200300d0
 800788c:	2000042c 	.word	0x2000042c

08007890 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007898:	4817      	ldr	r0, [pc, #92]	@ (80078f8 <TL_MM_Init+0x68>)
 800789a:	f7ff fcb9 	bl	8007210 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800789e:	4817      	ldr	r0, [pc, #92]	@ (80078fc <TL_MM_Init+0x6c>)
 80078a0:	f7ff fcb6 	bl	8007210 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80078a4:	4b16      	ldr	r3, [pc, #88]	@ (8007900 <TL_MM_Init+0x70>)
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	4a16      	ldr	r2, [pc, #88]	@ (8007904 <TL_MM_Init+0x74>)
 80078aa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80078ac:	4b15      	ldr	r3, [pc, #84]	@ (8007904 <TL_MM_Init+0x74>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6892      	ldr	r2, [r2, #8]
 80078b4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80078b6:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <TL_MM_Init+0x74>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68d2      	ldr	r2, [r2, #12]
 80078be:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80078c0:	4b10      	ldr	r3, [pc, #64]	@ (8007904 <TL_MM_Init+0x74>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0c      	ldr	r2, [pc, #48]	@ (80078f8 <TL_MM_Init+0x68>)
 80078c6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007904 <TL_MM_Init+0x74>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80078d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007904 <TL_MM_Init+0x74>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6852      	ldr	r2, [r2, #4]
 80078da:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80078dc:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <TL_MM_Init+0x74>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6912      	ldr	r2, [r2, #16]
 80078e4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80078e6:	4b07      	ldr	r3, [pc, #28]	@ (8007904 <TL_MM_Init+0x74>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6952      	ldr	r2, [r2, #20]
 80078ee:	619a      	str	r2, [r3, #24]

  return;
 80078f0:	bf00      	nop
}
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	200300b8 	.word	0x200300b8
 80078fc:	20000418 	.word	0x20000418
 8007900:	20030000 	.word	0x20030000
 8007904:	20000430 	.word	0x20000430

08007908 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4807      	ldr	r0, [pc, #28]	@ (8007930 <TL_MM_EvtDone+0x28>)
 8007914:	f7ff fcd4 	bl	80072c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	2000      	movs	r0, #0
 800791c:	f000 f862 	bl	80079e4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007920:	4804      	ldr	r0, [pc, #16]	@ (8007934 <TL_MM_EvtDone+0x2c>)
 8007922:	f001 fb07 	bl	8008f34 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007926:	bf00      	nop
}
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000418 	.word	0x20000418
 8007934:	08007939 	.word	0x08007939

08007938 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800793e:	e00c      	b.n	800795a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007940:	1d3b      	adds	r3, r7, #4
 8007942:	4619      	mov	r1, r3
 8007944:	480a      	ldr	r0, [pc, #40]	@ (8007970 <SendFreeBuf+0x38>)
 8007946:	f7ff fd02 	bl	800734e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800794a:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <SendFreeBuf+0x3c>)
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	4611      	mov	r1, r2
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff fcb3 	bl	80072c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800795a:	4805      	ldr	r0, [pc, #20]	@ (8007970 <SendFreeBuf+0x38>)
 800795c:	f7ff fc68 	bl	8007230 <LST_is_empty>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0ec      	beq.n	8007940 <SendFreeBuf+0x8>
  }

  return;
 8007966:	bf00      	nop
}
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000418 	.word	0x20000418
 8007974:	20030000 	.word	0x20030000

08007978 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800797c:	4805      	ldr	r0, [pc, #20]	@ (8007994 <TL_TRACES_Init+0x1c>)
 800797e:	f7ff fc47 	bl	8007210 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007982:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <TL_TRACES_Init+0x20>)
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	4a03      	ldr	r2, [pc, #12]	@ (8007994 <TL_TRACES_Init+0x1c>)
 8007988:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800798a:	f001 fb09 	bl	8008fa0 <HW_IPCC_TRACES_Init>

  return;
 800798e:	bf00      	nop
}
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	200300c0 	.word	0x200300c0
 8007998:	20030000 	.word	0x20030000

0800799c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80079a2:	e008      	b.n	80079b6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80079a4:	1d3b      	adds	r3, r7, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4808      	ldr	r0, [pc, #32]	@ (80079cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80079aa:	f7ff fcd0 	bl	800734e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f80d 	bl	80079d0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80079b6:	4805      	ldr	r0, [pc, #20]	@ (80079cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80079b8:	f7ff fc3a 	bl	8007230 <LST_is_empty>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f0      	beq.n	80079a4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80079c2:	bf00      	nop
}
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200300c0 	.word	0x200300c0

080079d0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	2b06      	cmp	r3, #6
 80079f4:	d845      	bhi.n	8007a82 <OutputDbgTrace+0x9e>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <OutputDbgTrace+0x18>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a19 	.word	0x08007a19
 8007a00:	08007a3d 	.word	0x08007a3d
 8007a04:	08007a43 	.word	0x08007a43
 8007a08:	08007a57 	.word	0x08007a57
 8007a0c:	08007a63 	.word	0x08007a63
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a77 	.word	0x08007a77
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	7a5b      	ldrb	r3, [r3, #9]
 8007a20:	2bff      	cmp	r3, #255	@ 0xff
 8007a22:	d005      	beq.n	8007a30 <OutputDbgTrace+0x4c>
 8007a24:	2bff      	cmp	r3, #255	@ 0xff
 8007a26:	dc05      	bgt.n	8007a34 <OutputDbgTrace+0x50>
 8007a28:	2b0e      	cmp	r3, #14
 8007a2a:	d005      	beq.n	8007a38 <OutputDbgTrace+0x54>
 8007a2c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007a2e:	e001      	b.n	8007a34 <OutputDbgTrace+0x50>
          break;
 8007a30:	bf00      	nop
 8007a32:	e027      	b.n	8007a84 <OutputDbgTrace+0xa0>
          break;
 8007a34:	bf00      	nop
 8007a36:	e025      	b.n	8007a84 <OutputDbgTrace+0xa0>
          break;
 8007a38:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007a3a:	e023      	b.n	8007a84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007a40:	e020      	b.n	8007a84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	7a5b      	ldrb	r3, [r3, #9]
 8007a4a:	2b0e      	cmp	r3, #14
 8007a4c:	d001      	beq.n	8007a52 <OutputDbgTrace+0x6e>
 8007a4e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007a50:	e000      	b.n	8007a54 <OutputDbgTrace+0x70>
          break;
 8007a52:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a54:	e016      	b.n	8007a84 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	7a5b      	ldrb	r3, [r3, #9]
 8007a5e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a60:	e010      	b.n	8007a84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007a66:	e00d      	b.n	8007a84 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007a72:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a74:	e006      	b.n	8007a84 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	7a5b      	ldrb	r3, [r3, #9]
 8007a7e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007a80:	e000      	b.n	8007a84 <OutputDbgTrace+0xa0>

    default:
      break;
 8007a82:	bf00      	nop
  }

  return;
 8007a84:	bf00      	nop
}
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007a94:	4b03      	ldr	r3, [pc, #12]	@ (8007aa4 <LL_FLASH_GetUDN+0x14>)
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	1fff7580 	.word	0x1fff7580

08007aa8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007aac:	4b03      	ldr	r3, [pc, #12]	@ (8007abc <LL_FLASH_GetDeviceID+0x14>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	1fff7584 	.word	0x1fff7584

08007ac0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007ac4:	4b03      	ldr	r3, [pc, #12]	@ (8007ad4 <LL_FLASH_GetSTCompanyID+0x14>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	0a1b      	lsrs	r3, r3, #8
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	1fff7584 	.word	0x1fff7584

08007ad8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007ad8:	b5b0      	push	{r4, r5, r7, lr}
 8007ada:	b090      	sub	sp, #64	@ 0x40
 8007adc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ade:	2392      	movs	r3, #146	@ 0x92
 8007ae0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007ae4:	4b25      	ldr	r3, [pc, #148]	@ (8007b7c <APP_BLE_Init+0xa4>)
 8007ae6:	1d3c      	adds	r4, r7, #4
 8007ae8:	461d      	mov	r5, r3
 8007aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007afa:	c403      	stmia	r4!, {r0, r1}
 8007afc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007afe:	f000 f921 	bl	8007d44 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007b02:	2101      	movs	r1, #1
 8007b04:	2002      	movs	r0, #2
 8007b06:	f001 fa73 	bl	8008ff0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007b80 <APP_BLE_Init+0xa8>)
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	2002      	movs	r0, #2
 8007b10:	f001 fb9a 	bl	8009248 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff f950 	bl	8006dbc <SHCI_C2_BLE_Init>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007b22:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007b2a:	f7fa f983 	bl	8001e34 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007b2e:	f000 f91f 	bl	8007d70 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007b32:	f7ff fca3 	bl	800747c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007b36:	4b13      	ldr	r3, [pc, #76]	@ (8007b84 <APP_BLE_Init+0xac>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007b3e:	4b11      	ldr	r3, [pc, #68]	@ (8007b84 <APP_BLE_Init+0xac>)
 8007b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b44:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007b46:	4a10      	ldr	r2, [pc, #64]	@ (8007b88 <APP_BLE_Init+0xb0>)
 8007b48:	2100      	movs	r1, #0
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	f001 fb7c 	bl	8009248 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007b50:	2006      	movs	r0, #6
 8007b52:	f7fe fe59 	bl	8006808 <aci_hal_set_radio_activity_mask>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007b5c:	f000 fb32 	bl	80081c4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007b60:	4b08      	ldr	r3, [pc, #32]	@ (8007b84 <APP_BLE_Init+0xac>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007b66:	4b07      	ldr	r3, [pc, #28]	@ (8007b84 <APP_BLE_Init+0xac>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f000 f9b3 	bl	8007ed8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007b72:	bf00      	nop
}
 8007b74:	3740      	adds	r7, #64	@ 0x40
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08009558 	.word	0x08009558
 8007b80:	08006a2d 	.word	0x08006a2d
 8007b84:	2000043c 	.word	0x2000043c
 8007b88:	08007fc1 	.word	0x08007fc1

08007b8c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	@ 0x30
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007b94:	2392      	movs	r3, #146	@ 0x92
 8007b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2bff      	cmp	r3, #255	@ 0xff
 8007ba6:	d05c      	beq.n	8007c62 <SVCCTL_App_Notification+0xd6>
 8007ba8:	2bff      	cmp	r3, #255	@ 0xff
 8007baa:	f300 80bd 	bgt.w	8007d28 <SVCCTL_App_Notification+0x19c>
 8007bae:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bb0:	d02b      	beq.n	8007c0a <SVCCTL_App_Notification+0x7e>
 8007bb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bb4:	f300 80b8 	bgt.w	8007d28 <SVCCTL_App_Notification+0x19c>
 8007bb8:	2b05      	cmp	r3, #5
 8007bba:	d002      	beq.n	8007bc2 <SVCCTL_App_Notification+0x36>
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d020      	beq.n	8007c02 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007bc0:	e0b2      	b.n	8007d28 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	4b59      	ldr	r3, [pc, #356]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007bd2:	8adb      	ldrh	r3, [r3, #22]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d106      	bne.n	8007be6 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007bd8:	4b57      	ldr	r3, [pc, #348]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007bde:	4b56      	ldr	r3, [pc, #344]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007be6:	2001      	movs	r0, #1
 8007be8:	f000 f976 	bl	8007ed8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007bec:	4b53      	ldr	r3, [pc, #332]	@ (8007d3c <SVCCTL_App_Notification+0x1b0>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007bf2:	4b51      	ldr	r3, [pc, #324]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007bf4:	8ada      	ldrh	r2, [r3, #22]
 8007bf6:	4b51      	ldr	r3, [pc, #324]	@ (8007d3c <SVCCTL_App_Notification+0x1b0>)
 8007bf8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007bfa:	4850      	ldr	r0, [pc, #320]	@ (8007d3c <SVCCTL_App_Notification+0x1b0>)
 8007bfc:	f000 fab8 	bl	8008170 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007c00:	e095      	b.n	8007d2e <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8007c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c04:	3302      	adds	r3, #2
 8007c06:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8007c08:	e091      	b.n	8007d2e <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d001      	beq.n	8007c1c <SVCCTL_App_Notification+0x90>
 8007c18:	2b03      	cmp	r3, #3
          break;
 8007c1a:	e021      	b.n	8007c60 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007c22:	4b45      	ldr	r3, [pc, #276]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007c24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d104      	bne.n	8007c36 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007c2c:	4b42      	ldr	r3, [pc, #264]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007c2e:	2206      	movs	r2, #6
 8007c30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007c34:	e003      	b.n	8007c3e <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007c36:	4b40      	ldr	r3, [pc, #256]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007c38:	2205      	movs	r2, #5
 8007c3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	4b3c      	ldr	r3, [pc, #240]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007c48:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8007d3c <SVCCTL_App_Notification+0x1b0>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007c50:	4b39      	ldr	r3, [pc, #228]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007c52:	8ada      	ldrh	r2, [r3, #22]
 8007c54:	4b39      	ldr	r3, [pc, #228]	@ (8007d3c <SVCCTL_App_Notification+0x1b0>)
 8007c56:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007c58:	4838      	ldr	r0, [pc, #224]	@ (8007d3c <SVCCTL_App_Notification+0x1b0>)
 8007c5a:	f000 fa89 	bl	8008170 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007c5e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007c60:	e065      	b.n	8007d2e <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c64:	3302      	adds	r3, #2
 8007c66:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d048      	beq.n	8007d08 <SVCCTL_App_Notification+0x17c>
 8007c76:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	dc56      	bgt.n	8007d2c <SVCCTL_App_Notification+0x1a0>
 8007c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c82:	d04b      	beq.n	8007d1c <SVCCTL_App_Notification+0x190>
 8007c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c88:	dc50      	bgt.n	8007d2c <SVCCTL_App_Notification+0x1a0>
 8007c8a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	dc4c      	bgt.n	8007d2c <SVCCTL_App_Notification+0x1a0>
 8007c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c96:	dc04      	bgt.n	8007ca2 <SVCCTL_App_Notification+0x116>
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d041      	beq.n	8007d20 <SVCCTL_App_Notification+0x194>
 8007c9c:	2b06      	cmp	r3, #6
 8007c9e:	d039      	beq.n	8007d14 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007ca0:	e044      	b.n	8007d2c <SVCCTL_App_Notification+0x1a0>
 8007ca2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d840      	bhi.n	8007d2c <SVCCTL_App_Notification+0x1a0>
 8007caa:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <SVCCTL_App_Notification+0x124>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007d01 	.word	0x08007d01
 8007cb4:	08007cd9 	.word	0x08007cd9
 8007cb8:	08007d2d 	.word	0x08007d2d
 8007cbc:	08007d2d 	.word	0x08007d2d
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007d2d 	.word	0x08007d2d
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d2d 	.word	0x08007d2d
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007d25 	.word	0x08007d25
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007cd8:	4b17      	ldr	r3, [pc, #92]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007cda:	8adb      	ldrh	r3, [r3, #22]
 8007cdc:	4918      	ldr	r1, [pc, #96]	@ (8007d40 <SVCCTL_App_Notification+0x1b4>)
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd fe7c 	bl	80059dc <aci_gap_pass_key_resp>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007cea:	e01c      	b.n	8007d26 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007cee:	8adb      	ldrh	r3, [r3, #22]
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe f81c 	bl	8005d30 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007cfe:	e012      	b.n	8007d26 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	3302      	adds	r3, #2
 8007d04:	623b      	str	r3, [r7, #32]
          break;
 8007d06:	e00e      	b.n	8007d26 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007d08:	4b0b      	ldr	r3, [pc, #44]	@ (8007d38 <SVCCTL_App_Notification+0x1ac>)
 8007d0a:	8adb      	ldrh	r3, [r3, #22]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fb22 	bl	8006356 <aci_gatt_confirm_indication>
        break;
 8007d12:	e008      	b.n	8007d26 <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	3302      	adds	r3, #2
 8007d18:	61fb      	str	r3, [r7, #28]
          break;
 8007d1a:	e004      	b.n	8007d26 <SVCCTL_App_Notification+0x19a>
          break;
 8007d1c:	bf00      	nop
 8007d1e:	e005      	b.n	8007d2c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007d20:	bf00      	nop
 8007d22:	e003      	b.n	8007d2c <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007d24:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d26:	e001      	b.n	8007d2c <SVCCTL_App_Notification+0x1a0>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d2c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007d2e:	2301      	movs	r3, #1
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3730      	adds	r7, #48	@ 0x30
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	2000043c 	.word	0x2000043c
 8007d3c:	200004c0 	.word	0x200004c0
 8007d40:	0001b207 	.word	0x0001b207

08007d44 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007d4a:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <Ble_Tl_Init+0x20>)
 8007d4c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007d4e:	4b06      	ldr	r3, [pc, #24]	@ (8007d68 <Ble_Tl_Init+0x24>)
 8007d50:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007d52:	463b      	mov	r3, r7
 8007d54:	4619      	mov	r1, r3
 8007d56:	4805      	ldr	r0, [pc, #20]	@ (8007d6c <Ble_Tl_Init+0x28>)
 8007d58:	f7fe fe4c 	bl	80069f4 <hci_init>

  return;
 8007d5c:	bf00      	nop
}
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	200300d8 	.word	0x200300d8
 8007d68:	08008071 	.word	0x08008071
 8007d6c:	08008039 	.word	0x08008039

08007d70 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d72:	b08d      	sub	sp, #52	@ 0x34
 8007d74:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007d76:	2300      	movs	r3, #0
 8007d78:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007d7a:	2392      	movs	r3, #146	@ 0x92
 8007d7c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007d7e:	f7fe fd97 	bl	80068b0 <hci_reset>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007d86:	f000 f8d7 	bl	8007f38 <BleGetBdAddress>
 8007d8a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	2106      	movs	r1, #6
 8007d90:	2000      	movs	r0, #0
 8007d92:	f7fe fc4d 	bl	8006630 <aci_hal_write_config_data>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007d9a:	4a4a      	ldr	r2, [pc, #296]	@ (8007ec4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007d9c:	2110      	movs	r1, #16
 8007d9e:	2018      	movs	r0, #24
 8007da0:	f7fe fc46 	bl	8006630 <aci_hal_write_config_data>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007da8:	4a47      	ldr	r2, [pc, #284]	@ (8007ec8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007daa:	2110      	movs	r1, #16
 8007dac:	2008      	movs	r0, #8
 8007dae:	f7fe fc3f 	bl	8006630 <aci_hal_write_config_data>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007db6:	2118      	movs	r1, #24
 8007db8:	2001      	movs	r0, #1
 8007dba:	f7fe fcbe 	bl	800673a <aci_hal_set_tx_power_level>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007dc2:	f7fe f81c 	bl	8005dfe <aci_gatt_init>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01f      	beq.n	8007e1c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8007ecc <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007dde:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007de0:	1dba      	adds	r2, r7, #6
 8007de2:	7bf8      	ldrb	r0, [r7, #15]
 8007de4:	1cbb      	adds	r3, r7, #2
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4613      	mov	r3, r2
 8007dee:	2208      	movs	r2, #8
 8007df0:	2100      	movs	r1, #0
 8007df2:	f7fd fe5a 	bl	8005aaa <aci_gap_init>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007dfa:	88fc      	ldrh	r4, [r7, #6]
 8007dfc:	88bd      	ldrh	r5, [r7, #4]
 8007dfe:	68b8      	ldr	r0, [r7, #8]
 8007e00:	f7f8 f9bc 	bl	800017c <strlen>
 8007e04:	4603      	mov	r3, r0
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	2200      	movs	r2, #0
 8007e10:	4629      	mov	r1, r5
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7fe f9f6 	bl	8006204 <aci_gatt_update_char_value>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007e1c:	88f8      	ldrh	r0, [r7, #6]
 8007e1e:	8879      	ldrh	r1, [r7, #2]
 8007e20:	463b      	mov	r3, r7
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2302      	movs	r3, #2
 8007e26:	2200      	movs	r2, #0
 8007e28:	f7fe f9ec 	bl	8006204 <aci_gatt_update_char_value>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007e30:	2202      	movs	r2, #2
 8007e32:	2102      	movs	r1, #2
 8007e34:	2000      	movs	r0, #0
 8007e36:	f7fe fd5f 	bl	80068f8 <hci_le_set_default_phy>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007e3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007e44:	4b22      	ldr	r3, [pc, #136]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fd fcaf 	bl	80057ac <aci_gap_set_io_capability>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007e52:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007e58:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e60:	2210      	movs	r2, #16
 8007e62:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007e64:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007e6a:	4b19      	ldr	r3, [pc, #100]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e6c:	4a19      	ldr	r2, [pc, #100]	@ (8007ed4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007e6e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007e70:	4b17      	ldr	r3, [pc, #92]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007e76:	4b16      	ldr	r3, [pc, #88]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e78:	789c      	ldrb	r4, [r3, #2]
 8007e7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e7c:	785d      	ldrb	r5, [r3, #1]
 8007e7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	4a13      	ldr	r2, [pc, #76]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e84:	7952      	ldrb	r2, [r2, #5]
 8007e86:	4912      	ldr	r1, [pc, #72]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e88:	78c9      	ldrb	r1, [r1, #3]
 8007e8a:	4811      	ldr	r0, [pc, #68]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e8c:	6880      	ldr	r0, [r0, #8]
 8007e8e:	2600      	movs	r6, #0
 8007e90:	9604      	str	r6, [sp, #16]
 8007e92:	9003      	str	r0, [sp, #12]
 8007e94:	9102      	str	r1, [sp, #8]
 8007e96:	9201      	str	r2, [sp, #4]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7fd fcd7 	bl	8005854 <aci_gap_set_authentication_requirement>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007eaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ed0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007eac:	789b      	ldrb	r3, [r3, #2]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007eb2:	f7fd ff19 	bl	8005ce8 <aci_gap_configure_filter_accept_list>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08009758 	.word	0x08009758
 8007ec8:	08009768 	.word	0x08009768
 8007ecc:	08009594 	.word	0x08009594
 8007ed0:	2000043c 	.word	0x2000043c
 8007ed4:	0001b207 	.word	0x0001b207

08007ed8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08c      	sub	sp, #48	@ 0x30
 8007edc:	af08      	add	r7, sp, #32
 8007ede:	4603      	mov	r3, r0
 8007ee0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ee2:	2392      	movs	r3, #146	@ 0x92
 8007ee4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007ee6:	4a12      	ldr	r2, [pc, #72]	@ (8007f30 <Adv_Request+0x58>)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9306      	str	r3, [sp, #24]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9303      	str	r3, [sp, #12]
 8007efe:	2300      	movs	r3, #0
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	2300      	movs	r3, #0
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	22a0      	movs	r2, #160	@ 0xa0
 8007f0e:	2180      	movs	r1, #128	@ 0x80
 8007f10:	2000      	movs	r0, #0
 8007f12:	f7fd fb51 	bl	80055b8 <aci_gap_set_discoverable>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007f1a:	4906      	ldr	r1, [pc, #24]	@ (8007f34 <Adv_Request+0x5c>)
 8007f1c:	2015      	movs	r0, #21
 8007f1e:	f7fd fe71 	bl	8005c04 <aci_gap_update_adv_data>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007f26:	bf00      	nop
}
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	2000043c 	.word	0x2000043c
 8007f34:	20000050 	.word	0x20000050

08007f38 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007f3e:	f7ff fda7 	bl	8007a90 <LL_FLASH_GetUDN>
 8007f42:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4a:	d023      	beq.n	8007f94 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007f4c:	f7ff fdb8 	bl	8007ac0 <LL_FLASH_GetSTCompanyID>
 8007f50:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007f52:	f7ff fda9 	bl	8007aa8 <LL_FLASH_GetDeviceID>
 8007f56:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	4b16      	ldr	r3, [pc, #88]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f5e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f68:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4b12      	ldr	r3, [pc, #72]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f70:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4b10      	ldr	r3, [pc, #64]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f78:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	0a1b      	lsrs	r3, r3, #8
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f82:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f8c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb8 <BleGetBdAddress+0x80>)
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e00b      	b.n	8007fac <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007f94:	2000      	movs	r0, #0
 8007f96:	f7fe fee9 	bl	8006d6c <OTP_Read>
 8007f9a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e001      	b.n	8007fac <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007fa8:	4b04      	ldr	r3, [pc, #16]	@ (8007fbc <BleGetBdAddress+0x84>)
 8007faa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007fac:	697b      	ldr	r3, [r7, #20]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000434 	.word	0x20000434
 8007fbc:	08009750 	.word	0x08009750

08007fc0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff0 <Adv_Cancel+0x30>)
 8007fc8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d00a      	beq.n	8007fe6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007fd0:	2392      	movs	r3, #146	@ 0x92
 8007fd2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007fd4:	f7fd facc 	bl	8005570 <aci_gap_set_non_discoverable>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007fdc:	4b04      	ldr	r3, [pc, #16]	@ (8007ff0 <Adv_Cancel+0x30>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
}
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	2000043c 	.word	0x2000043c

08007ff4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	2002      	movs	r0, #2
 8008000:	f001 f944 	bl	800928c <UTIL_SEQ_SetTask>

  return;
 8008004:	bf00      	nop
}
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008014:	2001      	movs	r0, #1
 8008016:	f001 f9a5 	bl	8009364 <UTIL_SEQ_SetEvt>

  return;
 800801a:	bf00      	nop
}
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800802a:	2001      	movs	r0, #1
 800802c:	f001 f9ba 	bl	80093a4 <UTIL_SEQ_WaitEvt>

  return;
 8008030:	bf00      	nop
}
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	3308      	adds	r3, #8
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fa68 	bl	8007520 <SVCCTL_UserEvtRx>
 8008050:	4603      	mov	r3, r0
 8008052:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008060:	e003      	b.n	800806a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	701a      	strb	r2, [r3, #0]
  return;
 8008068:	bf00      	nop
}
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <BLE_StatusNot+0x16>
 8008080:	2b01      	cmp	r3, #1
 8008082:	d006      	beq.n	8008092 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008084:	e00b      	b.n	800809e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008086:	2303      	movs	r3, #3
 8008088:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f001 f92a 	bl	80092e4 <UTIL_SEQ_PauseTask>
      break;
 8008090:	e005      	b.n	800809e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008092:	2303      	movs	r3, #3
 8008094:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f001 f944 	bl	8009324 <UTIL_SEQ_ResumeTask>
      break;
 800809c:	bf00      	nop
  }

  return;
 800809e:	bf00      	nop
}
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <Custom_STM_App_Notification>:
static void Custom_Fast_Send_Notification(void);  // Added for 0.3s timer
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b15      	cmp	r3, #21
 80080b6:	d850      	bhi.n	800815a <Custom_STM_App_Notification+0xb2>
 80080b8:	a201      	add	r2, pc, #4	@ (adr r2, 80080c0 <Custom_STM_App_Notification+0x18>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	0800815b 	.word	0x0800815b
 80080c4:	0800815b 	.word	0x0800815b
 80080c8:	0800815b 	.word	0x0800815b
 80080cc:	08008119 	.word	0x08008119
 80080d0:	08008127 	.word	0x08008127
 80080d4:	0800815b 	.word	0x0800815b
 80080d8:	0800815b 	.word	0x0800815b
 80080dc:	0800815b 	.word	0x0800815b
 80080e0:	0800815b 	.word	0x0800815b
 80080e4:	0800815b 	.word	0x0800815b
 80080e8:	08008135 	.word	0x08008135
 80080ec:	0800813d 	.word	0x0800813d
 80080f0:	0800815b 	.word	0x0800815b
 80080f4:	0800815b 	.word	0x0800815b
 80080f8:	0800815b 	.word	0x0800815b
 80080fc:	0800815b 	.word	0x0800815b
 8008100:	0800815b 	.word	0x0800815b
 8008104:	08008145 	.word	0x08008145
 8008108:	0800814d 	.word	0x0800814d
 800810c:	0800815b 	.word	0x0800815b
 8008110:	0800815b 	.word	0x0800815b
 8008114:	0800815b 	.word	0x0800815b
      /* USER CODE END CUSTOM_STM_BHW_WRITE_EVT */
      break;

    case CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT */
      Custom_App_Context.Bhw_Notification_Status = 1;
 8008118:	4b12      	ldr	r3, [pc, #72]	@ (8008164 <Custom_STM_App_Notification+0xbc>)
 800811a:	2201      	movs	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
      notification_allowed = 1;
 800811e:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <Custom_STM_App_Notification+0xc0>)
 8008120:	2201      	movs	r2, #1
 8008122:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT */
      break;
 8008124:	e01a      	b.n	800815c <Custom_STM_App_Notification+0xb4>

    case CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT */
      Custom_App_Context.Bhw_Notification_Status = 0;
 8008126:	4b0f      	ldr	r3, [pc, #60]	@ (8008164 <Custom_STM_App_Notification+0xbc>)
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
      notification_allowed = 0;
 800812c:	4b0e      	ldr	r3, [pc, #56]	@ (8008168 <Custom_STM_App_Notification+0xc0>)
 800812e:	2200      	movs	r2, #0
 8008130:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT */
      break;
 8008132:	e013      	b.n	800815c <Custom_STM_App_Notification+0xb4>
      /* USER CODE END CUSTOM_STM_BHR_WRITE_EVT */
      break;

    case CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT */
      Custom_App_Context.Bhr_Notification_Status = 1;
 8008134:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <Custom_STM_App_Notification+0xbc>)
 8008136:	2201      	movs	r2, #1
 8008138:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT */
      break;
 800813a:	e00f      	b.n	800815c <Custom_STM_App_Notification+0xb4>

    case CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT */
      Custom_App_Context.Bhr_Notification_Status = 0;
 800813c:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <Custom_STM_App_Notification+0xbc>)
 800813e:	2200      	movs	r2, #0
 8008140:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT */
      break;
 8008142:	e00b      	b.n	800815c <Custom_STM_App_Notification+0xb4>
      /* USER CODE END CUSTOM_STM_BHRV_WRITE_EVT */
      break;

    case CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT */
      Custom_App_Context.Bhrv_Notification_Status = 1;
 8008144:	4b07      	ldr	r3, [pc, #28]	@ (8008164 <Custom_STM_App_Notification+0xbc>)
 8008146:	2201      	movs	r2, #1
 8008148:	711a      	strb	r2, [r3, #4]

      /* USER CODE END CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT */
      break;
 800814a:	e007      	b.n	800815c <Custom_STM_App_Notification+0xb4>

    case CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT */
      Custom_App_Context.Bhrv_Notification_Status = 0;
 800814c:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <Custom_STM_App_Notification+0xbc>)
 800814e:	2200      	movs	r2, #0
 8008150:	711a      	strb	r2, [r3, #4]
      ADPD1080_LEDoff(&hi2c1);
 8008152:	4806      	ldr	r0, [pc, #24]	@ (800816c <Custom_STM_App_Notification+0xc4>)
 8008154:	f7f8 fa0a 	bl	800056c <ADPD1080_LEDoff>
      /* USER CODE END CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT */
      break;
 8008158:	e000      	b.n	800815c <Custom_STM_App_Notification+0xb4>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800815a:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800815c:	bf00      	nop
}
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	200004c4 	.word	0x200004c4
 8008168:	200006d3 	.word	0x200006d3
 800816c:	20000300 	.word	0x20000300

08008170 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <Custom_APP_Notification+0x16>
 8008180:	2b01      	cmp	r3, #1
 8008182:	d005      	beq.n	8008190 <Custom_APP_Notification+0x20>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008184:	e014      	b.n	80081b0 <Custom_APP_Notification+0x40>
      Custom_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	885a      	ldrh	r2, [r3, #2]
 800818a:	4b0c      	ldr	r3, [pc, #48]	@ (80081bc <Custom_APP_Notification+0x4c>)
 800818c:	811a      	strh	r2, [r3, #8]
      break;
 800818e:	e00f      	b.n	80081b0 <Custom_APP_Notification+0x40>
      Custom_App_Context.ConnectionHandle = 0;
 8008190:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <Custom_APP_Notification+0x4c>)
 8008192:	2200      	movs	r2, #0
 8008194:	811a      	strh	r2, [r3, #8]
      notification_allowed = 0;
 8008196:	4b0a      	ldr	r3, [pc, #40]	@ (80081c0 <Custom_APP_Notification+0x50>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
      Custom_App_Context.Bhw_Notification_Status = 0;
 800819c:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <Custom_APP_Notification+0x4c>)
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
      Custom_App_Context.Bhr_Notification_Status = 0;
 80081a2:	4b06      	ldr	r3, [pc, #24]	@ (80081bc <Custom_APP_Notification+0x4c>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	709a      	strb	r2, [r3, #2]
      Custom_App_Context.Bhrv_Notification_Status = 0;
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <Custom_APP_Notification+0x4c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	711a      	strb	r2, [r3, #4]
      break;
 80081ae:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80081b0:	bf00      	nop
}
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	200004c4 	.word	0x200004c4
 80081c0:	200006d3 	.word	0x200006d3

080081c4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
  // Initialize the NotifyCharData buffer
  NotifyCharData[0] = 0;
 80081c8:	4b16      	ldr	r3, [pc, #88]	@ (8008224 <Custom_APP_Init+0x60>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
  NotifyCharData[1] = 0;
 80081ce:	4b15      	ldr	r3, [pc, #84]	@ (8008224 <Custom_APP_Init+0x60>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	705a      	strb	r2, [r3, #1]

  // Register the BalodiHeart measurement task
  UTIL_SEQ_RegTask(1 << CFG_TASK_BHW_MEAS_REQ_ID, UTIL_SEQ_RFU, Custom_Bhw_Send_Notification);
 80081d4:	4a14      	ldr	r2, [pc, #80]	@ (8008228 <Custom_APP_Init+0x64>)
 80081d6:	2100      	movs	r1, #0
 80081d8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80081dc:	f001 f834 	bl	8009248 <UTIL_SEQ_RegTask>

  // Register the fast measurement task
  UTIL_SEQ_RegTask(1 << CFG_TASK_FAST_MEAS_REQ_ID, UTIL_SEQ_RFU, Custom_Fast_Send_Notification);
 80081e0:	4a12      	ldr	r2, [pc, #72]	@ (800822c <Custom_APP_Init+0x68>)
 80081e2:	2100      	movs	r1, #0
 80081e4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80081e8:	f001 f82e 	bl	8009248 <UTIL_SEQ_RegTask>

  // Create timer for BalodiHeart Measurement
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.TimerMeasurement_Id), hw_ts_Repeated, BhwMeas_PeriodicTask);
 80081ec:	4b10      	ldr	r3, [pc, #64]	@ (8008230 <Custom_APP_Init+0x6c>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	4910      	ldr	r1, [pc, #64]	@ (8008234 <Custom_APP_Init+0x70>)
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7f9 faa6 	bl	8001744 <HW_TS_Create>
  // Create timer for Fast Measurement (0.3s)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.FastTimerMeasurement_Id), hw_ts_Repeated, FastMeas_PeriodicTask);
 80081f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008238 <Custom_APP_Init+0x74>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	490f      	ldr	r1, [pc, #60]	@ (800823c <Custom_APP_Init+0x78>)
 80081fe:	2000      	movs	r0, #0
 8008200:	f7f9 faa0 	bl	8001744 <HW_TS_Create>

  // Start the timer to trigger measurements every 0.2 seconds
  HW_TS_Start(Custom_App_Context.TimerMeasurement_Id, SEC_TO_TICKS(0.2));
 8008204:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <Custom_APP_Init+0x7c>)
 8008206:	799b      	ldrb	r3, [r3, #6]
 8008208:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800820c:	4618      	mov	r0, r3
 800820e:	f7f9 fb97 	bl	8001940 <HW_TS_Start>
  // Start the fast timer to trigger every 5 seconds
  HW_TS_Start(Custom_App_Context.FastTimerMeasurement_Id, SEC_TO_TICKS(5));
 8008212:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <Custom_APP_Init+0x7c>)
 8008214:	79db      	ldrb	r3, [r3, #7]
 8008216:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800821a:	4618      	mov	r0, r3
 800821c:	f7f9 fb90 	bl	8001940 <HW_TS_Start>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008220:	bf00      	nop
}
 8008222:	bd80      	pop	{r7, pc}
 8008224:	200004d0 	.word	0x200004d0
 8008228:	08008245 	.word	0x08008245
 800822c:	08008459 	.word	0x08008459
 8008230:	08008435 	.word	0x08008435
 8008234:	200004ca 	.word	0x200004ca
 8008238:	08008447 	.word	0x08008447
 800823c:	200004cb 	.word	0x200004cb
 8008240:	200004c4 	.word	0x200004c4

08008244 <Custom_Bhw_Send_Notification>:
  /* USER CODE END Bhw_UC_Last*/
  return;
}

void Custom_Bhw_Send_Notification(void) /* Property Notification */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bhw_NS_1*/
	  // Only send notification if it's allowed (client has enabled notifications)
	  if (Custom_App_Context.Bhw_Notification_Status == 0)
 800824e:	4b3b      	ldr	r3, [pc, #236]	@ (800833c <Custom_Bhw_Send_Notification+0xf8>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <Custom_Bhw_Send_Notification+0x1a>
	  {
		  ADPD1080_LEDoff(&hi2c1);
 8008256:	483a      	ldr	r0, [pc, #232]	@ (8008340 <Custom_Bhw_Send_Notification+0xfc>)
 8008258:	f7f8 f988 	bl	800056c <ADPD1080_LEDoff>
	    return; // Exit if notifications are not enabled
 800825c:	e06a      	b.n	8008334 <Custom_Bhw_Send_Notification+0xf0>
	  }


	  Count++;
 800825e:	4b39      	ldr	r3, [pc, #228]	@ (8008344 <Custom_Bhw_Send_Notification+0x100>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	b2da      	uxtb	r2, r3
 8008266:	4b37      	ldr	r3, [pc, #220]	@ (8008344 <Custom_Bhw_Send_Notification+0x100>)
 8008268:	701a      	strb	r2, [r3, #0]
	  ADPD1080_Check_FIFO(&hi2c1);  // fetch new row
 800826a:	4835      	ldr	r0, [pc, #212]	@ (8008340 <Custom_Bhw_Send_Notification+0xfc>)
 800826c:	f7f8 f8dc 	bl	8000428 <ADPD1080_Check_FIFO>
	  ADPD1080_LEDon(&hi2c1);
 8008270:	4833      	ldr	r0, [pc, #204]	@ (8008340 <Custom_Bhw_Send_Notification+0xfc>)
 8008272:	f7f8 f9b0 	bl	80005d6 <ADPD1080_LEDon>
	  if (NewReading_Check==1){
 8008276:	4b34      	ldr	r3, [pc, #208]	@ (8008348 <Custom_Bhw_Send_Notification+0x104>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d143      	bne.n	8008306 <Custom_Bhw_Send_Notification+0xc2>
	    for (int i = 0; i < 7; i++) {  // 7 values per row
 800827e:	2300      	movs	r3, #0
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	e03d      	b.n	8008300 <Custom_Bhw_Send_Notification+0xbc>
	      NotifyCharData[Notifyindex++] = (adpd1080_actual_reading_row_4[i] >> 24) & 0xFF;
 8008284:	4a31      	ldr	r2, [pc, #196]	@ (800834c <Custom_Bhw_Send_Notification+0x108>)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800828c:	0e19      	lsrs	r1, r3, #24
 800828e:	4b30      	ldr	r3, [pc, #192]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	b2d0      	uxtb	r0, r2
 8008296:	4a2e      	ldr	r2, [pc, #184]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 8008298:	7010      	strb	r0, [r2, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	b2c9      	uxtb	r1, r1
 800829e:	4b2d      	ldr	r3, [pc, #180]	@ (8008354 <Custom_Bhw_Send_Notification+0x110>)
 80082a0:	5499      	strb	r1, [r3, r2]
	      NotifyCharData[Notifyindex++] = (adpd1080_actual_reading_row_4[i] >> 16) & 0xFF;
 80082a2:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <Custom_Bhw_Send_Notification+0x108>)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082aa:	0c19      	lsrs	r1, r3, #16
 80082ac:	4b28      	ldr	r3, [pc, #160]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	b2d0      	uxtb	r0, r2
 80082b4:	4a26      	ldr	r2, [pc, #152]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 80082b6:	7010      	strb	r0, [r2, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	b2c9      	uxtb	r1, r1
 80082bc:	4b25      	ldr	r3, [pc, #148]	@ (8008354 <Custom_Bhw_Send_Notification+0x110>)
 80082be:	5499      	strb	r1, [r3, r2]
	      NotifyCharData[Notifyindex++] = (adpd1080_actual_reading_row_4[i] >> 8) & 0xFF;
 80082c0:	4a22      	ldr	r2, [pc, #136]	@ (800834c <Custom_Bhw_Send_Notification+0x108>)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c8:	0a19      	lsrs	r1, r3, #8
 80082ca:	4b21      	ldr	r3, [pc, #132]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	b2d0      	uxtb	r0, r2
 80082d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 80082d4:	7010      	strb	r0, [r2, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	b2c9      	uxtb	r1, r1
 80082da:	4b1e      	ldr	r3, [pc, #120]	@ (8008354 <Custom_Bhw_Send_Notification+0x110>)
 80082dc:	5499      	strb	r1, [r3, r2]
	      NotifyCharData[Notifyindex++] = adpd1080_actual_reading_row_4[i] & 0xFF;
 80082de:	4a1b      	ldr	r2, [pc, #108]	@ (800834c <Custom_Bhw_Send_Notification+0x108>)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80082e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	b2d0      	uxtb	r0, r2
 80082ee:	4a18      	ldr	r2, [pc, #96]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 80082f0:	7010      	strb	r0, [r2, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	b2c9      	uxtb	r1, r1
 80082f6:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <Custom_Bhw_Send_Notification+0x110>)
 80082f8:	5499      	strb	r1, [r3, r2]
	    for (int i = 0; i < 7; i++) {  // 7 values per row
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b06      	cmp	r3, #6
 8008304:	ddbe      	ble.n	8008284 <Custom_Bhw_Send_Notification+0x40>
	    }
	  }
	  NewReading_Check = 0;
 8008306:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <Custom_Bhw_Send_Notification+0x104>)
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
	  if (Notifyindex >= 252) {
 800830c:	4b10      	ldr	r3, [pc, #64]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2bfb      	cmp	r3, #251	@ 0xfb
 8008312:	d904      	bls.n	800831e <Custom_Bhw_Send_Notification+0xda>
	      Notifyindex = 0;
 8008314:	4b0e      	ldr	r3, [pc, #56]	@ (8008350 <Custom_Bhw_Send_Notification+0x10c>)
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
	      updateflag = 1;
 800831a:	2301      	movs	r3, #1
 800831c:	71fb      	strb	r3, [r7, #7]
	    }

  /* USER CODE END Bhw_NS_1*/

  if (updateflag != 0)
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d006      	beq.n	8008332 <Custom_Bhw_Send_Notification+0xee>
  {
	Custom_STM_App_Update_Char_Ext(Connection_Handle, CUSTOM_STM_BHW, (uint8_t *)NotifyCharData);
 8008324:	4b0c      	ldr	r3, [pc, #48]	@ (8008358 <Custom_Bhw_Send_Notification+0x114>)
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	4a0a      	ldr	r2, [pc, #40]	@ (8008354 <Custom_Bhw_Send_Notification+0x110>)
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fb53 	bl	80089d8 <Custom_STM_App_Update_Char_Ext>

  /* USER CODE BEGIN Bhw_NS_Last*/

  /* USER CODE END Bhw_NS_Last*/

  return;
 8008332:	bf00      	nop
}
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	200004c4 	.word	0x200004c4
 8008340:	20000300 	.word	0x20000300
 8008344:	200006d2 	.word	0x200006d2
 8008348:	200001fc 	.word	0x200001fc
 800834c:	200001e0 	.word	0x200001e0
 8008350:	200006d4 	.word	0x200006d4
 8008354:	200004d0 	.word	0x200004d0
 8008358:	200006d0 	.word	0x200006d0

0800835c <Custom_Bhr_Send_Notification>:
  /* USER CODE END Bhr_UC_Last*/
  return;
}

void Custom_Bhr_Send_Notification(void) /* Property Notification */
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bhr_NS_1*/
  // Only send notification if it's allowed (client has enabled notifications)
  if (Custom_App_Context.Bhr_Notification_Status == 0)
 8008366:	4b1c      	ldr	r3, [pc, #112]	@ (80083d8 <Custom_Bhr_Send_Notification+0x7c>)
 8008368:	789b      	ldrb	r3, [r3, #2]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d02d      	beq.n	80083ca <Custom_Bhr_Send_Notification+0x6e>
  {
    return; // Exit if notifications are not enabled
  }

  if (Fall == 1) {
 800836e:	4b1b      	ldr	r3, [pc, #108]	@ (80083dc <Custom_Bhr_Send_Notification+0x80>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d108      	bne.n	8008388 <Custom_Bhr_Send_Notification+0x2c>
    NotifyCharData[0] = 0xFF; // Fall detected
 8008376:	4b1a      	ldr	r3, [pc, #104]	@ (80083e0 <Custom_Bhr_Send_Notification+0x84>)
 8008378:	22ff      	movs	r2, #255	@ 0xff
 800837a:	701a      	strb	r2, [r3, #0]
    updateflag = 1;
 800837c:	2301      	movs	r3, #1
 800837e:	71fb      	strb	r3, [r7, #7]
    Fall = 0;
 8008380:	4b16      	ldr	r3, [pc, #88]	@ (80083dc <Custom_Bhr_Send_Notification+0x80>)
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	e007      	b.n	8008398 <Custom_Bhr_Send_Notification+0x3c>
  } else {
    NotifyCharData[0] = 0x00; // No fall detected
 8008388:	4b15      	ldr	r3, [pc, #84]	@ (80083e0 <Custom_Bhr_Send_Notification+0x84>)
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
    Fall = 1;
 800838e:	4b13      	ldr	r3, [pc, #76]	@ (80083dc <Custom_Bhr_Send_Notification+0x80>)
 8008390:	2201      	movs	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
    updateflag = 1;
 8008394:	2301      	movs	r3, #1
 8008396:	71fb      	strb	r3, [r7, #7]
  }
  NotifyCharData[0]=steps>>8;
 8008398:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <Custom_Bhr_Send_Notification+0x88>)
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	0a1b      	lsrs	r3, r3, #8
 800839e:	b29b      	uxth	r3, r3
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <Custom_Bhr_Send_Notification+0x84>)
 80083a4:	701a      	strb	r2, [r3, #0]
  NotifyCharData[1]=steps&&0xFF;
 80083a6:	4b0f      	ldr	r3, [pc, #60]	@ (80083e4 <Custom_Bhr_Send_Notification+0x88>)
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bf14      	ite	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	2300      	moveq	r3, #0
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	4b0a      	ldr	r3, [pc, #40]	@ (80083e0 <Custom_Bhr_Send_Notification+0x84>)
 80083b8:	705a      	strb	r2, [r3, #1]
  /* USER CODE END Bhr_NS_1*/

  if (updateflag != 0)
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <Custom_Bhr_Send_Notification+0x72>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_BHR, (uint8_t *)NotifyCharData);
 80083c0:	4907      	ldr	r1, [pc, #28]	@ (80083e0 <Custom_Bhr_Send_Notification+0x84>)
 80083c2:	2001      	movs	r0, #1
 80083c4:	f000 fab8 	bl	8008938 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Bhr_NS_Last*/

  /* USER CODE END Bhr_NS_Last*/

  return;
 80083c8:	e001      	b.n	80083ce <Custom_Bhr_Send_Notification+0x72>
    return; // Exit if notifications are not enabled
 80083ca:	bf00      	nop
 80083cc:	e000      	b.n	80083d0 <Custom_Bhr_Send_Notification+0x74>
  return;
 80083ce:	bf00      	nop
}
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200004c4 	.word	0x200004c4
 80083dc:	200006d5 	.word	0x200006d5
 80083e0:	200004d0 	.word	0x200004d0
 80083e4:	200006d6 	.word	0x200006d6

080083e8 <Custom_Bhrv_Send_Notification>:
  /* USER CODE END Bhrv_UC_Last*/
  return;
}

void Custom_Bhrv_Send_Notification(void) /* Property Notification */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bhrv_NS_1*/
  // Only send notification if it's allowed (client has enabled notifications)
  if (Custom_App_Context.Bhrv_Notification_Status == 0)
 80083f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008428 <Custom_Bhrv_Send_Notification+0x40>)
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d010      	beq.n	800841c <Custom_Bhrv_Send_Notification+0x34>
  {
    return; // Exit if notifications are not enabled
  }

  // Use different data for BHRV to differentiate
  NotifyCharData[0] = 0xAA; // HRV identification value
 80083fa:	4b0c      	ldr	r3, [pc, #48]	@ (800842c <Custom_Bhrv_Send_Notification+0x44>)
 80083fc:	22aa      	movs	r2, #170	@ 0xaa
 80083fe:	701a      	strb	r2, [r3, #0]
  NotifyCharData[1] = Count;
 8008400:	4b0b      	ldr	r3, [pc, #44]	@ (8008430 <Custom_Bhrv_Send_Notification+0x48>)
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <Custom_Bhrv_Send_Notification+0x44>)
 8008406:	705a      	strb	r2, [r3, #1]
  updateflag = 1;
 8008408:	2301      	movs	r3, #1
 800840a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Bhrv_NS_1*/

  if (updateflag != 0)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d006      	beq.n	8008420 <Custom_Bhrv_Send_Notification+0x38>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_BHRV, (uint8_t *)NotifyCharData);
 8008412:	4906      	ldr	r1, [pc, #24]	@ (800842c <Custom_Bhrv_Send_Notification+0x44>)
 8008414:	2002      	movs	r0, #2
 8008416:	f000 fa8f 	bl	8008938 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Bhrv_NS_Last*/

  /* USER CODE END Bhrv_NS_Last*/

  return;
 800841a:	e001      	b.n	8008420 <Custom_Bhrv_Send_Notification+0x38>
    return; // Exit if notifications are not enabled
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <Custom_Bhrv_Send_Notification+0x3a>
  return;
 8008420:	bf00      	nop
}
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	200004c4 	.word	0x200004c4
 800842c:	200004d0 	.word	0x200004d0
 8008430:	200006d2 	.word	0x200006d2

08008434 <BhwMeas_PeriodicTask>:
 * @brief  Periodic task triggered by timer that requests the measurement task
 * @param  None
 * @retval None
 */
static void BhwMeas_PeriodicTask(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  // Request execution of the measurement task
  UTIL_SEQ_SetTask(1 << CFG_TASK_BHW_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8008438:	2100      	movs	r1, #0
 800843a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800843e:	f000 ff25 	bl	800928c <UTIL_SEQ_SetTask>
}
 8008442:	bf00      	nop
 8008444:	bd80      	pop	{r7, pc}

08008446 <FastMeas_PeriodicTask>:
 * @brief  Fast periodic task triggered every 5 seconds
 * @param  None
 * @retval None
 */
static void FastMeas_PeriodicTask(void)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	af00      	add	r7, sp, #0
  // Request execution of the fast measurement task
  UTIL_SEQ_SetTask(1 << CFG_TASK_FAST_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 800844a:	2100      	movs	r1, #0
 800844c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008450:	f000 ff1c 	bl	800928c <UTIL_SEQ_SetTask>
}
 8008454:	bf00      	nop
 8008456:	bd80      	pop	{r7, pc}

08008458 <Custom_Fast_Send_Notification>:
 * @brief  Fast measurement task that handles both BHR and BHRV notifications
 * @param  None
 * @retval None
 */
static void Custom_Fast_Send_Notification(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  // Send notifications for both BHR and BHRV if enabled
  if (Custom_App_Context.Bhr_Notification_Status)
 800845c:	4b06      	ldr	r3, [pc, #24]	@ (8008478 <Custom_Fast_Send_Notification+0x20>)
 800845e:	789b      	ldrb	r3, [r3, #2]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <Custom_Fast_Send_Notification+0x10>
  {
    Custom_Bhr_Send_Notification();
 8008464:	f7ff ff7a 	bl	800835c <Custom_Bhr_Send_Notification>
  }
  
  if (Custom_App_Context.Bhrv_Notification_Status)
 8008468:	4b03      	ldr	r3, [pc, #12]	@ (8008478 <Custom_Fast_Send_Notification+0x20>)
 800846a:	791b      	ldrb	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <Custom_Fast_Send_Notification+0x1c>
  {
    Custom_Bhrv_Send_Notification();
 8008470:	f7ff ffba 	bl	80083e8 <Custom_Bhrv_Send_Notification>
  }
}
 8008474:	bf00      	nop
 8008476:	bd80      	pop	{r7, pc}
 8008478:	200004c4 	.word	0x200004c4

0800847c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08e      	sub	sp, #56	@ 0x38
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008484:	2300      	movs	r3, #0
 8008486:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3301      	adds	r3, #1
 800848e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2bff      	cmp	r3, #255	@ 0xff
 8008496:	f040 8197 	bne.w	80087c8 <Custom_STM_Event_Handler+0x34c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	3302      	adds	r3, #2
 800849e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80084aa:	2b1a      	cmp	r3, #26
 80084ac:	f200 8184 	bhi.w	80087b8 <Custom_STM_Event_Handler+0x33c>
 80084b0:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <Custom_STM_Event_Handler+0x3c>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	08008525 	.word	0x08008525
 80084bc:	080087b9 	.word	0x080087b9
 80084c0:	080087b9 	.word	0x080087b9
 80084c4:	080087b9 	.word	0x080087b9
 80084c8:	080087b9 	.word	0x080087b9
 80084cc:	080087b9 	.word	0x080087b9
 80084d0:	080087b9 	.word	0x080087b9
 80084d4:	080087b9 	.word	0x080087b9
 80084d8:	080087b9 	.word	0x080087b9
 80084dc:	080087b9 	.word	0x080087b9
 80084e0:	080087b9 	.word	0x080087b9
 80084e4:	080087b9 	.word	0x080087b9
 80084e8:	080087b9 	.word	0x080087b9
 80084ec:	080087b9 	.word	0x080087b9
 80084f0:	080087b9 	.word	0x080087b9
 80084f4:	080087b9 	.word	0x080087b9
 80084f8:	080087b9 	.word	0x080087b9
 80084fc:	080087b9 	.word	0x080087b9
 8008500:	08008747 	.word	0x08008747
 8008504:	080086cf 	.word	0x080086cf
 8008508:	080087b9 	.word	0x080087b9
 800850c:	080087b9 	.word	0x080087b9
 8008510:	080087b9 	.word	0x080087b9
 8008514:	080087b9 	.word	0x080087b9
 8008518:	080087b9 	.word	0x080087b9
 800851c:	080087b9 	.word	0x080087b9
 8008520:	0800879b 	.word	0x0800879b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008526:	3302      	adds	r3, #2
 8008528:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	4ba9      	ldr	r3, [pc, #676]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	3302      	adds	r3, #2
 8008538:	429a      	cmp	r2, r3
 800853a:	d12d      	bne.n	8008598 <Custom_STM_Event_Handler+0x11c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */

            switch (attribute_modified->Attr_Data[0])
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	7a1b      	ldrb	r3, [r3, #8]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d01e      	beq.n	8008588 <Custom_STM_Event_Handler+0x10c>
 800854a:	2b02      	cmp	r3, #2
 800854c:	f300 80b9 	bgt.w	80086c2 <Custom_STM_Event_Handler+0x246>
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <Custom_STM_Event_Handler+0xde>
 8008554:	2b01      	cmp	r3, #1
 8008556:	d00f      	beq.n	8008578 <Custom_STM_Event_Handler+0xfc>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
                break;
 8008558:	e0b3      	b.n	80086c2 <Custom_STM_Event_Handler+0x246>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT;
 800855a:	2304      	movs	r3, #4
 800855c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800855e:	f107 0308 	add.w	r3, r7, #8
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fda0 	bl	80080a8 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_INDICATE_DISABLED_EVT;
 8008568:	2306      	movs	r3, #6
 800856a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800856c:	f107 0308 	add.w	r3, r7, #8
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fd99 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008576:	e0a9      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT;
 8008578:	2303      	movs	r3, #3
 800857a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800857c:	f107 0308 	add.w	r3, r7, #8
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff fd91 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008586:	e0a1      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_INDICATE_ENABLED_EVT;
 8008588:	2305      	movs	r3, #5
 800858a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800858c:	f107 0308 	add.w	r3, r7, #8
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fd89 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008596:	e099      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	885b      	ldrh	r3, [r3, #2]
 800859c:	b29b      	uxth	r3, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	4b8d      	ldr	r3, [pc, #564]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 80085a2:	889b      	ldrh	r3, [r3, #4]
 80085a4:	3302      	adds	r3, #2
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d12d      	bne.n	8008606 <Custom_STM_Event_Handler+0x18a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */

            switch (attribute_modified->Attr_Data[0])
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	7a1b      	ldrb	r3, [r3, #8]
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d01e      	beq.n	80085f6 <Custom_STM_Event_Handler+0x17a>
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	f300 8084 	bgt.w	80086c6 <Custom_STM_Event_Handler+0x24a>
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <Custom_STM_Event_Handler+0x14c>
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d00f      	beq.n	80085e6 <Custom_STM_Event_Handler+0x16a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
                break;
 80085c6:	e07e      	b.n	80086c6 <Custom_STM_Event_Handler+0x24a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT;
 80085c8:	230b      	movs	r3, #11
 80085ca:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80085cc:	f107 0308 	add.w	r3, r7, #8
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff fd69 	bl	80080a8 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_INDICATE_DISABLED_EVT;
 80085d6:	230d      	movs	r3, #13
 80085d8:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80085da:	f107 0308 	add.w	r3, r7, #8
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fd62 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 80085e4:	e072      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT;
 80085e6:	230a      	movs	r3, #10
 80085e8:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80085ea:	f107 0308 	add.w	r3, r7, #8
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fd5a 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 80085f4:	e06a      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_INDICATE_ENABLED_EVT;
 80085f6:	230c      	movs	r3, #12
 80085f8:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80085fa:	f107 0308 	add.w	r3, r7, #8
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fd52 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008604:	e062      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	b29b      	uxth	r3, r3
 800860c:	461a      	mov	r2, r3
 800860e:	4b72      	ldr	r3, [pc, #456]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 8008610:	88db      	ldrh	r3, [r3, #6]
 8008612:	3302      	adds	r3, #2
 8008614:	429a      	cmp	r2, r3
 8008616:	d12c      	bne.n	8008672 <Custom_STM_Event_Handler+0x1f6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_3 */

            switch (attribute_modified->Attr_Data[0])
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	7a1b      	ldrb	r3, [r3, #8]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d01d      	beq.n	8008662 <Custom_STM_Event_Handler+0x1e6>
 8008626:	2b02      	cmp	r3, #2
 8008628:	dc4f      	bgt.n	80086ca <Custom_STM_Event_Handler+0x24e>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <Custom_STM_Event_Handler+0x1b8>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d00f      	beq.n	8008652 <Custom_STM_Event_Handler+0x1d6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_3_default */
                break;
 8008632:	e04a      	b.n	80086ca <Custom_STM_Event_Handler+0x24e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT;
 8008634:	2312      	movs	r3, #18
 8008636:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff fd33 	bl	80080a8 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_INDICATE_DISABLED_EVT;
 8008642:	2314      	movs	r3, #20
 8008644:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008646:	f107 0308 	add.w	r3, r7, #8
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fd2c 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008650:	e03c      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT;
 8008652:	2311      	movs	r3, #17
 8008654:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008656:	f107 0308 	add.w	r3, r7, #8
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fd24 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008660:	e034      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_INDICATE_ENABLED_EVT;
 8008662:	2313      	movs	r3, #19
 8008664:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f7ff fd1c 	bl	80080a8 <Custom_STM_App_Notification>
                break;
 8008670:	e02c      	b.n	80086cc <Custom_STM_Event_Handler+0x250>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	b29b      	uxth	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	4b57      	ldr	r3, [pc, #348]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	3301      	adds	r3, #1
 8008680:	429a      	cmp	r2, r3
 8008682:	d103      	bne.n	800868c <Custom_STM_Event_Handler+0x210>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800868a:	e097      	b.n	80087bc <Custom_STM_Event_Handler+0x340>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	885b      	ldrh	r3, [r3, #2]
 8008690:	b29b      	uxth	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	4b50      	ldr	r3, [pc, #320]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 8008696:	889b      	ldrh	r3, [r3, #4]
 8008698:	3301      	adds	r3, #1
 800869a:	429a      	cmp	r2, r3
 800869c:	d103      	bne.n	80086a6 <Custom_STM_Event_Handler+0x22a>
            return_value = SVCCTL_EvtAckFlowEnable;
 800869e:	2301      	movs	r3, #1
 80086a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 80086a4:	e08a      	b.n	80087bc <Custom_STM_Event_Handler+0x340>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	4b4a      	ldr	r3, [pc, #296]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 80086b0:	88db      	ldrh	r3, [r3, #6]
 80086b2:	3301      	adds	r3, #1
 80086b4:	429a      	cmp	r2, r3
 80086b6:	f040 8081 	bne.w	80087bc <Custom_STM_Event_Handler+0x340>
            return_value = SVCCTL_EvtAckFlowEnable;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 80086c0:	e07c      	b.n	80087bc <Custom_STM_Event_Handler+0x340>
                break;
 80086c2:	bf00      	nop
 80086c4:	e07a      	b.n	80087bc <Custom_STM_Event_Handler+0x340>
                break;
 80086c6:	bf00      	nop
 80086c8:	e078      	b.n	80087bc <Custom_STM_Event_Handler+0x340>
                break;
 80086ca:	bf00      	nop
          break;
 80086cc:	e076      	b.n	80087bc <Custom_STM_Event_Handler+0x340>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80086ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d0:	3302      	adds	r3, #2
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	4b3e      	ldr	r3, [pc, #248]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 80086de:	885b      	ldrh	r3, [r3, #2]
 80086e0:	3301      	adds	r3, #1
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d109      	bne.n	80086fa <Custom_STM_Event_Handler+0x27e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80086e6:	2301      	movs	r3, #1
 80086e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fd fe84 	bl	8006400 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 80086f8:	e062      	b.n	80087c0 <Custom_STM_Event_Handler+0x344>
          else if (read_req->Attribute_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	4b35      	ldr	r3, [pc, #212]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 8008704:	889b      	ldrh	r3, [r3, #4]
 8008706:	3301      	adds	r3, #1
 8008708:	429a      	cmp	r2, r3
 800870a:	d109      	bne.n	8008720 <Custom_STM_Event_Handler+0x2a4>
            return_value = SVCCTL_EvtAckFlowEnable;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b29b      	uxth	r3, r3
 8008718:	4618      	mov	r0, r3
 800871a:	f7fd fe71 	bl	8006400 <aci_gatt_allow_read>
          break;
 800871e:	e04f      	b.n	80087c0 <Custom_STM_Event_Handler+0x344>
          else if (read_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	885b      	ldrh	r3, [r3, #2]
 8008724:	b29b      	uxth	r3, r3
 8008726:	461a      	mov	r2, r3
 8008728:	4b2b      	ldr	r3, [pc, #172]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 800872a:	88db      	ldrh	r3, [r3, #6]
 800872c:	3301      	adds	r3, #1
 800872e:	429a      	cmp	r2, r3
 8008730:	d146      	bne.n	80087c0 <Custom_STM_Event_Handler+0x344>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008732:	2301      	movs	r3, #1
 8008734:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fe5e 	bl	8006400 <aci_gatt_allow_read>
          break;
 8008744:	e03c      	b.n	80087c0 <Custom_STM_Event_Handler+0x344>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8008746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008748:	3302      	adds	r3, #2
 800874a:	623b      	str	r3, [r7, #32]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	885b      	ldrh	r3, [r3, #2]
 8008750:	b29b      	uxth	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	4b20      	ldr	r3, [pc, #128]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 8008756:	885b      	ldrh	r3, [r3, #2]
 8008758:	3301      	adds	r3, #1
 800875a:	429a      	cmp	r2, r3
 800875c:	d103      	bne.n	8008766 <Custom_STM_Event_Handler+0x2ea>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800875e:	2301      	movs	r3, #1
 8008760:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /*if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008764:	e02e      	b.n	80087c4 <Custom_STM_Event_Handler+0x348>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	885b      	ldrh	r3, [r3, #2]
 800876a:	b29b      	uxth	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	4b1a      	ldr	r3, [pc, #104]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 8008770:	889b      	ldrh	r3, [r3, #4]
 8008772:	3301      	adds	r3, #1
 8008774:	429a      	cmp	r2, r3
 8008776:	d103      	bne.n	8008780 <Custom_STM_Event_Handler+0x304>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 800877e:	e021      	b.n	80087c4 <Custom_STM_Event_Handler+0x348>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	885b      	ldrh	r3, [r3, #2]
 8008784:	b29b      	uxth	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	4b13      	ldr	r3, [pc, #76]	@ (80087d8 <Custom_STM_Event_Handler+0x35c>)
 800878a:	88db      	ldrh	r3, [r3, #6]
 800878c:	3301      	adds	r3, #1
 800878e:	429a      	cmp	r2, r3
 8008790:	d118      	bne.n	80087c4 <Custom_STM_Event_Handler+0x348>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 8008798:	e014      	b.n	80087c4 <Custom_STM_Event_Handler+0x348>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800879a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879c:	3302      	adds	r3, #2
 800879e:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80087a0:	2315      	movs	r3, #21
 80087a2:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80087a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80087ac:	f107 0308 	add.w	r3, r7, #8
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff fc79 	bl	80080a8 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80087b6:	e006      	b.n	80087c6 <Custom_STM_Event_Handler+0x34a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80087b8:	bf00      	nop
 80087ba:	e006      	b.n	80087ca <Custom_STM_Event_Handler+0x34e>
          break;
 80087bc:	bf00      	nop
 80087be:	e004      	b.n	80087ca <Custom_STM_Event_Handler+0x34e>
          break;
 80087c0:	bf00      	nop
 80087c2:	e002      	b.n	80087ca <Custom_STM_Event_Handler+0x34e>
          break;
 80087c4:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80087c6:	e000      	b.n	80087ca <Custom_STM_Event_Handler+0x34e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80087c8:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80087ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 80087ce:	4618      	mov	r0, r3
 80087d0:	3738      	adds	r7, #56	@ 0x38
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200006d8 	.word	0x200006d8

080087dc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08c      	sub	sp, #48	@ 0x30
 80087e0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80087e2:	2392      	movs	r3, #146	@ 0x92
 80087e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80087e6:	484c      	ldr	r0, [pc, #304]	@ (8008918 <SVCCTL_InitCustomSvc+0x13c>)
 80087e8:	f7fe fe80 	bl	80074ec <SVCCTL_RegisterSvcHandler>
   *                              = 10
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 10;
 80087ec:	230a      	movs	r3, #10
 80087ee:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x0001;
 80087f0:	2301      	movs	r3, #1
 80087f2:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 80087f4:	7dbb      	ldrb	r3, [r7, #22]
 80087f6:	1d39      	adds	r1, r7, #4
 80087f8:	4a48      	ldr	r2, [pc, #288]	@ (800891c <SVCCTL_InitCustomSvc+0x140>)
 80087fa:	9200      	str	r2, [sp, #0]
 80087fc:	2201      	movs	r2, #1
 80087fe:	2001      	movs	r0, #1
 8008800:	f7fd fb22 	bl	8005e48 <aci_gatt_add_service>
 8008804:	4603      	mov	r3, r0
 8008806:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  BalodiHeartWave
   */
  uuid.Char_UUID_16 = 0x0010;
 8008808:	2310      	movs	r3, #16
 800880a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomBhHdle,
 800880c:	4b43      	ldr	r3, [pc, #268]	@ (800891c <SVCCTL_InitCustomSvc+0x140>)
 800880e:	8818      	ldrh	r0, [r3, #0]
 8008810:	4b43      	ldr	r3, [pc, #268]	@ (8008920 <SVCCTL_InitCustomSvc+0x144>)
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	1d3a      	adds	r2, r7, #4
 8008816:	4943      	ldr	r1, [pc, #268]	@ (8008924 <SVCCTL_InitCustomSvc+0x148>)
 8008818:	9105      	str	r1, [sp, #20]
 800881a:	2100      	movs	r1, #0
 800881c:	9104      	str	r1, [sp, #16]
 800881e:	2110      	movs	r1, #16
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	2107      	movs	r1, #7
 8008824:	9102      	str	r1, [sp, #8]
 8008826:	2100      	movs	r1, #0
 8008828:	9101      	str	r1, [sp, #4]
 800882a:	213e      	movs	r1, #62	@ 0x3e
 800882c:	9100      	str	r1, [sp, #0]
 800882e:	2101      	movs	r1, #1
 8008830:	f7fd fbe0 	bl	8005ff4 <aci_gatt_add_char>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  BalodiHeartRate
   */
  COPY_BALODIHEARTRATE_UUID(uuid.Char_UUID_128);
 8008838:	2319      	movs	r3, #25
 800883a:	713b      	strb	r3, [r7, #4]
 800883c:	23ed      	movs	r3, #237	@ 0xed
 800883e:	717b      	strb	r3, [r7, #5]
 8008840:	2382      	movs	r3, #130	@ 0x82
 8008842:	71bb      	strb	r3, [r7, #6]
 8008844:	23ae      	movs	r3, #174	@ 0xae
 8008846:	71fb      	strb	r3, [r7, #7]
 8008848:	23ed      	movs	r3, #237	@ 0xed
 800884a:	723b      	strb	r3, [r7, #8]
 800884c:	2321      	movs	r3, #33	@ 0x21
 800884e:	727b      	strb	r3, [r7, #9]
 8008850:	234c      	movs	r3, #76	@ 0x4c
 8008852:	72bb      	strb	r3, [r7, #10]
 8008854:	239d      	movs	r3, #157	@ 0x9d
 8008856:	72fb      	strb	r3, [r7, #11]
 8008858:	2341      	movs	r3, #65	@ 0x41
 800885a:	733b      	strb	r3, [r7, #12]
 800885c:	2345      	movs	r3, #69	@ 0x45
 800885e:	737b      	strb	r3, [r7, #13]
 8008860:	2322      	movs	r3, #34	@ 0x22
 8008862:	73bb      	strb	r3, [r7, #14]
 8008864:	238e      	movs	r3, #142	@ 0x8e
 8008866:	73fb      	strb	r3, [r7, #15]
 8008868:	2301      	movs	r3, #1
 800886a:	743b      	strb	r3, [r7, #16]
 800886c:	2300      	movs	r3, #0
 800886e:	747b      	strb	r3, [r7, #17]
 8008870:	2300      	movs	r3, #0
 8008872:	74bb      	strb	r3, [r7, #18]
 8008874:	2300      	movs	r3, #0
 8008876:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBhHdle,
 8008878:	4b28      	ldr	r3, [pc, #160]	@ (800891c <SVCCTL_InitCustomSvc+0x140>)
 800887a:	8818      	ldrh	r0, [r3, #0]
 800887c:	4b2a      	ldr	r3, [pc, #168]	@ (8008928 <SVCCTL_InitCustomSvc+0x14c>)
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	1d3a      	adds	r2, r7, #4
 8008882:	492a      	ldr	r1, [pc, #168]	@ (800892c <SVCCTL_InitCustomSvc+0x150>)
 8008884:	9105      	str	r1, [sp, #20]
 8008886:	2100      	movs	r1, #0
 8008888:	9104      	str	r1, [sp, #16]
 800888a:	2110      	movs	r1, #16
 800888c:	9103      	str	r1, [sp, #12]
 800888e:	2107      	movs	r1, #7
 8008890:	9102      	str	r1, [sp, #8]
 8008892:	2100      	movs	r1, #0
 8008894:	9101      	str	r1, [sp, #4]
 8008896:	213e      	movs	r1, #62	@ 0x3e
 8008898:	9100      	str	r1, [sp, #0]
 800889a:	2102      	movs	r1, #2
 800889c:	f7fd fbaa 	bl	8005ff4 <aci_gatt_add_char>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  BalodiHRV
   */
  COPY_BALODIHRV_UUID(uuid.Char_UUID_128);
 80088a4:	2319      	movs	r3, #25
 80088a6:	713b      	strb	r3, [r7, #4]
 80088a8:	23ed      	movs	r3, #237	@ 0xed
 80088aa:	717b      	strb	r3, [r7, #5]
 80088ac:	2382      	movs	r3, #130	@ 0x82
 80088ae:	71bb      	strb	r3, [r7, #6]
 80088b0:	23ae      	movs	r3, #174	@ 0xae
 80088b2:	71fb      	strb	r3, [r7, #7]
 80088b4:	23ed      	movs	r3, #237	@ 0xed
 80088b6:	723b      	strb	r3, [r7, #8]
 80088b8:	2321      	movs	r3, #33	@ 0x21
 80088ba:	727b      	strb	r3, [r7, #9]
 80088bc:	234c      	movs	r3, #76	@ 0x4c
 80088be:	72bb      	strb	r3, [r7, #10]
 80088c0:	239d      	movs	r3, #157	@ 0x9d
 80088c2:	72fb      	strb	r3, [r7, #11]
 80088c4:	2341      	movs	r3, #65	@ 0x41
 80088c6:	733b      	strb	r3, [r7, #12]
 80088c8:	2345      	movs	r3, #69	@ 0x45
 80088ca:	737b      	strb	r3, [r7, #13]
 80088cc:	2322      	movs	r3, #34	@ 0x22
 80088ce:	73bb      	strb	r3, [r7, #14]
 80088d0:	238e      	movs	r3, #142	@ 0x8e
 80088d2:	73fb      	strb	r3, [r7, #15]
 80088d4:	2302      	movs	r3, #2
 80088d6:	743b      	strb	r3, [r7, #16]
 80088d8:	2300      	movs	r3, #0
 80088da:	747b      	strb	r3, [r7, #17]
 80088dc:	2300      	movs	r3, #0
 80088de:	74bb      	strb	r3, [r7, #18]
 80088e0:	2300      	movs	r3, #0
 80088e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBhHdle,
 80088e4:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <SVCCTL_InitCustomSvc+0x140>)
 80088e6:	8818      	ldrh	r0, [r3, #0]
 80088e8:	4b11      	ldr	r3, [pc, #68]	@ (8008930 <SVCCTL_InitCustomSvc+0x154>)
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	1d3a      	adds	r2, r7, #4
 80088ee:	4911      	ldr	r1, [pc, #68]	@ (8008934 <SVCCTL_InitCustomSvc+0x158>)
 80088f0:	9105      	str	r1, [sp, #20]
 80088f2:	2100      	movs	r1, #0
 80088f4:	9104      	str	r1, [sp, #16]
 80088f6:	2110      	movs	r1, #16
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2107      	movs	r1, #7
 80088fc:	9102      	str	r1, [sp, #8]
 80088fe:	2100      	movs	r1, #0
 8008900:	9101      	str	r1, [sp, #4]
 8008902:	213e      	movs	r1, #62	@ 0x3e
 8008904:	9100      	str	r1, [sp, #0]
 8008906:	2102      	movs	r1, #2
 8008908:	f7fd fb74 	bl	8005ff4 <aci_gatt_add_char>
 800890c:	4603      	mov	r3, r0
 800890e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008910:	bf00      	nop
}
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	0800847d 	.word	0x0800847d
 800891c:	200006d8 	.word	0x200006d8
 8008920:	20000066 	.word	0x20000066
 8008924:	200006da 	.word	0x200006da
 8008928:	20000068 	.word	0x20000068
 800892c:	200006dc 	.word	0x200006dc
 8008930:	2000006a 	.word	0x2000006a
 8008934:	200006de 	.word	0x200006de

08008938 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af02      	add	r7, sp, #8
 800893e:	4603      	mov	r3, r0
 8008940:	6039      	str	r1, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008944:	2392      	movs	r3, #146	@ 0x92
 8008946:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8008948:	79fb      	ldrb	r3, [r7, #7]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d026      	beq.n	800899c <Custom_STM_App_Update_Char+0x64>
 800894e:	2b02      	cmp	r3, #2
 8008950:	dc34      	bgt.n	80089bc <Custom_STM_App_Update_Char+0x84>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <Custom_STM_App_Update_Char+0x24>
 8008956:	2b01      	cmp	r3, #1
 8008958:	d010      	beq.n	800897c <Custom_STM_App_Update_Char+0x44>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;

    default:
      break;
 800895a:	e02f      	b.n	80089bc <Custom_STM_App_Update_Char+0x84>
      ret = aci_gatt_update_char_value(CustomContext.CustomBhHdle,
 800895c:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <Custom_STM_App_Update_Char+0x90>)
 800895e:	8818      	ldrh	r0, [r3, #0]
 8008960:	4b19      	ldr	r3, [pc, #100]	@ (80089c8 <Custom_STM_App_Update_Char+0x90>)
 8008962:	8859      	ldrh	r1, [r3, #2]
 8008964:	4b19      	ldr	r3, [pc, #100]	@ (80089cc <Custom_STM_App_Update_Char+0x94>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b2da      	uxtb	r2, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	4613      	mov	r3, r2
 8008970:	2200      	movs	r2, #0
 8008972:	f7fd fc47 	bl	8006204 <aci_gatt_update_char_value>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
      break;
 800897a:	e020      	b.n	80089be <Custom_STM_App_Update_Char+0x86>
      ret = aci_gatt_update_char_value(CustomContext.CustomBhHdle,
 800897c:	4b12      	ldr	r3, [pc, #72]	@ (80089c8 <Custom_STM_App_Update_Char+0x90>)
 800897e:	8818      	ldrh	r0, [r3, #0]
 8008980:	4b11      	ldr	r3, [pc, #68]	@ (80089c8 <Custom_STM_App_Update_Char+0x90>)
 8008982:	8899      	ldrh	r1, [r3, #4]
 8008984:	4b12      	ldr	r3, [pc, #72]	@ (80089d0 <Custom_STM_App_Update_Char+0x98>)
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	b2da      	uxtb	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	4613      	mov	r3, r2
 8008990:	2200      	movs	r2, #0
 8008992:	f7fd fc37 	bl	8006204 <aci_gatt_update_char_value>
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
      break;
 800899a:	e010      	b.n	80089be <Custom_STM_App_Update_Char+0x86>
      ret = aci_gatt_update_char_value(CustomContext.CustomBhHdle,
 800899c:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <Custom_STM_App_Update_Char+0x90>)
 800899e:	8818      	ldrh	r0, [r3, #0]
 80089a0:	4b09      	ldr	r3, [pc, #36]	@ (80089c8 <Custom_STM_App_Update_Char+0x90>)
 80089a2:	88d9      	ldrh	r1, [r3, #6]
 80089a4:	4b0b      	ldr	r3, [pc, #44]	@ (80089d4 <Custom_STM_App_Update_Char+0x9c>)
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4613      	mov	r3, r2
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7fd fc27 	bl	8006204 <aci_gatt_update_char_value>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ba:	e000      	b.n	80089be <Custom_STM_App_Update_Char+0x86>
      break;
 80089bc:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	200006d8 	.word	0x200006d8
 80089cc:	20000066 	.word	0x20000066
 80089d0:	20000068 	.word	0x20000068
 80089d4:	2000006a 	.word	0x2000006a

080089d8 <Custom_STM_App_Update_Char_Ext>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pPayload: Characteristic value
 *
 */
tBleStatus Custom_STM_App_Update_Char_Ext(uint16_t Connection_Handle, Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80089d8:	b590      	push	{r4, r7, lr}
 80089da:	b087      	sub	sp, #28
 80089dc:	af02      	add	r7, sp, #8
 80089de:	4603      	mov	r3, r0
 80089e0:	603a      	str	r2, [r7, #0]
 80089e2:	80fb      	strh	r3, [r7, #6]
 80089e4:	460b      	mov	r3, r1
 80089e6:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80089e8:	2392      	movs	r3, #146	@ 0x92
 80089ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_1 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_1 */

  switch (CharOpcode)
 80089ec:	797b      	ldrb	r3, [r7, #5]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d020      	beq.n	8008a34 <Custom_STM_App_Update_Char_Ext+0x5c>
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	dc2b      	bgt.n	8008a4e <Custom_STM_App_Update_Char_Ext+0x76>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <Custom_STM_App_Update_Char_Ext+0x28>
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d00d      	beq.n	8008a1a <Custom_STM_App_Update_Char_Ext+0x42>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhrvHdle, SizeBhrv, pPayload);

      break;

    default:
      break;
 80089fe:	e026      	b.n	8008a4e <Custom_STM_App_Update_Char_Ext+0x76>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhwHdle, SizeBhw, pPayload);
 8008a00:	4b16      	ldr	r3, [pc, #88]	@ (8008a5c <Custom_STM_App_Update_Char_Ext+0x84>)
 8008a02:	8819      	ldrh	r1, [r3, #0]
 8008a04:	4b15      	ldr	r3, [pc, #84]	@ (8008a5c <Custom_STM_App_Update_Char_Ext+0x84>)
 8008a06:	885a      	ldrh	r2, [r3, #2]
 8008a08:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <Custom_STM_App_Update_Char_Ext+0x88>)
 8008a0a:	881c      	ldrh	r4, [r3, #0]
 8008a0c:	88f8      	ldrh	r0, [r7, #6]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	4623      	mov	r3, r4
 8008a14:	f000 f82a 	bl	8008a6c <Generic_STM_App_Update_Char_Ext>
      break;
 8008a18:	e01a      	b.n	8008a50 <Custom_STM_App_Update_Char_Ext+0x78>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhrHdle, SizeBhr, pPayload);
 8008a1a:	4b10      	ldr	r3, [pc, #64]	@ (8008a5c <Custom_STM_App_Update_Char_Ext+0x84>)
 8008a1c:	8819      	ldrh	r1, [r3, #0]
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a5c <Custom_STM_App_Update_Char_Ext+0x84>)
 8008a20:	889a      	ldrh	r2, [r3, #4]
 8008a22:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <Custom_STM_App_Update_Char_Ext+0x8c>)
 8008a24:	881c      	ldrh	r4, [r3, #0]
 8008a26:	88f8      	ldrh	r0, [r7, #6]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	f000 f81d 	bl	8008a6c <Generic_STM_App_Update_Char_Ext>
      break;
 8008a32:	e00d      	b.n	8008a50 <Custom_STM_App_Update_Char_Ext+0x78>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhrvHdle, SizeBhrv, pPayload);
 8008a34:	4b09      	ldr	r3, [pc, #36]	@ (8008a5c <Custom_STM_App_Update_Char_Ext+0x84>)
 8008a36:	8819      	ldrh	r1, [r3, #0]
 8008a38:	4b08      	ldr	r3, [pc, #32]	@ (8008a5c <Custom_STM_App_Update_Char_Ext+0x84>)
 8008a3a:	88da      	ldrh	r2, [r3, #6]
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a68 <Custom_STM_App_Update_Char_Ext+0x90>)
 8008a3e:	881c      	ldrh	r4, [r3, #0]
 8008a40:	88f8      	ldrh	r0, [r7, #6]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4623      	mov	r3, r4
 8008a48:	f000 f810 	bl	8008a6c <Generic_STM_App_Update_Char_Ext>
      break;
 8008a4c:	e000      	b.n	8008a50 <Custom_STM_App_Update_Char_Ext+0x78>
      break;
 8008a4e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_2 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_2 */

  return ret;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd90      	pop	{r4, r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	200006d8 	.word	0x200006d8
 8008a60:	20000066 	.word	0x20000066
 8008a64:	20000068 	.word	0x20000068
 8008a68:	2000006a 	.word	0x2000006a

08008a6c <Generic_STM_App_Update_Char_Ext>:

static tBleStatus Generic_STM_App_Update_Char_Ext(uint16_t ConnectionHandle, uint16_t ServiceHandle, uint16_t CharHandle, uint16_t CharValueLen, uint8_t *pPayload)
{
 8008a6c:	b590      	push	{r4, r7, lr}
 8008a6e:	b089      	sub	sp, #36	@ 0x24
 8008a70:	af04      	add	r7, sp, #16
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	4611      	mov	r1, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	80fb      	strh	r3, [r7, #6]
 8008a7e:	4603      	mov	r3, r0
 8008a80:	80bb      	strh	r3, [r7, #4]
 8008a82:	460b      	mov	r3, r1
 8008a84:	807b      	strh	r3, [r7, #2]
 8008a86:	4613      	mov	r3, r2
 8008a88:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008a8a:	2392      	movs	r3, #146	@ 0x92
 8008a8c:	73fb      	strb	r3, [r7, #15]

  ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008a8e:	887a      	ldrh	r2, [r7, #2]
 8008a90:	88b9      	ldrh	r1, [r7, #4]
 8008a92:	88f8      	ldrh	r0, [r7, #6]
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	23f3      	movs	r3, #243	@ 0xf3
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	883b      	ldrh	r3, [r7, #0]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f7fd fd00 	bl	80064aa <aci_gatt_update_char_value_ext>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 1\n\r");
  }
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_Service_1_Char_1*/

  if (CharValueLen-243<=243)
 8008aae:	883b      	ldrh	r3, [r7, #0]
 8008ab0:	f5b3 7ff3 	cmp.w	r3, #486	@ 0x1e6
 8008ab4:	d815      	bhi.n	8008ae2 <Generic_STM_App_Update_Char_Ext+0x76>
  {
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008ab6:	883b      	ldrh	r3, [r7, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	330d      	adds	r3, #13
 8008abc:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         CharValueLen-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 8008abe:	6a3a      	ldr	r2, [r7, #32]
 8008ac0:	32f3      	adds	r2, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008ac2:	887c      	ldrh	r4, [r7, #2]
 8008ac4:	88b9      	ldrh	r1, [r7, #4]
 8008ac6:	88f8      	ldrh	r0, [r7, #6]
 8008ac8:	9203      	str	r2, [sp, #12]
 8008aca:	9302      	str	r3, [sp, #8]
 8008acc:	23f3      	movs	r3, #243	@ 0xf3
 8008ace:	9301      	str	r3, [sp, #4]
 8008ad0:	883b      	ldrh	r3, [r7, #0]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	f7fd fce7 	bl	80064aa <aci_gatt_update_char_value_ext>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
 8008ae0:	e027      	b.n	8008b32 <Generic_STM_App_Update_Char_Ext+0xc6>
                                         CharHandle,
                                         0, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	33f3      	adds	r3, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008ae6:	887a      	ldrh	r2, [r7, #2]
 8008ae8:	88b9      	ldrh	r1, [r7, #4]
 8008aea:	88f8      	ldrh	r0, [r7, #6]
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	23f3      	movs	r3, #243	@ 0xf3
 8008af0:	9302      	str	r3, [sp, #8]
 8008af2:	23f3      	movs	r3, #243	@ 0xf3
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	883b      	ldrh	r3, [r7, #0]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	2300      	movs	r3, #0
 8008afc:	f7fd fcd5 	bl	80064aa <aci_gatt_update_char_value_ext>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 3\n\r");
    }
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008b04:	883b      	ldrh	r3, [r7, #0]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	331a      	adds	r3, #26
 8008b0a:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243+243, /* value offset */
                                         CharValueLen-243-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243+243));
 8008b0c:	6a3a      	ldr	r2, [r7, #32]
 8008b0e:	f502 72f3 	add.w	r2, r2, #486	@ 0x1e6
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008b12:	887c      	ldrh	r4, [r7, #2]
 8008b14:	88b9      	ldrh	r1, [r7, #4]
 8008b16:	88f8      	ldrh	r0, [r7, #6]
 8008b18:	9203      	str	r2, [sp, #12]
 8008b1a:	9302      	str	r3, [sp, #8]
 8008b1c:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	883b      	ldrh	r3, [r7, #0]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2301      	movs	r3, #1
 8008b28:	4622      	mov	r2, r4
 8008b2a:	f7fd fcbe 	bl	80064aa <aci_gatt_update_char_value_ext>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 4\n\r");
    }
  }
  return ret;
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd90      	pop	{r4, r7, pc}

08008b3c <LL_PWR_EnableBootC2>:
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008b40:	4b05      	ldr	r3, [pc, #20]	@ (8008b58 <LL_PWR_EnableBootC2+0x1c>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	4a04      	ldr	r2, [pc, #16]	@ (8008b58 <LL_PWR_EnableBootC2+0x1c>)
 8008b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b4a:	60d3      	str	r3, [r2, #12]
}
 8008b4c:	bf00      	nop
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	58000400 	.word	0x58000400

08008b5c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008b66:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008b6a:	4905      	ldr	r1, [pc, #20]	@ (8008b80 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	58000800 	.word	0x58000800

08008b84 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	4904      	ldr	r1, [pc, #16]	@ (8008ba4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	620b      	str	r3, [r1, #32]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	58000800 	.word	0x58000800

08008ba8 <LL_AHB3_GRP1_EnableClock>:
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4013      	ands	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008be6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bfa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4013      	ands	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008c04:	68fb      	ldr	r3, [r7, #12]
}
 8008c06:	bf00      	nop
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	601a      	str	r2, [r3, #0]
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f043 0201 	orr.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	601a      	str	r2, [r3, #0]
}
 8008c46:	bf00      	nop
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	43db      	mvns	r3, r3
 8008c66:	401a      	ands	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	605a      	str	r2, [r3, #4]
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	041b      	lsls	r3, r3, #16
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	605a      	str	r2, [r3, #4]
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	401a      	ands	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	605a      	str	r2, [r3, #4]
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	609a      	str	r2, [r3, #8]
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	041a      	lsls	r2, r3, #16
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	609a      	str	r2, [r3, #8]
}
 8008cee:	bf00      	nop
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d101      	bne.n	8008d16 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69da      	ldr	r2, [r3, #28]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	4013      	ands	r3, r2
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d101      	bne.n	8008d40 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008d54:	2102      	movs	r1, #2
 8008d56:	4818      	ldr	r0, [pc, #96]	@ (8008db8 <HW_IPCC_Rx_Handler+0x68>)
 8008d58:	f7ff ffe4 	bl	8008d24 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d008      	beq.n	8008d74 <HW_IPCC_Rx_Handler+0x24>
 8008d62:	4b15      	ldr	r3, [pc, #84]	@ (8008db8 <HW_IPCC_Rx_Handler+0x68>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8008d6e:	f000 f8d5 	bl	8008f1c <HW_IPCC_SYS_EvtHandler>
 8008d72:	e01e      	b.n	8008db2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008d74:	2101      	movs	r1, #1
 8008d76:	4810      	ldr	r0, [pc, #64]	@ (8008db8 <HW_IPCC_Rx_Handler+0x68>)
 8008d78:	f7ff ffd4 	bl	8008d24 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HW_IPCC_Rx_Handler+0x44>
 8008d82:	4b0d      	ldr	r3, [pc, #52]	@ (8008db8 <HW_IPCC_Rx_Handler+0x68>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8008d8e:	f000 f889 	bl	8008ea4 <HW_IPCC_BLE_EvtHandler>
 8008d92:	e00e      	b.n	8008db2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008d94:	2108      	movs	r1, #8
 8008d96:	4808      	ldr	r0, [pc, #32]	@ (8008db8 <HW_IPCC_Rx_Handler+0x68>)
 8008d98:	f7ff ffc4 	bl	8008d24 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d008      	beq.n	8008db4 <HW_IPCC_Rx_Handler+0x64>
 8008da2:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <HW_IPCC_Rx_Handler+0x68>)
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f003 0308 	and.w	r3, r3, #8
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008dae:	f000 f901 	bl	8008fb4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
}
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	58000c00 	.word	0x58000c00

08008dbc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	4818      	ldr	r0, [pc, #96]	@ (8008e24 <HW_IPCC_Tx_Handler+0x68>)
 8008dc4:	f7ff ff99 	bl	8008cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d108      	bne.n	8008de0 <HW_IPCC_Tx_Handler+0x24>
 8008dce:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <HW_IPCC_Tx_Handler+0x68>)
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008dda:	f000 f893 	bl	8008f04 <HW_IPCC_SYS_CmdEvtHandler>
 8008dde:	e01e      	b.n	8008e1e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008de0:	2108      	movs	r1, #8
 8008de2:	4810      	ldr	r0, [pc, #64]	@ (8008e24 <HW_IPCC_Tx_Handler+0x68>)
 8008de4:	f7ff ff89 	bl	8008cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d108      	bne.n	8008e00 <HW_IPCC_Tx_Handler+0x44>
 8008dee:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <HW_IPCC_Tx_Handler+0x68>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d102      	bne.n	8008e00 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008dfa:	f000 f8bd 	bl	8008f78 <HW_IPCC_MM_FreeBufHandler>
 8008dfe:	e00e      	b.n	8008e1e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008e00:	2120      	movs	r1, #32
 8008e02:	4808      	ldr	r0, [pc, #32]	@ (8008e24 <HW_IPCC_Tx_Handler+0x68>)
 8008e04:	f7ff ff79 	bl	8008cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d108      	bne.n	8008e20 <HW_IPCC_Tx_Handler+0x64>
 8008e0e:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <HW_IPCC_Tx_Handler+0x68>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008e1a:	f000 f84f 	bl	8008ebc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
}
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	58000c00 	.word	0x58000c00

08008e28 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008e2c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008e30:	f7ff fed3 	bl	8008bda <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008e34:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008e38:	f7ff fea4 	bl	8008b84 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008e3c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008e40:	f7ff fe8c 	bl	8008b5c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008e44:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008e46:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008e48:	f7ff fe78 	bl	8008b3c <LL_PWR_EnableBootC2>

  return;
 8008e4c:	bf00      	nop
}
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008e54:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008e58:	f7ff fea6 	bl	8008ba8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008e5c:	4806      	ldr	r0, [pc, #24]	@ (8008e78 <HW_IPCC_Init+0x28>)
 8008e5e:	f7ff fee8 	bl	8008c32 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008e62:	4805      	ldr	r0, [pc, #20]	@ (8008e78 <HW_IPCC_Init+0x28>)
 8008e64:	f7ff fed5 	bl	8008c12 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008e68:	202c      	movs	r0, #44	@ 0x2c
 8008e6a:	f7f9 fb7e 	bl	800256a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008e6e:	202d      	movs	r0, #45	@ 0x2d
 8008e70:	f7f9 fb7b 	bl	800256a <HAL_NVIC_EnableIRQ>

  return;
 8008e74:	bf00      	nop
}
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	58000c00 	.word	0x58000c00

08008e7c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008e80:	2101      	movs	r1, #1
 8008e82:	4802      	ldr	r0, [pc, #8]	@ (8008e8c <HW_IPCC_BLE_Init+0x10>)
 8008e84:	f7ff ff0a 	bl	8008c9c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008e88:	bf00      	nop
}
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	58000c00 	.word	0x58000c00

08008e90 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008e94:	2101      	movs	r1, #1
 8008e96:	4802      	ldr	r0, [pc, #8]	@ (8008ea0 <HW_IPCC_BLE_SendCmd+0x10>)
 8008e98:	f7ff ff20 	bl	8008cdc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008e9c:	bf00      	nop
}
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	58000c00 	.word	0x58000c00

08008ea4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008ea8:	f7fe fc3a 	bl	8007720 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008eac:	2101      	movs	r1, #1
 8008eae:	4802      	ldr	r0, [pc, #8]	@ (8008eb8 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008eb0:	f7ff ff06 	bl	8008cc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008eb4:	bf00      	nop
}
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	58000c00 	.word	0x58000c00

08008ebc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008ec0:	2120      	movs	r1, #32
 8008ec2:	4803      	ldr	r0, [pc, #12]	@ (8008ed0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008ec4:	f7ff fed8 	bl	8008c78 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008ec8:	f7fe fc5a 	bl	8007780 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008ecc:	bf00      	nop
}
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	58000c00 	.word	0x58000c00

08008ed4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008ed8:	2102      	movs	r1, #2
 8008eda:	4802      	ldr	r0, [pc, #8]	@ (8008ee4 <HW_IPCC_SYS_Init+0x10>)
 8008edc:	f7ff fede 	bl	8008c9c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008ee0:	bf00      	nop
}
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	58000c00 	.word	0x58000c00

08008ee8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008eec:	2102      	movs	r1, #2
 8008eee:	4804      	ldr	r0, [pc, #16]	@ (8008f00 <HW_IPCC_SYS_SendCmd+0x18>)
 8008ef0:	f7ff fef4 	bl	8008cdc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008ef4:	2102      	movs	r1, #2
 8008ef6:	4802      	ldr	r0, [pc, #8]	@ (8008f00 <HW_IPCC_SYS_SendCmd+0x18>)
 8008ef8:	f7ff feab 	bl	8008c52 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008efc:	bf00      	nop
}
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	58000c00 	.word	0x58000c00

08008f04 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008f08:	2102      	movs	r1, #2
 8008f0a:	4803      	ldr	r0, [pc, #12]	@ (8008f18 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008f0c:	f7ff feb4 	bl	8008c78 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008f10:	f7fe fc86 	bl	8007820 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008f14:	bf00      	nop
}
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	58000c00 	.word	0x58000c00

08008f1c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008f20:	f7fe fc94 	bl	800784c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008f24:	2102      	movs	r1, #2
 8008f26:	4802      	ldr	r0, [pc, #8]	@ (8008f30 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008f28:	f7ff feca 	bl	8008cc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008f2c:	bf00      	nop
}
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	58000c00 	.word	0x58000c00

08008f34 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008f3c:	2108      	movs	r1, #8
 8008f3e:	480c      	ldr	r0, [pc, #48]	@ (8008f70 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008f40:	f7ff fedb 	bl	8008cfa <LL_C1_IPCC_IsActiveFlag_CHx>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f74 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f50:	2108      	movs	r1, #8
 8008f52:	4807      	ldr	r0, [pc, #28]	@ (8008f70 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008f54:	f7ff fe7d 	bl	8008c52 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008f58:	e006      	b.n	8008f68 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f5e:	2108      	movs	r1, #8
 8008f60:	4803      	ldr	r0, [pc, #12]	@ (8008f70 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008f62:	f7ff febb 	bl	8008cdc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008f66:	bf00      	nop
}
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	58000c00 	.word	0x58000c00
 8008f74:	200006e0 	.word	0x200006e0

08008f78 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f7c:	2108      	movs	r1, #8
 8008f7e:	4806      	ldr	r0, [pc, #24]	@ (8008f98 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008f80:	f7ff fe7a 	bl	8008c78 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008f84:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008f8a:	2108      	movs	r1, #8
 8008f8c:	4802      	ldr	r0, [pc, #8]	@ (8008f98 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008f8e:	f7ff fea5 	bl	8008cdc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008f92:	bf00      	nop
}
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	58000c00 	.word	0x58000c00
 8008f9c:	200006e0 	.word	0x200006e0

08008fa0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008fa4:	2108      	movs	r1, #8
 8008fa6:	4802      	ldr	r0, [pc, #8]	@ (8008fb0 <HW_IPCC_TRACES_Init+0x10>)
 8008fa8:	f7ff fe78 	bl	8008c9c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008fac:	bf00      	nop
}
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	58000c00 	.word	0x58000c00

08008fb4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008fb8:	f7fe fcf0 	bl	800799c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008fbc:	2108      	movs	r1, #8
 8008fbe:	4802      	ldr	r0, [pc, #8]	@ (8008fc8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008fc0:	f7ff fe7e 	bl	8008cc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008fc4:	bf00      	nop
}
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	58000c00 	.word	0x58000c00

08008fcc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008fd0:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <UTIL_LPM_Init+0x1c>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008fd6:	4b05      	ldr	r3, [pc, #20]	@ (8008fec <UTIL_LPM_Init+0x20>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008fdc:	bf00      	nop
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	200006e4 	.word	0x200006e4
 8008fec:	200006e8 	.word	0x200006e8

08008ff0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8009000:	613b      	str	r3, [r7, #16]
  return(result);
 8009002:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009006:	b672      	cpsid	i
}
 8009008:	bf00      	nop
  
  switch(state)
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <UTIL_LPM_SetOffMode+0x32>
 8009010:	2b01      	cmp	r3, #1
 8009012:	d10e      	bne.n	8009032 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009014:	4b0d      	ldr	r3, [pc, #52]	@ (800904c <UTIL_LPM_SetOffMode+0x5c>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4313      	orrs	r3, r2
 800901c:	4a0b      	ldr	r2, [pc, #44]	@ (800904c <UTIL_LPM_SetOffMode+0x5c>)
 800901e:	6013      	str	r3, [r2, #0]
      break;
 8009020:	e008      	b.n	8009034 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	43da      	mvns	r2, r3
 8009026:	4b09      	ldr	r3, [pc, #36]	@ (800904c <UTIL_LPM_SetOffMode+0x5c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	4a07      	ldr	r2, [pc, #28]	@ (800904c <UTIL_LPM_SetOffMode+0x5c>)
 800902e:	6013      	str	r3, [r2, #0]
      break;
 8009030:	e000      	b.n	8009034 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009032:	bf00      	nop
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f383 8810 	msr	PRIMASK, r3
}
 800903e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	200006e8 	.word	0x200006e8

08009050 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b090      	sub	sp, #64	@ 0x40
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009058:	4b73      	ldr	r3, [pc, #460]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800905e:	4b72      	ldr	r3, [pc, #456]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4013      	ands	r3, r2
 8009066:	4a70      	ldr	r2, [pc, #448]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 8009068:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800906a:	4b70      	ldr	r3, [pc, #448]	@ (800922c <UTIL_SEQ_Run+0x1dc>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009070:	4b6f      	ldr	r3, [pc, #444]	@ (8009230 <UTIL_SEQ_Run+0x1e0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009076:	4b6f      	ldr	r3, [pc, #444]	@ (8009234 <UTIL_SEQ_Run+0x1e4>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800907c:	4b6e      	ldr	r3, [pc, #440]	@ (8009238 <UTIL_SEQ_Run+0x1e8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009082:	e08d      	b.n	80091a0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009088:	e002      	b.n	8009090 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800908a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908c:	3301      	adds	r3, #1
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009090:	4a6a      	ldr	r2, [pc, #424]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909a:	401a      	ands	r2, r3
 800909c:	4b62      	ldr	r3, [pc, #392]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4013      	ands	r3, r2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f1      	beq.n	800908a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80090a6:	4a65      	ldr	r2, [pc, #404]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 80090a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	401a      	ands	r2, r3
 80090b2:	4b5d      	ldr	r3, [pc, #372]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4013      	ands	r3, r2
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80090ba:	4a60      	ldr	r2, [pc, #384]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 80090bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4413      	add	r3, r2
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	4013      	ands	r3, r2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80090cc:	4a5b      	ldr	r2, [pc, #364]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 80090ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	4413      	add	r3, r2
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295
 80090d8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80090da:	4a58      	ldr	r2, [pc, #352]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 80090dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	4413      	add	r3, r2
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	4013      	ands	r3, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f9b3 	bl	8009454 <SEQ_BitPosition>
 80090ee:	4603      	mov	r3, r0
 80090f0:	461a      	mov	r2, r3
 80090f2:	4b53      	ldr	r3, [pc, #332]	@ (8009240 <UTIL_SEQ_Run+0x1f0>)
 80090f4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80090f6:	4a51      	ldr	r2, [pc, #324]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 80090f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	4b4f      	ldr	r3, [pc, #316]	@ (8009240 <UTIL_SEQ_Run+0x1f0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2101      	movs	r1, #1
 8009106:	fa01 f303 	lsl.w	r3, r1, r3
 800910a:	43db      	mvns	r3, r3
 800910c:	401a      	ands	r2, r3
 800910e:	494b      	ldr	r1, [pc, #300]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 8009110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	440b      	add	r3, r1
 8009116:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009118:	f3ef 8310 	mrs	r3, PRIMASK
 800911c:	61bb      	str	r3, [r7, #24]
  return(result);
 800911e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009120:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009122:	b672      	cpsid	i
}
 8009124:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009126:	4b46      	ldr	r3, [pc, #280]	@ (8009240 <UTIL_SEQ_Run+0x1f0>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2201      	movs	r2, #1
 800912c:	fa02 f303 	lsl.w	r3, r2, r3
 8009130:	43da      	mvns	r2, r3
 8009132:	4b3e      	ldr	r3, [pc, #248]	@ (800922c <UTIL_SEQ_Run+0x1dc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4013      	ands	r3, r2
 8009138:	4a3c      	ldr	r2, [pc, #240]	@ (800922c <UTIL_SEQ_Run+0x1dc>)
 800913a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800913c:	2301      	movs	r3, #1
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009140:	e013      	b.n	800916a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009144:	3b01      	subs	r3, #1
 8009146:	4a3d      	ldr	r2, [pc, #244]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 8009148:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800914c:	4b3c      	ldr	r3, [pc, #240]	@ (8009240 <UTIL_SEQ_Run+0x1f0>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	fa02 f303 	lsl.w	r3, r2, r3
 8009156:	43da      	mvns	r2, r3
 8009158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915a:	3b01      	subs	r3, #1
 800915c:	400a      	ands	r2, r1
 800915e:	4937      	ldr	r1, [pc, #220]	@ (800923c <UTIL_SEQ_Run+0x1ec>)
 8009160:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009166:	3b01      	subs	r3, #1
 8009168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800916a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e8      	bne.n	8009142 <UTIL_SEQ_Run+0xf2>
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f383 8810 	msr	PRIMASK, r3
}
 800917a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800917c:	4b30      	ldr	r3, [pc, #192]	@ (8009240 <UTIL_SEQ_Run+0x1f0>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a30      	ldr	r2, [pc, #192]	@ (8009244 <UTIL_SEQ_Run+0x1f4>)
 8009182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009186:	4798      	blx	r3

    local_taskset = TaskSet;
 8009188:	4b28      	ldr	r3, [pc, #160]	@ (800922c <UTIL_SEQ_Run+0x1dc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800918e:	4b28      	ldr	r3, [pc, #160]	@ (8009230 <UTIL_SEQ_Run+0x1e0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8009194:	4b27      	ldr	r3, [pc, #156]	@ (8009234 <UTIL_SEQ_Run+0x1e4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800919a:	4b27      	ldr	r3, [pc, #156]	@ (8009238 <UTIL_SEQ_Run+0x1e8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80091a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	401a      	ands	r2, r3
 80091a6:	4b20      	ldr	r3, [pc, #128]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <UTIL_SEQ_Run+0x16c>
 80091b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f43f af64 	beq.w	8009084 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80091bc:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <UTIL_SEQ_Run+0x1f0>)
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80091c4:	f000 f938 	bl	8009438 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c8:	f3ef 8310 	mrs	r3, PRIMASK
 80091cc:	613b      	str	r3, [r7, #16]
  return(result);
 80091ce:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80091d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80091d2:	b672      	cpsid	i
}
 80091d4:	bf00      	nop
  local_taskset = TaskSet;
 80091d6:	4b15      	ldr	r3, [pc, #84]	@ (800922c <UTIL_SEQ_Run+0x1dc>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80091dc:	4b14      	ldr	r3, [pc, #80]	@ (8009230 <UTIL_SEQ_Run+0x1e0>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80091e2:	4b14      	ldr	r3, [pc, #80]	@ (8009234 <UTIL_SEQ_Run+0x1e4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80091e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	401a      	ands	r2, r3
 80091ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4013      	ands	r3, r2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d107      	bne.n	8009208 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80091f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009238 <UTIL_SEQ_Run+0x1e8>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fe:	4013      	ands	r3, r2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d101      	bne.n	8009208 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009204:	f7f7 fca2 	bl	8000b4c <UTIL_SEQ_Idle>
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f383 8810 	msr	PRIMASK, r3
}
 8009212:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009214:	f000 f917 	bl	8009446 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009218:	4a03      	ldr	r2, [pc, #12]	@ (8009228 <UTIL_SEQ_Run+0x1d8>)
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	6013      	str	r3, [r2, #0]

  return;
 800921e:	bf00      	nop
}
 8009220:	3740      	adds	r7, #64	@ 0x40
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000070 	.word	0x20000070
 800922c:	200006ec 	.word	0x200006ec
 8009230:	200006f0 	.word	0x200006f0
 8009234:	2000006c 	.word	0x2000006c
 8009238:	200006f4 	.word	0x200006f4
 800923c:	2000077c 	.word	0x2000077c
 8009240:	200006f8 	.word	0x200006f8
 8009244:	200006fc 	.word	0x200006fc

08009248 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009254:	f3ef 8310 	mrs	r3, PRIMASK
 8009258:	617b      	str	r3, [r7, #20]
  return(result);
 800925a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800925c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800925e:	b672      	cpsid	i
}
 8009260:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 f8f6 	bl	8009454 <SEQ_BitPosition>
 8009268:	4603      	mov	r3, r0
 800926a:	4619      	mov	r1, r3
 800926c:	4a06      	ldr	r2, [pc, #24]	@ (8009288 <UTIL_SEQ_RegTask+0x40>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f383 8810 	msr	PRIMASK, r3
}
 800927e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009280:	bf00      	nop
}
 8009282:	3720      	adds	r7, #32
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200006fc 	.word	0x200006fc

0800928c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009296:	f3ef 8310 	mrs	r3, PRIMASK
 800929a:	60fb      	str	r3, [r7, #12]
  return(result);
 800929c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800929e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092a0:	b672      	cpsid	i
}
 80092a2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80092a4:	4b0d      	ldr	r3, [pc, #52]	@ (80092dc <UTIL_SEQ_SetTask+0x50>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	4a0b      	ldr	r2, [pc, #44]	@ (80092dc <UTIL_SEQ_SetTask+0x50>)
 80092ae:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80092b0:	4a0b      	ldr	r2, [pc, #44]	@ (80092e0 <UTIL_SEQ_SetTask+0x54>)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	4908      	ldr	r1, [pc, #32]	@ (80092e0 <UTIL_SEQ_SetTask+0x54>)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f383 8810 	msr	PRIMASK, r3
}
 80092ce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80092d0:	bf00      	nop
}
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	200006ec 	.word	0x200006ec
 80092e0:	2000077c 	.word	0x2000077c

080092e4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ec:	f3ef 8310 	mrs	r3, PRIMASK
 80092f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80092f2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80092f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092f6:	b672      	cpsid	i
}
 80092f8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	43da      	mvns	r2, r3
 80092fe:	4b08      	ldr	r3, [pc, #32]	@ (8009320 <UTIL_SEQ_PauseTask+0x3c>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4013      	ands	r3, r2
 8009304:	4a06      	ldr	r2, [pc, #24]	@ (8009320 <UTIL_SEQ_PauseTask+0x3c>)
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f383 8810 	msr	PRIMASK, r3
}
 8009312:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009314:	bf00      	nop
}
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	2000006c 	.word	0x2000006c

08009324 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800932c:	f3ef 8310 	mrs	r3, PRIMASK
 8009330:	60fb      	str	r3, [r7, #12]
  return(result);
 8009332:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009336:	b672      	cpsid	i
}
 8009338:	bf00      	nop

  TaskMask |= TaskId_bm;
 800933a:	4b09      	ldr	r3, [pc, #36]	@ (8009360 <UTIL_SEQ_ResumeTask+0x3c>)
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4313      	orrs	r3, r2
 8009342:	4a07      	ldr	r2, [pc, #28]	@ (8009360 <UTIL_SEQ_ResumeTask+0x3c>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f383 8810 	msr	PRIMASK, r3
}
 8009350:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009352:	bf00      	nop
}
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000006c 	.word	0x2000006c

08009364 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800936c:	f3ef 8310 	mrs	r3, PRIMASK
 8009370:	60fb      	str	r3, [r7, #12]
  return(result);
 8009372:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009374:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009376:	b672      	cpsid	i
}
 8009378:	bf00      	nop

  EvtSet |= EvtId_bm;
 800937a:	4b09      	ldr	r3, [pc, #36]	@ (80093a0 <UTIL_SEQ_SetEvt+0x3c>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4313      	orrs	r3, r2
 8009382:	4a07      	ldr	r2, [pc, #28]	@ (80093a0 <UTIL_SEQ_SetEvt+0x3c>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f383 8810 	msr	PRIMASK, r3
}
 8009390:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009392:	bf00      	nop
}
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	200006f0 	.word	0x200006f0

080093a4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80093ac:	4b1f      	ldr	r3, [pc, #124]	@ (800942c <UTIL_SEQ_WaitEvt+0x88>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80093b2:	4b1e      	ldr	r3, [pc, #120]	@ (800942c <UTIL_SEQ_WaitEvt+0x88>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d102      	bne.n	80093c2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80093bc:	2300      	movs	r3, #0
 80093be:	61fb      	str	r3, [r7, #28]
 80093c0:	e005      	b.n	80093ce <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80093c2:	4b1a      	ldr	r3, [pc, #104]	@ (800942c <UTIL_SEQ_WaitEvt+0x88>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2201      	movs	r2, #1
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80093ce:	4b18      	ldr	r3, [pc, #96]	@ (8009430 <UTIL_SEQ_WaitEvt+0x8c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80093d4:	4a16      	ldr	r2, [pc, #88]	@ (8009430 <UTIL_SEQ_WaitEvt+0x8c>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80093da:	e003      	b.n	80093e4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	69f8      	ldr	r0, [r7, #28]
 80093e0:	f7f7 fbbb 	bl	8000b5a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80093e4:	4b13      	ldr	r3, [pc, #76]	@ (8009434 <UTIL_SEQ_WaitEvt+0x90>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0f5      	beq.n	80093dc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80093f0:	4a0e      	ldr	r2, [pc, #56]	@ (800942c <UTIL_SEQ_WaitEvt+0x88>)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093f6:	f3ef 8310 	mrs	r3, PRIMASK
 80093fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80093fc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80093fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009400:	b672      	cpsid	i
}
 8009402:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	43da      	mvns	r2, r3
 8009408:	4b0a      	ldr	r3, [pc, #40]	@ (8009434 <UTIL_SEQ_WaitEvt+0x90>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4013      	ands	r3, r2
 800940e:	4a09      	ldr	r2, [pc, #36]	@ (8009434 <UTIL_SEQ_WaitEvt+0x90>)
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f383 8810 	msr	PRIMASK, r3
}
 800941c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800941e:	4a04      	ldr	r2, [pc, #16]	@ (8009430 <UTIL_SEQ_WaitEvt+0x8c>)
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	6013      	str	r3, [r2, #0]
  return;
 8009424:	bf00      	nop
}
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	200006f8 	.word	0x200006f8
 8009430:	200006f4 	.word	0x200006f4
 8009434:	200006f0 	.word	0x200006f0

08009438 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800943c:	bf00      	nop
}
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009446:	b480      	push	{r7}
 8009448:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800944a:	bf00      	nop
}
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <SEQ_BitPosition+0x16>
    return 32U;
 8009466:	2320      	movs	r3, #32
 8009468:	e003      	b.n	8009472 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	fab3 f383 	clz	r3, r3
 8009470:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8009472:	f1c3 031f 	rsb	r3, r3, #31
 8009476:	b2db      	uxtb	r3, r3
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <memset>:
 8009484:	4402      	add	r2, r0
 8009486:	4603      	mov	r3, r0
 8009488:	4293      	cmp	r3, r2
 800948a:	d100      	bne.n	800948e <memset+0xa>
 800948c:	4770      	bx	lr
 800948e:	f803 1b01 	strb.w	r1, [r3], #1
 8009492:	e7f9      	b.n	8009488 <memset+0x4>

08009494 <__libc_init_array>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4d0d      	ldr	r5, [pc, #52]	@ (80094cc <__libc_init_array+0x38>)
 8009498:	4c0d      	ldr	r4, [pc, #52]	@ (80094d0 <__libc_init_array+0x3c>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	2600      	movs	r6, #0
 80094a0:	42a6      	cmp	r6, r4
 80094a2:	d109      	bne.n	80094b8 <__libc_init_array+0x24>
 80094a4:	4d0b      	ldr	r5, [pc, #44]	@ (80094d4 <__libc_init_array+0x40>)
 80094a6:	4c0c      	ldr	r4, [pc, #48]	@ (80094d8 <__libc_init_array+0x44>)
 80094a8:	f000 f826 	bl	80094f8 <_init>
 80094ac:	1b64      	subs	r4, r4, r5
 80094ae:	10a4      	asrs	r4, r4, #2
 80094b0:	2600      	movs	r6, #0
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d105      	bne.n	80094c2 <__libc_init_array+0x2e>
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094bc:	4798      	blx	r3
 80094be:	3601      	adds	r6, #1
 80094c0:	e7ee      	b.n	80094a0 <__libc_init_array+0xc>
 80094c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c6:	4798      	blx	r3
 80094c8:	3601      	adds	r6, #1
 80094ca:	e7f2      	b.n	80094b2 <__libc_init_array+0x1e>
 80094cc:	08009780 	.word	0x08009780
 80094d0:	08009780 	.word	0x08009780
 80094d4:	08009780 	.word	0x08009780
 80094d8:	08009784 	.word	0x08009784

080094dc <memcpy>:
 80094dc:	440a      	add	r2, r1
 80094de:	4291      	cmp	r1, r2
 80094e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e4:	d100      	bne.n	80094e8 <memcpy+0xc>
 80094e6:	4770      	bx	lr
 80094e8:	b510      	push	{r4, lr}
 80094ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f2:	4291      	cmp	r1, r2
 80094f4:	d1f9      	bne.n	80094ea <memcpy+0xe>
 80094f6:	bd10      	pop	{r4, pc}

080094f8 <_init>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	bf00      	nop
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr

08009504 <_fini>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr
