
DPFinalSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092fc  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009438  08009438  0000a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096a8  080096a8  0000a6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080096ac  080096ac  0000a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  20000008  080096b0  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000049  20000074  0800971c  0000b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c0  08009765  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  200000d4  08009776  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08009776  0000b77c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08009776  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00028593  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000058c4  00000000  00000000  0003402a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002660  00000000  00000000  000398f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001d47  00000000  00000000  0003bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b23c  00000000  00000000  0003dc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a750  00000000  00000000  00068ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f4486  00000000  00000000  00093623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00187aa9  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009fb0  00000000  00000000  00187aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000003c  00000000  00000000  00191a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000d4 	.word	0x200000d4
 8000158:	00000000 	.word	0x00000000
 800015c:	08009420 	.word	0x08009420

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000d8 	.word	0x200000d8
 8000178:	08009420 	.word	0x08009420

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <ADPD1080_ReadAllRegisters>:
 800018c:	b580      	push	{r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af04      	add	r7, sp, #16
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	2300      	movs	r3, #0
 8000196:	73bb      	strb	r3, [r7, #14]
 8000198:	e02b      	b.n	80001f2 <ADPD1080_ReadAllRegisters+0x66>
 800019a:	7bbb      	ldrb	r3, [r7, #14]
 800019c:	4a19      	ldr	r2, [pc, #100]	@ (8000204 <ADPD1080_ReadAllRegisters+0x78>)
 800019e:	5cd3      	ldrb	r3, [r2, r3]
 80001a0:	461a      	mov	r2, r3
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	9302      	str	r3, [sp, #8]
 80001a8:	2302      	movs	r3, #2
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	f107 030c 	add.w	r3, r7, #12
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2301      	movs	r3, #1
 80001b4:	21c8      	movs	r1, #200	@ 0xc8
 80001b6:	6878      	ldr	r0, [r7, #4]
 80001b8:	f002 fc6e 	bl	8002a98 <HAL_I2C_Mem_Read>
 80001bc:	4603      	mov	r3, r0
 80001be:	73fb      	strb	r3, [r7, #15]
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d10c      	bne.n	80001e0 <ADPD1080_ReadAllRegisters+0x54>
 80001c6:	7b3b      	ldrb	r3, [r7, #12]
 80001c8:	021b      	lsls	r3, r3, #8
 80001ca:	b21a      	sxth	r2, r3
 80001cc:	7b7b      	ldrb	r3, [r7, #13]
 80001ce:	b21b      	sxth	r3, r3
 80001d0:	4313      	orrs	r3, r2
 80001d2:	b21a      	sxth	r2, r3
 80001d4:	7bbb      	ldrb	r3, [r7, #14]
 80001d6:	b291      	uxth	r1, r2
 80001d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000208 <ADPD1080_ReadAllRegisters+0x7c>)
 80001da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001de:	e005      	b.n	80001ec <ADPD1080_ReadAllRegisters+0x60>
 80001e0:	7bbb      	ldrb	r3, [r7, #14]
 80001e2:	4a09      	ldr	r2, [pc, #36]	@ (8000208 <ADPD1080_ReadAllRegisters+0x7c>)
 80001e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80001e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	3301      	adds	r3, #1
 80001f0:	73bb      	strb	r3, [r7, #14]
 80001f2:	7bbb      	ldrb	r3, [r7, #14]
 80001f4:	2b13      	cmp	r3, #19
 80001f6:	d9d0      	bls.n	800019a <ADPD1080_ReadAllRegisters+0xe>
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	4618      	mov	r0, r3
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000008 	.word	0x20000008
 8000208:	200000f0 	.word	0x200000f0

0800020c <ADPD1080_WriteAllRegisters>:
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af04      	add	r7, sp, #16
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	2326      	movs	r3, #38	@ 0x26
 8000216:	733b      	strb	r3, [r7, #12]
 8000218:	2380      	movs	r3, #128	@ 0x80
 800021a:	737b      	strb	r3, [r7, #13]
 800021c:	f04f 33ff 	mov.w	r3, #4294967295
 8000220:	9302      	str	r3, [sp, #8]
 8000222:	2302      	movs	r3, #2
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	f107 030c 	add.w	r3, r7, #12
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2301      	movs	r3, #1
 800022e:	224b      	movs	r2, #75	@ 0x4b
 8000230:	21c8      	movs	r1, #200	@ 0xc8
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f002 fb1c 	bl	8002870 <HAL_I2C_Mem_Write>
 8000238:	4603      	mov	r3, r0
 800023a:	73bb      	strb	r3, [r7, #14]
 800023c:	7bbb      	ldrb	r3, [r7, #14]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <ADPD1080_WriteAllRegisters+0x3a>
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	e061      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]
 800024a:	2301      	movs	r3, #1
 800024c:	737b      	strb	r3, [r7, #13]
 800024e:	f04f 33ff 	mov.w	r3, #4294967295
 8000252:	9302      	str	r3, [sp, #8]
 8000254:	2302      	movs	r3, #2
 8000256:	9301      	str	r3, [sp, #4]
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2301      	movs	r3, #1
 8000260:	2210      	movs	r2, #16
 8000262:	21c8      	movs	r1, #200	@ 0xc8
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f002 fb03 	bl	8002870 <HAL_I2C_Mem_Write>
 800026a:	4603      	mov	r3, r0
 800026c:	73bb      	strb	r3, [r7, #14]
 800026e:	7bbb      	ldrb	r3, [r7, #14]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <ADPD1080_WriteAllRegisters+0x6c>
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	e048      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	e028      	b.n	80002d0 <ADPD1080_WriteAllRegisters+0xc4>
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	4a24      	ldr	r2, [pc, #144]	@ (8000314 <ADPD1080_WriteAllRegisters+0x108>)
 8000282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000286:	0a1b      	lsrs	r3, r3, #8
 8000288:	b29b      	uxth	r3, r3
 800028a:	b2db      	uxtb	r3, r3
 800028c:	733b      	strb	r3, [r7, #12]
 800028e:	7bfb      	ldrb	r3, [r7, #15]
 8000290:	4a20      	ldr	r2, [pc, #128]	@ (8000314 <ADPD1080_WriteAllRegisters+0x108>)
 8000292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	737b      	strb	r3, [r7, #13]
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	4a1e      	ldr	r2, [pc, #120]	@ (8000318 <ADPD1080_WriteAllRegisters+0x10c>)
 800029e:	5cd3      	ldrb	r3, [r2, r3]
 80002a0:	461a      	mov	r2, r3
 80002a2:	f04f 33ff 	mov.w	r3, #4294967295
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	2302      	movs	r3, #2
 80002aa:	9301      	str	r3, [sp, #4]
 80002ac:	f107 030c 	add.w	r3, r7, #12
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2301      	movs	r3, #1
 80002b4:	21c8      	movs	r1, #200	@ 0xc8
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	f002 fada 	bl	8002870 <HAL_I2C_Mem_Write>
 80002bc:	4603      	mov	r3, r0
 80002be:	73bb      	strb	r3, [r7, #14]
 80002c0:	7bbb      	ldrb	r3, [r7, #14]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <ADPD1080_WriteAllRegisters+0xbe>
 80002c6:	7bbb      	ldrb	r3, [r7, #14]
 80002c8:	e01f      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	3301      	adds	r3, #1
 80002ce:	73fb      	strb	r3, [r7, #15]
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
 80002d2:	2b13      	cmp	r3, #19
 80002d4:	d9d3      	bls.n	800027e <ADPD1080_WriteAllRegisters+0x72>
 80002d6:	2300      	movs	r3, #0
 80002d8:	733b      	strb	r3, [r7, #12]
 80002da:	2302      	movs	r3, #2
 80002dc:	737b      	strb	r3, [r7, #13]
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2302      	movs	r3, #2
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	2210      	movs	r2, #16
 80002f2:	21c8      	movs	r1, #200	@ 0xc8
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f002 fabb 	bl	8002870 <HAL_I2C_Mem_Write>
 80002fa:	4603      	mov	r3, r0
 80002fc:	73bb      	strb	r3, [r7, #14]
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <ADPD1080_WriteAllRegisters+0xfc>
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	e000      	b.n	800030a <ADPD1080_WriteAllRegisters+0xfe>
 8000308:	2300      	movs	r3, #0
 800030a:	4618      	mov	r0, r3
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c
 8000318:	20000008 	.word	0x20000008

0800031c <ADPD1080_CheckRegisters>:
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	2300      	movs	r3, #0
 8000326:	73fb      	strb	r3, [r7, #15]
 8000328:	e013      	b.n	8000352 <ADPD1080_CheckRegisters+0x36>
 800032a:	7bfb      	ldrb	r3, [r7, #15]
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <ADPD1080_CheckRegisters+0x48>)
 800032e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	490c      	ldr	r1, [pc, #48]	@ (8000368 <ADPD1080_CheckRegisters+0x4c>)
 8000336:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800033a:	429a      	cmp	r2, r3
 800033c:	d006      	beq.n	800034c <ADPD1080_CheckRegisters+0x30>
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f7ff ff64 	bl	800020c <ADPD1080_WriteAllRegisters>
 8000344:	4603      	mov	r3, r0
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	7bbb      	ldrb	r3, [r7, #14]
 800034a:	e006      	b.n	800035a <ADPD1080_CheckRegisters+0x3e>
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	3301      	adds	r3, #1
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	2b13      	cmp	r3, #19
 8000356:	d9e8      	bls.n	800032a <ADPD1080_CheckRegisters+0xe>
 8000358:	2300      	movs	r3, #0
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000f0 	.word	0x200000f0
 8000368:	2000001c 	.word	0x2000001c

0800036c <ADPD1080_Read_Buffer>:
 800036c:	b580      	push	{r7, lr}
 800036e:	b0a4      	sub	sp, #144	@ 0x90
 8000370:	af04      	add	r7, sp, #16
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	9302      	str	r3, [sp, #8]
 800037a:	2370      	movs	r3, #112	@ 0x70
 800037c:	9301      	str	r3, [sp, #4]
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2301      	movs	r3, #1
 8000386:	2260      	movs	r2, #96	@ 0x60
 8000388:	21c8      	movs	r1, #200	@ 0xc8
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f002 fb84 	bl	8002a98 <HAL_I2C_Mem_Read>
 8000390:	4603      	mov	r3, r0
 8000392:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8000396:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800039a:	2b00      	cmp	r3, #0
 800039c:	d127      	bne.n	80003ee <ADPD1080_Read_Buffer+0x82>
 800039e:	2300      	movs	r3, #0
 80003a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80003a4:	e01e      	b.n	80003e4 <ADPD1080_Read_Buffer+0x78>
 80003a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	3380      	adds	r3, #128	@ 0x80
 80003ae:	443b      	add	r3, r7
 80003b0:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80003b4:	021b      	lsls	r3, r3, #8
 80003b6:	b21a      	sxth	r2, r3
 80003b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	3301      	adds	r3, #1
 80003c0:	3380      	adds	r3, #128	@ 0x80
 80003c2:	443b      	add	r3, r7
 80003c4:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80003c8:	b21b      	sxth	r3, r3
 80003ca:	4313      	orrs	r3, r2
 80003cc:	b21a      	sxth	r2, r3
 80003ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003d2:	b291      	uxth	r1, r2
 80003d4:	4a13      	ldr	r2, [pc, #76]	@ (8000424 <ADPD1080_Read_Buffer+0xb8>)
 80003d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003de:	3301      	adds	r3, #1
 80003e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80003e4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80003e8:	2b37      	cmp	r3, #55	@ 0x37
 80003ea:	d9dc      	bls.n	80003a6 <ADPD1080_Read_Buffer+0x3a>
 80003ec:	e013      	b.n	8000416 <ADPD1080_Read_Buffer+0xaa>
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80003f4:	e00b      	b.n	800040e <ADPD1080_Read_Buffer+0xa2>
 80003f6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <ADPD1080_Read_Buffer+0xb8>)
 80003fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000400:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000404:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000408:	3301      	adds	r3, #1
 800040a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800040e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000412:	2b37      	cmp	r3, #55	@ 0x37
 8000414:	d9ef      	bls.n	80003f6 <ADPD1080_Read_Buffer+0x8a>
 8000416:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800041a:	4618      	mov	r0, r3
 800041c:	3780      	adds	r7, #128	@ 0x80
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000118 	.word	0x20000118

08000428 <ADPD1080_Check_FIFO>:
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af04      	add	r7, sp, #16
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
 8000434:	9302      	str	r3, [sp, #8]
 8000436:	2302      	movs	r3, #2
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2301      	movs	r3, #1
 8000442:	2200      	movs	r2, #0
 8000444:	21c8      	movs	r1, #200	@ 0xc8
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f002 fb26 	bl	8002a98 <HAL_I2C_Mem_Read>
 800044c:	4603      	mov	r3, r0
 800044e:	73fb      	strb	r3, [r7, #15]
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d115      	bne.n	8000482 <ADPD1080_Check_FIFO+0x5a>
 8000456:	7b3a      	ldrb	r2, [r7, #12]
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <ADPD1080_Check_FIFO+0x6c>)
 800045a:	701a      	strb	r2, [r3, #0]
 800045c:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <ADPD1080_Check_FIFO+0x6c>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b6f      	cmp	r3, #111	@ 0x6f
 8000462:	d90c      	bls.n	800047e <ADPD1080_Check_FIFO+0x56>
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff ff81 	bl	800036c <ADPD1080_Read_Buffer>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d104      	bne.n	800047e <ADPD1080_Check_FIFO+0x56>
 8000474:	f000 f812 	bl	800049c <ADPD1080_ProcessFIFO>
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <ADPD1080_Check_FIFO+0x70>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	e003      	b.n	800048a <ADPD1080_Check_FIFO+0x62>
 8000482:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <ADPD1080_Check_FIFO+0x6c>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000188 	.word	0x20000188
 8000498:	200001fc 	.word	0x200001fc

0800049c <ADPD1080_ProcessFIFO>:
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	2300      	movs	r3, #0
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	e04d      	b.n	8000544 <ADPD1080_ProcessFIFO+0xa8>
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	00db      	lsls	r3, r3, #3
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004b4:	041a      	lsls	r2, r3, #16
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	4927      	ldr	r1, [pc, #156]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004c0:	4619      	mov	r1, r3
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	4925      	ldr	r1, [pc, #148]	@ (800055c <ADPD1080_ProcessFIFO+0xc0>)
 80004c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	3303      	adds	r3, #3
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d8:	041a      	lsls	r2, r3, #16
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	00db      	lsls	r3, r3, #3
 80004de:	3302      	adds	r3, #2
 80004e0:	491d      	ldr	r1, [pc, #116]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004e6:	4619      	mov	r1, r3
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	491c      	ldr	r1, [pc, #112]	@ (8000560 <ADPD1080_ProcessFIFO+0xc4>)
 80004ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	3305      	adds	r3, #5
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 80004fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004fe:	041a      	lsls	r2, r3, #16
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	3304      	adds	r3, #4
 8000506:	4914      	ldr	r1, [pc, #80]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 8000508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800050c:	4619      	mov	r1, r3
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	430a      	orrs	r2, r1
 8000512:	4914      	ldr	r1, [pc, #80]	@ (8000564 <ADPD1080_ProcessFIFO+0xc8>)
 8000514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	3307      	adds	r3, #7
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 8000520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000524:	041a      	lsls	r2, r3, #16
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	3306      	adds	r3, #6
 800052c:	490a      	ldr	r1, [pc, #40]	@ (8000558 <ADPD1080_ProcessFIFO+0xbc>)
 800052e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000532:	4619      	mov	r1, r3
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	430a      	orrs	r2, r1
 8000538:	490b      	ldr	r1, [pc, #44]	@ (8000568 <ADPD1080_ProcessFIFO+0xcc>)
 800053a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	3301      	adds	r3, #1
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d9ae      	bls.n	80004a8 <ADPD1080_ProcessFIFO+0xc>
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	20000118 	.word	0x20000118
 800055c:	2000018c 	.word	0x2000018c
 8000560:	200001a8 	.word	0x200001a8
 8000564:	200001c4 	.word	0x200001c4
 8000568:	200001e0 	.word	0x200001e0

0800056c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <APPD_EnableCPU2+0x34>)
 8000574:	1d3c      	adds	r4, r7, #4
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	c403      	stmia	r4!, {r0, r1}
 8000582:	8022      	strh	r2, [r4, #0]
 8000584:	3402      	adds	r4, #2
 8000586:	0c13      	lsrs	r3, r2, #16
 8000588:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800058a:	f006 ffdf 	bl	800754c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f006 fa70 	bl	8006a76 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000596:	bf00      	nop
}
 8000598:	3720      	adds	r7, #32
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	08009438 	.word	0x08009438

080005a4 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <LL_PWR_SMPS_Enable+0x1c>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <LL_PWR_SMPS_Enable+0x1c>)
 80005ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005b2:	61d3      	str	r3, [r2, #28]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	58000400 	.word	0x58000400

080005c4 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80005ce:	69db      	ldr	r3, [r3, #28]
 80005d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80005d4:	4904      	ldr	r1, [pc, #16]	@ (80005e8 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	61cb      	str	r3, [r1, #28]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	58000400 	.word	0x58000400

080005ec <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d108      	bne.n	8000618 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f023 020f 	bic.w	r2, r3, #15
 800060e:	4913      	ldr	r1, [pc, #76]	@ (800065c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4313      	orrs	r3, r2
 8000614:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8000616:	e019      	b.n	800064c <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3b06      	subs	r3, #6
 800061c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	4413      	add	r3, r2
 8000624:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b00      	cmp	r3, #0
 800062a:	da02      	bge.n	8000632 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e004      	b.n	800063c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	dd01      	ble.n	800063c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000638:	230f      	movs	r3, #15
 800063a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f023 020f 	bic.w	r2, r3, #15
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	4905      	ldr	r1, [pc, #20]	@ (800065c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000648:	4313      	orrs	r3, r2
 800064a:	61cb      	str	r3, [r1, #28]
}
 800064c:	bf00      	nop
 800064e:	371c      	adds	r7, #28
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	1fff7558 	.word	0x1fff7558
 800065c:	58000400 	.word	0x58000400

08000660 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <LL_C2_PWR_SetPowerMode+0x28>)
 800066a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800066e:	f023 0207 	bic.w	r2, r3, #7
 8000672:	4905      	ldr	r1, [pc, #20]	@ (8000688 <LL_C2_PWR_SetPowerMode+0x28>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4313      	orrs	r3, r2
 8000678:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	58000400 	.word	0x58000400

0800068c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000696:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800069a:	4905      	ldr	r1, [pc, #20]	@ (80006b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4313      	orrs	r3, r2
 80006a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	58000800 	.word	0x58000800

080006b4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006c0:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80006c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80006c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80006ce:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	021b      	lsls	r3, r3, #8
 80006d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006da:	4313      	orrs	r3, r2
 80006dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	cafecafe 	.word	0xcafecafe

080006f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80006f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	608b      	str	r3, [r1, #8]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800071c:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <LL_DBGMCU_GetDeviceID+0x18>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000724:	4618      	mov	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e0042000 	.word	0xe0042000

08000734 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <LL_DBGMCU_GetRevisionID+0x18>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	0c1b      	lsrs	r3, r3, #16
 800073e:	b29b      	uxth	r3, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e0042000 	.word	0xe0042000

08000750 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <LL_LPM_EnableSleep+0x1c>)
 8000756:	691b      	ldr	r3, [r3, #16]
 8000758:	4a04      	ldr	r2, [pc, #16]	@ (800076c <LL_LPM_EnableSleep+0x1c>)
 800075a:	f023 0304 	bic.w	r3, r3, #4
 800075e:	6113      	str	r3, [r2, #16]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	22ff      	movs	r2, #255	@ 0xff
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	22ca      	movs	r2, #202	@ 0xca
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2253      	movs	r2, #83	@ 0x53
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f023 0207 	bic.w	r2, r3, #7
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	609a      	str	r2, [r3, #8]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <MX_APPE_Config+0x18>)
 80007d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007da:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80007dc:	f000 f829 	bl	8000832 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80007e0:	f000 f82e 	bl	8000840 <Config_HSE>

  return;
 80007e4:	bf00      	nop
}
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58004000 	.word	0x58004000

080007ec <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80007f0:	f000 f83a 	bl	8000868 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80007f4:	f000 f852 	bl	800089c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007f8:	4903      	ldr	r1, [pc, #12]	@ (8000808 <MX_APPE_Init+0x1c>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fd9e 	bl	800133c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000800:	f000 f85a 	bl	80008b8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000804:	bf00      	nop
}
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000390 	.word	0x20000390

0800080c <Init_Smps>:

void Init_Smps(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fed7 	bl	80005c4 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000816:	2004      	movs	r0, #4
 8000818:	f7ff fee8 	bl	80005ec <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 800081c:	f7ff fec2 	bl	80005a4 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000820:	bf00      	nop
}
 8000822:	bd80      	pop	{r7, pc}

08000824 <Init_Exti>:

void Init_Exti(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000828:	2050      	movs	r0, #80	@ 0x50
 800082a:	f7ff ff2f 	bl	800068c <LL_EXTI_EnableIT_32_63>

  return;
 800082e:	bf00      	nop
}
 8000830:	bd80      	pop	{r7, pc}

08000832 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000836:	bf00      	nop
}
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000846:	2000      	movs	r0, #0
 8000848:	f006 ff0c 	bl	8007664 <OTP_Read>
 800084c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d005      	beq.n	8000860 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	799b      	ldrb	r3, [r3, #6]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff2b 	bl	80006b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800085e:	bf00      	nop
 8000860:	bf00      	nop
}
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <System_Init>:

static void System_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  Init_Smps();
 800086c:	f7ff ffce 	bl	800080c <Init_Smps>

  Init_Exti();
 8000870:	f7ff ffd8 	bl	8000824 <Init_Exti>

  Init_Rtc();
 8000874:	f000 f802 	bl	800087c <Init_Rtc>

  return;
 8000878:	bf00      	nop
}
 800087a:	bd80      	pop	{r7, pc}

0800087c <Init_Rtc>:

static void Init_Rtc(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <Init_Rtc+0x1c>)
 8000882:	f7ff ff82 	bl	800078a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000886:	2100      	movs	r1, #0
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <Init_Rtc+0x1c>)
 800088a:	f7ff ff8e 	bl	80007aa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800088e:	4802      	ldr	r0, [pc, #8]	@ (8000898 <Init_Rtc+0x1c>)
 8000890:	f7ff ff6e 	bl	8000770 <LL_RTC_EnableWriteProtection>

  return;
 8000894:	bf00      	nop
}
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40002800 	.word	0x40002800

0800089c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80008a0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80008a4:	f7ff ff24 	bl	80006f0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80008a8:	f008 fb24 	bl	8008ef4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80008ac:	2004      	movs	r0, #4
 80008ae:	f7ff fed7 	bl	8000660 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80008b2:	bf00      	nop
}
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80008be:	f006 fc8f 	bl	80071e0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80008c2:	4a11      	ldr	r2, [pc, #68]	@ (8000908 <appe_Tl_Init+0x50>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	2004      	movs	r0, #4
 80008c8:	f008 fc52 	bl	8009170 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <appe_Tl_Init+0x54>)
 80008ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <appe_Tl_Init+0x58>)
 80008d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	480e      	ldr	r0, [pc, #56]	@ (8000914 <appe_Tl_Init+0x5c>)
 80008da:	f006 fb43 	bl	8006f64 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <appe_Tl_Init+0x60>)
 80008e0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <appe_Tl_Init+0x64>)
 80008e4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <appe_Tl_Init+0x68>)
 80008e8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80008ea:	f240 533c 	movw	r3, #1340	@ 0x53c
 80008ee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4618      	mov	r0, r3
 80008f6:	f006 fdb5 	bl	8007464 <TL_MM_Init>

  TL_Enable();
 80008fa:	f006 fc6b 	bl	80071d4 <TL_Enable>

  return;
 80008fe:	bf00      	nop
}
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08006f9d 	.word	0x08006f9d
 800090c:	20030734 	.word	0x20030734
 8000910:	08000925 	.word	0x08000925
 8000914:	0800093d 	.word	0x0800093d
 8000918:	2003094c 	.word	0x2003094c
 800091c:	20030840 	.word	0x20030840
 8000920:	200301f8 	.word	0x200301f8

08000924 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800092e:	bf00      	nop
}
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	330b      	adds	r3, #11
 800094a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b29b      	uxth	r3, r3
 8000952:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000956:	2b07      	cmp	r3, #7
 8000958:	d81f      	bhi.n	800099a <APPE_SysUserEvtRx+0x5e>
 800095a:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <APPE_SysUserEvtRx+0x24>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	08000981 	.word	0x08000981
 8000964:	08000993 	.word	0x08000993
 8000968:	0800099b 	.word	0x0800099b
 800096c:	0800099b 	.word	0x0800099b
 8000970:	0800099b 	.word	0x0800099b
 8000974:	0800099b 	.word	0x0800099b
 8000978:	0800099b 	.word	0x0800099b
 800097c:	0800099b 	.word	0x0800099b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4618      	mov	r0, r3
 8000986:	f006 f8a3 	bl	8006ad0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f81b 	bl	80009c6 <APPE_SysEvtReadyProcessing>
    break;
 8000990:	e004      	b.n	800099c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f806 	bl	80009a4 <APPE_SysEvtError>
    break;
 8000998:	e000      	b.n	800099c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800099a:	bf00      	nop
  }

  return;
 800099c:	bf00      	nop
}
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	330b      	adds	r3, #11
 80009b2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3302      	adds	r3, #2
 80009b8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80009ba:	bf00      	nop
}
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b08a      	sub	sp, #40	@ 0x28
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	330b      	adds	r3, #11
 80009ea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	3302      	adds	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d11d      	bne.n	8000a36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80009fa:	f7ff fdb7 	bl	800056c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80009fe:	230f      	movs	r3, #15
 8000a00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000a02:	237f      	movs	r3, #127	@ 0x7f
 8000a04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000a06:	f7ff fe95 	bl	8000734 <LL_DBGMCU_GetRevisionID>
 8000a0a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000a12:	f7ff fe81 	bl	8000718 <LL_DBGMCU_GetDeviceID>
 8000a16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4618      	mov	r0, r3
 8000a24:	f006 f83e 	bl	8006aa4 <SHCI_C2_Config>

    APP_BLE_Init();
 8000a28:	f006 ff26 	bl	8007878 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f008 fa72 	bl	8008f18 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000a34:	e007      	b.n	8000a46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d103      	bne.n	8000a46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
  return;
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
}
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a56:	f001 fb1d 	bl	8002094 <HAL_GetTick>
 8000a5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a66:	d00a      	beq.n	8000a7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000a68:	f001 fb2c 	bl	80020c4 <HAL_GetTickFreq>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	e002      	b.n	8000a7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000a78:	f7ff fe6a 	bl	8000750 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000a7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000a7e:	f001 fb09 	bl	8002094 <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d8f4      	bhi.n	8000a78 <HAL_Delay+0x2a>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f008 fa6a 	bl	8008f78 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000aac:	bf00      	nop
}
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f008 fa58 	bl	8008f78 <UTIL_SEQ_Run>
  return;
 8000ac8:	bf00      	nop
}
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2004      	movs	r0, #4
 8000adc:	f008 fb6a 	bl	80091b4 <UTIL_SEQ_SetTask>
  return;
 8000ae0:	bf00      	nop
}
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f008 fbcb 	bl	800928c <UTIL_SEQ_SetEvt>
  return;
 8000af6:	bf00      	nop
}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b06:	2002      	movs	r0, #2
 8000b08:	f008 fbe0 	bl	80092cc <UTIL_SEQ_WaitEvt>
  return;
 8000b0c:	bf00      	nop
}
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LL_EXTI_EnableIT_0_31>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000b22:	4905      	ldr	r1, [pc, #20]	@ (8000b38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	58000800 	.word	0x58000800

08000b3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4904      	ldr	r1, [pc, #16]	@ (8000b5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	600b      	str	r3, [r1, #0]

}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58000800 	.word	0x58000800

08000b60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <ReadRtcSsrValue+0x3c>)
 8000b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <ReadRtcSsrValue+0x3c>)
 8000b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000b76:	e005      	b.n	8000b84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <ReadRtcSsrValue+0x3c>)
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d1f5      	bne.n	8000b78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000b8c:	683b      	ldr	r3, [r7, #0]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40002800 	.word	0x40002800

08000ba0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	491d      	ldr	r1, [pc, #116]	@ (8000c28 <LinkTimerAfter+0x88>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3315      	adds	r3, #21
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	d009      	beq.n	8000bde <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000bca:	7bfa      	ldrb	r2, [r7, #15]
 8000bcc:	4916      	ldr	r1, [pc, #88]	@ (8000c28 <LinkTimerAfter+0x88>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3314      	adds	r3, #20
 8000bda:	79fa      	ldrb	r2, [r7, #7]
 8000bdc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	4911      	ldr	r1, [pc, #68]	@ (8000c28 <LinkTimerAfter+0x88>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	3315      	adds	r3, #21
 8000bee:	7bfa      	ldrb	r2, [r7, #15]
 8000bf0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	490c      	ldr	r1, [pc, #48]	@ (8000c28 <LinkTimerAfter+0x88>)
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	440b      	add	r3, r1
 8000c00:	3314      	adds	r3, #20
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	4907      	ldr	r1, [pc, #28]	@ (8000c28 <LinkTimerAfter+0x88>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3315      	adds	r3, #21
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	701a      	strb	r2, [r3, #0]

  return;
 8000c1a:	bf00      	nop
}
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000200 	.word	0x20000200

08000c2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	460a      	mov	r2, r1
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000c3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <LinkTimerBefore+0xb8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	79ba      	ldrb	r2, [r7, #6]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d032      	beq.n	8000cae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	4927      	ldr	r1, [pc, #156]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	3314      	adds	r3, #20
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	4922      	ldr	r1, [pc, #136]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	3315      	adds	r3, #21
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	491d      	ldr	r1, [pc, #116]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	3315      	adds	r3, #21
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	4918      	ldr	r1, [pc, #96]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3314      	adds	r3, #20
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	4913      	ldr	r1, [pc, #76]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3314      	adds	r3, #20
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000cac:	e014      	b.n	8000cd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	3315      	adds	r3, #21
 8000cbe:	79ba      	ldrb	r2, [r7, #6]
 8000cc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000cc2:	79ba      	ldrb	r2, [r7, #6]
 8000cc4:	4908      	ldr	r1, [pc, #32]	@ (8000ce8 <LinkTimerBefore+0xbc>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	4413      	add	r3, r2
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	440b      	add	r3, r1
 8000cd0:	3314      	adds	r3, #20
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	701a      	strb	r2, [r3, #0]
  return;
 8000cd6:	bf00      	nop
}
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200002f0 	.word	0x200002f0
 8000ce8:	20000200 	.word	0x20000200

08000cec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8000e30 <linkTimer+0x144>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b0a      	cmp	r3, #10
 8000cfe:	d118      	bne.n	8000d32 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d00:	4b4b      	ldr	r3, [pc, #300]	@ (8000e30 <linkTimer+0x144>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <linkTimer+0x148>)
 8000d08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000d0a:	4a49      	ldr	r2, [pc, #292]	@ (8000e30 <linkTimer+0x144>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	4949      	ldr	r1, [pc, #292]	@ (8000e38 <linkTimer+0x14c>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	3315      	adds	r3, #21
 8000d20:	220a      	movs	r2, #10
 8000d22:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d24:	4b45      	ldr	r3, [pc, #276]	@ (8000e3c <linkTimer+0x150>)
 8000d26:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	81fb      	strh	r3, [r7, #14]
 8000d30:	e078      	b.n	8000e24 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000d32:	f000 f909 	bl	8000f48 <ReturnTimeElapsed>
 8000d36:	4603      	mov	r3, r0
 8000d38:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	493e      	ldr	r1, [pc, #248]	@ (8000e38 <linkTimer+0x14c>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	440b      	add	r3, r1
 8000d48:	3308      	adds	r3, #8
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	4419      	add	r1, r3
 8000d52:	4839      	ldr	r0, [pc, #228]	@ (8000e38 <linkTimer+0x14c>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4403      	add	r3, r0
 8000d5e:	3308      	adds	r3, #8
 8000d60:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	4934      	ldr	r1, [pc, #208]	@ (8000e38 <linkTimer+0x14c>)
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	3308      	adds	r3, #8
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <linkTimer+0x144>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e38 <linkTimer+0x14c>)
 8000d80:	460b      	mov	r3, r1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	440b      	add	r3, r1
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d337      	bcc.n	8000e04 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000d94:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <linkTimer+0x144>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000d9a:	7b7a      	ldrb	r2, [r7, #13]
 8000d9c:	4926      	ldr	r1, [pc, #152]	@ (8000e38 <linkTimer+0x14c>)
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	3315      	adds	r3, #21
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000dae:	e013      	b.n	8000dd8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000db0:	7b7a      	ldrb	r2, [r7, #13]
 8000db2:	4921      	ldr	r1, [pc, #132]	@ (8000e38 <linkTimer+0x14c>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3315      	adds	r3, #21
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000dc4:	7b7a      	ldrb	r2, [r7, #13]
 8000dc6:	491c      	ldr	r1, [pc, #112]	@ (8000e38 <linkTimer+0x14c>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	3315      	adds	r3, #21
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000dd8:	7b3b      	ldrb	r3, [r7, #12]
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	d00b      	beq.n	8000df6 <linkTimer+0x10a>
 8000dde:	7b3a      	ldrb	r2, [r7, #12]
 8000de0:	4915      	ldr	r1, [pc, #84]	@ (8000e38 <linkTimer+0x14c>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	440b      	add	r3, r1
 8000dec:	3308      	adds	r3, #8
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d2dc      	bcs.n	8000db0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000df6:	7b7a      	ldrb	r2, [r7, #13]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fecf 	bl	8000ba0 <LinkTimerAfter>
 8000e02:	e00f      	b.n	8000e24 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <linkTimer+0x144>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff0c 	bl	8000c2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <linkTimer+0x144>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <linkTimer+0x148>)
 8000e1c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <linkTimer+0x144>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000e24:	89fb      	ldrh	r3, [r7, #14]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002f0 	.word	0x200002f0
 8000e34:	200002f1 	.word	0x200002f1
 8000e38:	20000200 	.word	0x20000200
 8000e3c:	200002f4 	.word	0x200002f4

08000e40 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	460a      	mov	r2, r1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000e50:	4b39      	ldr	r3, [pc, #228]	@ (8000f38 <UnlinkTimer+0xf8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	79fa      	ldrb	r2, [r7, #7]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d111      	bne.n	8000e80 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e5c:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <UnlinkTimer+0xf8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <UnlinkTimer+0xfc>)
 8000e64:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	4935      	ldr	r1, [pc, #212]	@ (8000f40 <UnlinkTimer+0x100>)
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	440b      	add	r3, r1
 8000e74:	3315      	adds	r3, #21
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <UnlinkTimer+0xf8>)
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e03e      	b.n	8000efe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	492f      	ldr	r1, [pc, #188]	@ (8000f40 <UnlinkTimer+0x100>)
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3314      	adds	r3, #20
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	492a      	ldr	r1, [pc, #168]	@ (8000f40 <UnlinkTimer+0x100>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3315      	adds	r3, #21
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000ea8:	79f9      	ldrb	r1, [r7, #7]
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	4824      	ldr	r0, [pc, #144]	@ (8000f40 <UnlinkTimer+0x100>)
 8000eae:	460b      	mov	r3, r1
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	440b      	add	r3, r1
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4403      	add	r3, r0
 8000eb8:	3315      	adds	r3, #21
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2d8      	uxtb	r0, r3
 8000ebe:	4920      	ldr	r1, [pc, #128]	@ (8000f40 <UnlinkTimer+0x100>)
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	440b      	add	r3, r1
 8000eca:	3315      	adds	r3, #21
 8000ecc:	4602      	mov	r2, r0
 8000ece:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	2b0a      	cmp	r3, #10
 8000ed4:	d013      	beq.n	8000efe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000ed6:	79f9      	ldrb	r1, [r7, #7]
 8000ed8:	7bba      	ldrb	r2, [r7, #14]
 8000eda:	4819      	ldr	r0, [pc, #100]	@ (8000f40 <UnlinkTimer+0x100>)
 8000edc:	460b      	mov	r3, r1
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	440b      	add	r3, r1
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4403      	add	r3, r0
 8000ee6:	3314      	adds	r3, #20
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2d8      	uxtb	r0, r3
 8000eec:	4914      	ldr	r1, [pc, #80]	@ (8000f40 <UnlinkTimer+0x100>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3314      	adds	r3, #20
 8000efa:	4602      	mov	r2, r0
 8000efc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	490f      	ldr	r1, [pc, #60]	@ (8000f40 <UnlinkTimer+0x100>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	330c      	adds	r3, #12
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <UnlinkTimer+0xf8>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b0a      	cmp	r3, #10
 8000f1a:	d107      	bne.n	8000f2c <UnlinkTimer+0xec>
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <UnlinkTimer+0x104>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	601a      	str	r2, [r3, #0]
  }

  return;
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
}
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	200002f0 	.word	0x200002f0
 8000f3c:	200002f1 	.word	0x200002f1
 8000f40:	20000200 	.word	0x20000200
 8000f44:	200002f4 	.word	0x200002f4

08000f48 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <ReturnTimeElapsed+0x70>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f56:	d026      	beq.n	8000fa6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000f58:	f7ff fe02 	bl	8000b60 <ReadRtcSsrValue>
 8000f5c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <ReturnTimeElapsed+0x70>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d805      	bhi.n	8000f74 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <ReturnTimeElapsed+0x70>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e00a      	b.n	8000f8a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <ReturnTimeElapsed+0x74>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <ReturnTimeElapsed+0x70>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <ReturnTimeElapsed+0x78>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <ReturnTimeElapsed+0x7c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	40d3      	lsrs	r3, r2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	e001      	b.n	8000faa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	b29b      	uxth	r3, r3
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002f4 	.word	0x200002f4
 8000fbc:	200002fc 	.word	0x200002fc
 8000fc0:	200002fa 	.word	0x200002fa
 8000fc4:	200002f9 	.word	0x200002f9

08000fc8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d108      	bne.n	8000fea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000fd8:	f7ff fdc2 	bl	8000b60 <ReadRtcSsrValue>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <RestartWakeupCounter+0x9c>)
 8000fe0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f001 f9f7 	bl	80023d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000fe8:	e039      	b.n	800105e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d803      	bhi.n	8000ff8 <RestartWakeupCounter+0x30>
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <RestartWakeupCounter+0xa0>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d002      	beq.n	8000ffe <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000ffe:	bf00      	nop
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <RestartWakeupCounter+0xa4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f8      	beq.n	8001000 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <RestartWakeupCounter+0xa4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <RestartWakeupCounter+0xa4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800101e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <RestartWakeupCounter+0xa8>)
 8001022:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001026:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001028:	2003      	movs	r0, #3
 800102a:	f001 f9e2 	bl	80023f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <RestartWakeupCounter+0xac>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	041b      	lsls	r3, r3, #16
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	490e      	ldr	r1, [pc, #56]	@ (8001074 <RestartWakeupCounter+0xac>)
 800103a:	4313      	orrs	r3, r2
 800103c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800103e:	f7ff fd8f 	bl	8000b60 <ReadRtcSsrValue>
 8001042:	4603      	mov	r3, r0
 8001044:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <RestartWakeupCounter+0x9c>)
 8001046:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <RestartWakeupCounter+0xa4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <RestartWakeupCounter+0xa4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001056:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001058:	f3af 8000 	nop.w
  return ;
 800105c:	bf00      	nop
}
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200002f4 	.word	0x200002f4
 8001068:	200002f9 	.word	0x200002f9
 800106c:	20000390 	.word	0x20000390
 8001070:	58000800 	.word	0x58000800
 8001074:	40002800 	.word	0x40002800

08001078 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800107e:	4b45      	ldr	r3, [pc, #276]	@ (8001194 <RescheduleTimerList+0x11c>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108a:	d107      	bne.n	800109c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800108c:	bf00      	nop
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <RescheduleTimerList+0x120>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f8      	bne.n	800108e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800109c:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <RescheduleTimerList+0x120>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <RescheduleTimerList+0x120>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80010ac:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <RescheduleTimerList+0x124>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	493a      	ldr	r1, [pc, #232]	@ (80011a0 <RescheduleTimerList+0x128>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	440b      	add	r3, r1
 80010c0:	3308      	adds	r3, #8
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80010c6:	f7ff ff3f 	bl	8000f48 <ReturnTimeElapsed>
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d205      	bcs.n	80010e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010da:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <RescheduleTimerList+0x12c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e04d      	b.n	800117e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	4a30      	ldr	r2, [pc, #192]	@ (80011a8 <RescheduleTimerList+0x130>)
 80010e6:	8812      	ldrh	r2, [r2, #0]
 80010e8:	b292      	uxth	r2, r2
 80010ea:	4413      	add	r3, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d906      	bls.n	8001102 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <RescheduleTimerList+0x130>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <RescheduleTimerList+0x12c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e03d      	b.n	800117e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	b29a      	uxth	r2, r3
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800110c:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <RescheduleTimerList+0x12c>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001112:	e034      	b.n	800117e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	4922      	ldr	r1, [pc, #136]	@ (80011a0 <RescheduleTimerList+0x128>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	3308      	adds	r3, #8
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	429a      	cmp	r2, r3
 800112a:	d20a      	bcs.n	8001142 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	491c      	ldr	r1, [pc, #112]	@ (80011a0 <RescheduleTimerList+0x128>)
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	3308      	adds	r3, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e013      	b.n	800116a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	4916      	ldr	r1, [pc, #88]	@ (80011a0 <RescheduleTimerList+0x128>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3308      	adds	r3, #8
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	1ac9      	subs	r1, r1, r3
 800115a:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <RescheduleTimerList+0x128>)
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4403      	add	r3, r0
 8001166:	3308      	adds	r3, #8
 8001168:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <RescheduleTimerList+0x128>)
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	3315      	adds	r3, #21
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b0a      	cmp	r3, #10
 8001182:	d1c7      	bne.n	8001114 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001184:	89bb      	ldrh	r3, [r7, #12]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff1e 	bl	8000fc8 <RestartWakeupCounter>

  return ;
 800118c:	bf00      	nop
}
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40002800 	.word	0x40002800
 8001198:	20000390 	.word	0x20000390
 800119c:	200002f0 	.word	0x200002f0
 80011a0:	20000200 	.word	0x20000200
 80011a4:	200002f8 	.word	0x200002f8
 80011a8:	200002fe 	.word	0x200002fe

080011ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011b2:	f3ef 8310 	mrs	r3, PRIMASK
 80011b6:	617b      	str	r3, [r7, #20]
  return(result);
 80011b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011c0:	4b59      	ldr	r3, [pc, #356]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	22ca      	movs	r2, #202	@ 0xca
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80011c8:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2253      	movs	r2, #83	@ 0x53
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80011d0:	4b55      	ldr	r3, [pc, #340]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80011e0:	4b52      	ldr	r3, [pc, #328]	@ (800132c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80011e8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80011ec:	4950      	ldr	r1, [pc, #320]	@ (8001330 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	330c      	adds	r3, #12
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d16e      	bne.n	80012e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001202:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001206:	494a      	ldr	r1, [pc, #296]	@ (8001330 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001216:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800121a:	4945      	ldr	r1, [pc, #276]	@ (8001330 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	3310      	adds	r3, #16
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800122c:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d04c      	beq.n	80012d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001236:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800123a:	493d      	ldr	r1, [pc, #244]	@ (8001330 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	330d      	adds	r3, #13
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	d124      	bne.n	800129a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001250:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001254:	2101      	movs	r1, #1
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fdf2 	bl	8000e40 <UnlinkTimer>
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f383 8810 	msr	PRIMASK, r3
}
 8001266:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001268:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800126c:	4930      	ldr	r1, [pc, #192]	@ (8001330 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3304      	adds	r3, #4
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fa32 	bl	80016ec <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001288:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	22ca      	movs	r2, #202	@ 0xca
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001290:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2253      	movs	r2, #83	@ 0x53
 8001296:	625a      	str	r2, [r3, #36]	@ 0x24
 8001298:	e012      	b.n	80012c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f383 8810 	msr	PRIMASK, r3
}
 80012a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80012a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f99a 	bl	80015e4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	22ca      	movs	r2, #202	@ 0xca
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2253      	movs	r2, #83	@ 0x53
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80012c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	4619      	mov	r1, r3
 80012c8:	69b8      	ldr	r0, [r7, #24]
 80012ca:	f000 fa95 	bl	80017f8 <HW_TS_RTC_Int_AppNot>
 80012ce:	e022      	b.n	8001316 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80012d0:	f7ff fed2 	bl	8001078 <RescheduleTimerList>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f383 8810 	msr	PRIMASK, r3
}
 80012de:	e01a      	b.n	8001316 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80012e0:	bf00      	nop
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f8      	beq.n	80012e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001300:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001304:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f383 8810 	msr	PRIMASK, r3
}
 8001314:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	22ff      	movs	r2, #255	@ 0xff
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800131e:	bf00      	nop
}
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000390 	.word	0x20000390
 800132c:	200002f0 	.word	0x200002f0
 8001330:	20000200 	.word	0x20000200
 8001334:	200002f8 	.word	0x200002f8
 8001338:	58000800 	.word	0x58000800

0800133c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001348:	4b5e      	ldr	r3, [pc, #376]	@ (80014c4 <HW_TS_Init+0x188>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	22ca      	movs	r2, #202	@ 0xca
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001350:	4b5c      	ldr	r3, [pc, #368]	@ (80014c4 <HW_TS_Init+0x188>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2253      	movs	r2, #83	@ 0x53
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001358:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <HW_TS_Init+0x18c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a5a      	ldr	r2, [pc, #360]	@ (80014c8 <HW_TS_Init+0x18c>)
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001364:	4b58      	ldr	r3, [pc, #352]	@ (80014c8 <HW_TS_Init+0x18c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f1c3 0304 	rsb	r3, r3, #4
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <HW_TS_Init+0x190>)
 8001378:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800137a:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HW_TS_Init+0x18c>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001382:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001386:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	fa92 f2a2 	rbit	r2, r2
 800138e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	2a00      	cmp	r2, #0
 8001398:	d101      	bne.n	800139e <HW_TS_Init+0x62>
  {
    return 32U;
 800139a:	2220      	movs	r2, #32
 800139c:	e003      	b.n	80013a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	fab2 f282 	clz	r2, r2
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	40d3      	lsrs	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b48      	ldr	r3, [pc, #288]	@ (80014d0 <HW_TS_Init+0x194>)
 80013b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80013b2:	4b45      	ldr	r3, [pc, #276]	@ (80014c8 <HW_TS_Init+0x18c>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b44      	ldr	r3, [pc, #272]	@ (80014d4 <HW_TS_Init+0x198>)
 80013c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <HW_TS_Init+0x198>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4a40      	ldr	r2, [pc, #256]	@ (80014d0 <HW_TS_Init+0x194>)
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80013d8:	4a3c      	ldr	r2, [pc, #240]	@ (80014cc <HW_TS_Init+0x190>)
 80013da:	7812      	ldrb	r2, [r2, #0]
 80013dc:	40d3      	lsrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d904      	bls.n	80013f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	@ (80014d8 <HW_TS_Init+0x19c>)
 80013ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013f0:	801a      	strh	r2, [r3, #0]
 80013f2:	e003      	b.n	80013fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HW_TS_Init+0x19c>)
 80013fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80013fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001400:	f7ff fb9c 	bl	8000b3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001404:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001408:	f7ff fb84 	bl	8000b14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d13d      	bne.n	800148e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <HW_TS_Init+0x1a0>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001418:	4b31      	ldr	r3, [pc, #196]	@ (80014e0 <HW_TS_Init+0x1a4>)
 800141a:	f04f 32ff 	mov.w	r2, #4294967295
 800141e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001420:	2300      	movs	r3, #0
 8001422:	77fb      	strb	r3, [r7, #31]
 8001424:	e00c      	b.n	8001440 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001426:	7ffa      	ldrb	r2, [r7, #31]
 8001428:	492e      	ldr	r1, [pc, #184]	@ (80014e4 <HW_TS_Init+0x1a8>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	330c      	adds	r3, #12
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	3301      	adds	r3, #1
 800143e:	77fb      	strb	r3, [r7, #31]
 8001440:	7ffb      	ldrb	r3, [r7, #31]
 8001442:	2b09      	cmp	r3, #9
 8001444:	d9ef      	bls.n	8001426 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001446:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HW_TS_Init+0x1ac>)
 8001448:	220a      	movs	r2, #10
 800144a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800144c:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <HW_TS_Init+0x188>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <HW_TS_Init+0x188>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800145a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HW_TS_Init+0x188>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HW_TS_Init+0x188>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800146c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <HW_TS_Init+0x1b0>)
 8001470:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001474:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001476:	2003      	movs	r0, #3
 8001478:	f000 ffbb 	bl	80023f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HW_TS_Init+0x188>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HW_TS_Init+0x188>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e009      	b.n	80014a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HW_TS_Init+0x188>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 ff9a 	bl	80023d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <HW_TS_Init+0x188>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	22ff      	movs	r2, #255	@ 0xff
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 ff4f 	bl	8002352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 ff66 	bl	8002386 <HAL_NVIC_EnableIRQ>

  return;
 80014ba:	bf00      	nop
}
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000390 	.word	0x20000390
 80014c8:	40002800 	.word	0x40002800
 80014cc:	200002f9 	.word	0x200002f9
 80014d0:	200002fa 	.word	0x200002fa
 80014d4:	200002fc 	.word	0x200002fc
 80014d8:	200002fe 	.word	0x200002fe
 80014dc:	200002f8 	.word	0x200002f8
 80014e0:	200002f4 	.word	0x200002f4
 80014e4:	20000200 	.word	0x20000200
 80014e8:	200002f0 	.word	0x200002f0
 80014ec:	58000800 	.word	0x58000800

080014f0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	@ 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001506:	f3ef 8310 	mrs	r3, PRIMASK
 800150a:	61fb      	str	r3, [r7, #28]
  return(result);
 800150c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800150e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001514:	e004      	b.n	8001520 <HW_TS_Create+0x30>
  {
    loop++;
 8001516:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800151a:	3301      	adds	r3, #1
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001524:	2b09      	cmp	r3, #9
 8001526:	d80c      	bhi.n	8001542 <HW_TS_Create+0x52>
 8001528:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800152c:	492c      	ldr	r1, [pc, #176]	@ (80015e0 <HW_TS_Create+0xf0>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	330c      	adds	r3, #12
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e9      	bne.n	8001516 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001542:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001546:	2b0a      	cmp	r3, #10
 8001548:	d038      	beq.n	80015bc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800154a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800154e:	4924      	ldr	r1, [pc, #144]	@ (80015e0 <HW_TS_Create+0xf0>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	330c      	adds	r3, #12
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f383 8810 	msr	PRIMASK, r3
}
 800156a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800156c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001570:	491b      	ldr	r1, [pc, #108]	@ (80015e0 <HW_TS_Create+0xf0>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3310      	adds	r3, #16
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001582:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001586:	4916      	ldr	r1, [pc, #88]	@ (80015e0 <HW_TS_Create+0xf0>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	330d      	adds	r3, #13
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001598:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800159c:	4910      	ldr	r1, [pc, #64]	@ (80015e0 <HW_TS_Create+0xf0>)
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80015b2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015ba:	e008      	b.n	80015ce <HW_TS_Create+0xde>
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f383 8810 	msr	PRIMASK, r3
}
 80015c6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 80015ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	372c      	adds	r7, #44	@ 0x2c
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000200 	.word	0x20000200

080015e4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ee:	f3ef 8310 	mrs	r3, PRIMASK
 80015f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80015f4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80015f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 fed0 	bl	80023a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001602:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	22ca      	movs	r2, #202	@ 0xca
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
 800160a:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <HW_TS_Stop+0xf0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2253      	movs	r2, #83	@ 0x53
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	4930      	ldr	r1, [pc, #192]	@ (80016d8 <HW_TS_Stop+0xf4>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	330c      	adds	r3, #12
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d142      	bne.n	80016b0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fc06 	bl	8000e40 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HW_TS_Stop+0xf8>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	2b0a      	cmp	r3, #10
 800163e:	d12f      	bne.n	80016a0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001640:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HW_TS_Stop+0xfc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800164c:	d107      	bne.n	800165e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800164e:	bf00      	nop
 8001650:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f8      	bne.n	8001650 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800166c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800166e:	bf00      	nop
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f8      	beq.n	8001670 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <HW_TS_Stop+0xf0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800168e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <HW_TS_Stop+0x100>)
 8001692:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001696:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001698:	2003      	movs	r0, #3
 800169a:	f000 feaa 	bl	80023f2 <HAL_NVIC_ClearPendingIRQ>
 800169e:	e007      	b.n	80016b0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HW_TS_Stop+0x104>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	7cfa      	ldrb	r2, [r7, #19]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80016ac:	f7ff fce4 	bl	8001078 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HW_TS_Stop+0xf0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	22ff      	movs	r2, #255	@ 0xff
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 fe64 	bl	8002386 <HAL_NVIC_EnableIRQ>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f383 8810 	msr	PRIMASK, r3
}
 80016c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016ca:	bf00      	nop
}
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000390 	.word	0x20000390
 80016d8:	20000200 	.word	0x20000200
 80016dc:	200002f0 	.word	0x200002f0
 80016e0:	40002800 	.word	0x40002800
 80016e4:	58000800 	.word	0x58000800
 80016e8:	200002f1 	.word	0x200002f1

080016ec <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80016f8:	79fa      	ldrb	r2, [r7, #7]
 80016fa:	493b      	ldr	r1, [pc, #236]	@ (80017e8 <HW_TS_Start+0xfc>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	330c      	adds	r3, #12
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d103      	bne.n	8001718 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff66 	bl	80015e4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001718:	f3ef 8310 	mrs	r3, PRIMASK
 800171c:	60fb      	str	r3, [r7, #12]
  return(result);
 800171e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001722:	b672      	cpsid	i
}
 8001724:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001726:	2003      	movs	r0, #3
 8001728:	f000 fe3b 	bl	80023a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800172c:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <HW_TS_Start+0x100>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	22ca      	movs	r2, #202	@ 0xca
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24
 8001734:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <HW_TS_Start+0x100>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2253      	movs	r2, #83	@ 0x53
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800173c:	79fa      	ldrb	r2, [r7, #7]
 800173e:	492a      	ldr	r1, [pc, #168]	@ (80017e8 <HW_TS_Start+0xfc>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	330c      	adds	r3, #12
 800174c:	2202      	movs	r2, #2
 800174e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	4925      	ldr	r1, [pc, #148]	@ (80017e8 <HW_TS_Start+0xfc>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3308      	adds	r3, #8
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	4920      	ldr	r1, [pc, #128]	@ (80017e8 <HW_TS_Start+0xfc>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3304      	adds	r3, #4
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fab6 	bl	8000cec <linkTimer>
 8001780:	4603      	mov	r3, r0
 8001782:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HW_TS_Start+0x104>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HW_TS_Start+0x108>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	7c7a      	ldrb	r2, [r7, #17]
 8001792:	429a      	cmp	r2, r3
 8001794:	d002      	beq.n	800179c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001796:	f7ff fc6f 	bl	8001078 <RescheduleTimerList>
 800179a:	e013      	b.n	80017c4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	4912      	ldr	r1, [pc, #72]	@ (80017e8 <HW_TS_Start+0xfc>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	3308      	adds	r3, #8
 80017ac:	6819      	ldr	r1, [r3, #0]
 80017ae:	8a7b      	ldrh	r3, [r7, #18]
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	1ac9      	subs	r1, r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <HW_TS_Start+0xfc>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4403      	add	r3, r0
 80017c0:	3308      	adds	r3, #8
 80017c2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HW_TS_Start+0x100>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	22ff      	movs	r2, #255	@ 0xff
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 fdda 	bl	8002386 <HAL_NVIC_EnableIRQ>
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f383 8810 	msr	PRIMASK, r3
}
 80017dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017de:	bf00      	nop
}
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000200 	.word	0x20000200
 80017ec:	20000390 	.word	0x20000390
 80017f0:	200002f0 	.word	0x200002f0
 80017f4:	200002f1 	.word	0x200002f1

080017f8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	460b      	mov	r3, r1
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4798      	blx	r3

  return;
 800180a:	bf00      	nop
}
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001820:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184a:	f000 fbb5 	bl	8001fb8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800184e:	f7fe ffbf 	bl	80007d0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f82d 	bl	80018b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001856:	f000 f897 	bl	8001988 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800185a:	f000 f8f5 	bl	8001a48 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 800185e:	f000 f907 	bl	8001a70 <MX_RF_Init>
  MX_GPIO_Init();
 8001862:	f000 f941 	bl	8001ae8 <MX_GPIO_Init>
  MX_RTC_Init();
 8001866:	f000 f90b 	bl	8001a80 <MX_RTC_Init>
  MX_I2C1_Init();
 800186a:	f000 f8ad 	bl	80019c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADPD1080_ReadAllRegisters(&hi2c1);
 800186e:	480e      	ldr	r0, [pc, #56]	@ (80018a8 <main+0x64>)
 8001870:	f7fe fc8c 	bl	800018c <ADPD1080_ReadAllRegisters>
  ADPD1080_CheckRegisters(&hi2c1);
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <main+0x64>)
 8001876:	f7fe fd51 	bl	800031c <ADPD1080_CheckRegisters>
  HAL_I2C_Mem_Read(&hi2c1, ADPD1080_ADDR, 0x14, I2C_MEMADD_SIZE_8BIT, reg_data, 2, HAL_MAX_DELAY);
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2302      	movs	r3, #2
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <main+0x68>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	2214      	movs	r2, #20
 800188c:	21c8      	movs	r1, #200	@ 0xc8
 800188e:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <main+0x64>)
 8001890:	f001 f902 	bl	8002a98 <HAL_I2C_Mem_Read>
  //HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_ADDR, 0x11, I2C_MEMADD_SIZE_8BIT, register_value2, 2, HAL_MAX_DELAY);

  HAL_Delay(1000);
 8001894:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001898:	f7ff f8d9 	bl	8000a4e <HAL_Delay>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800189c:	f7fe ffa6 	bl	80007ec <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80018a0:	f7ff f8fa 	bl	8000a98 <MX_APPE_Process>
 80018a4:	e7fc      	b.n	80018a0 <main+0x5c>
 80018a6:	bf00      	nop
 80018a8:	20000300 	.word	0x20000300
 80018ac:	200003b4 	.word	0x200003b4

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09a      	sub	sp, #104	@ 0x68
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2248      	movs	r2, #72	@ 0x48
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f007 fd74 	bl	80093ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <SystemClock_Config+0xd4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018de:	4a29      	ldr	r2, [pc, #164]	@ (8001984 <SystemClock_Config+0xd4>)
 80018e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <SystemClock_Config+0xd4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80018f2:	232b      	movs	r3, #43	@ 0x2b
 80018f4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001902:	2301      	movs	r3, #1
 8001904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001906:	2340      	movs	r3, #64	@ 0x40
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800190a:	2300      	movs	r3, #0
 800190c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800190e:	2360      	movs	r3, #96	@ 0x60
 8001910:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001912:	2305      	movs	r3, #5
 8001914:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800191a:	2301      	movs	r3, #1
 800191c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001922:	2320      	movs	r3, #32
 8001924:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800192a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800192c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001930:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001936:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f921 	bl	8003b84 <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001948:	f000 f940 	bl	8001bcc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800194c:	236f      	movs	r3, #111	@ 0x6f
 800194e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001950:	2303      	movs	r3, #3
 8001952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2103      	movs	r1, #3
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fc7d 	bl	800426c <HAL_RCC_ClockConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001978:	f000 f928 	bl	8001bcc <Error_Handler>
  }
}
 800197c:	bf00      	nop
 800197e:	3768      	adds	r7, #104	@ 0x68
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58000400 	.word	0x58000400

08001988 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2250      	movs	r2, #80	@ 0x50
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f007 fd09 	bl	80093ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800199a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800199e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80019a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80019aa:	2310      	movs	r3, #16
 80019ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f86c 	bl	8004a8e <HAL_RCCEx_PeriphCLKConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019bc:	f000 f906 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019c0:	bf00      	nop
 80019c2:	3750      	adds	r7, #80	@ 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <MX_I2C1_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <MX_I2C1_Init+0x7c>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019d8:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a02:	480e      	ldr	r0, [pc, #56]	@ (8001a3c <MX_I2C1_Init+0x74>)
 8001a04:	f000 fe98 	bl	8002738 <HAL_I2C_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a0e:	f000 f8dd 	bl	8001bcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <MX_I2C1_Init+0x74>)
 8001a16:	f001 fc1b 	bl	8003250 <HAL_I2CEx_ConfigAnalogFilter>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a20:	f000 f8d4 	bl	8001bcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a24:	2100      	movs	r1, #0
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <MX_I2C1_Init+0x74>)
 8001a28:	f001 fc5d 	bl	80032e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f000 f8cb 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000300 	.word	0x20000300
 8001a40:	40005400 	.word	0x40005400
 8001a44:	10b17db5 	.word	0x10b17db5

08001a48 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_IPCC_Init+0x20>)
 8001a4e:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <MX_IPCC_Init+0x24>)
 8001a50:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <MX_IPCC_Init+0x20>)
 8001a54:	f001 fc94 	bl	8003380 <HAL_IPCC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a5e:	f000 f8b5 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000354 	.word	0x20000354
 8001a6c:	58000c00 	.word	0x58000c00

08001a70 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a84:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001a86:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <MX_RTC_Init+0x64>)
 8001a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001a92:	220f      	movs	r2, #15
 8001a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001a98:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001a9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001ab8:	f003 fa70 	bl	8004f9c <HAL_RTC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f883 	bl	8001bcc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_RTC_Init+0x60>)
 8001acc:	f003 fb66 	bl	800519c <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001ad6:	f000 f879 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000390 	.word	0x20000390
 8001ae4:	40002800 	.word	0x40002800

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff fe88 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	2004      	movs	r0, #4
 8001b04:	f7ff fe85 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff fe82 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	2080      	movs	r0, #128	@ 0x80
 8001b10:	f7ff fe7f 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b14:	2008      	movs	r0, #8
 8001b16:	f7ff fe7c 	bl	8001812 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b1a:	2010      	movs	r0, #16
 8001b1c:	f7ff fe79 	bl	8001812 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : PA2 PA1 PA0 PA15
                           PA10 PA12 PA11 PA8
                           PA9 PA7 PA6 PA5
                           PA4 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_15
 8001b20:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 8001b24:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_4|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	2303      	movs	r3, #3
 8001b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b36:	f000 fc6b 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC2 PC1 PC0
                           PC10 PC11 PC12 PC6
                           PC13 PC5 PC4 PC9
                           PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8001b3a:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001b3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_6
                          |GPIO_PIN_13|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_9
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481a      	ldr	r0, [pc, #104]	@ (8001bb8 <MX_GPIO_Init+0xd0>)
 8001b4e:	f000 fc5f 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB5 PB4 PB3
                           PB13 PB14 PB15 PB6
                           PB12 PB1 PB0 PB11
                           PB10 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001b52:	f64f 637f 	movw	r3, #65151	@ 0xfe7f
 8001b56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_10|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4815      	ldr	r0, [pc, #84]	@ (8001bbc <MX_GPIO_Init+0xd4>)
 8001b66:	f000 fc53 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH3 PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8001b6a:	230b      	movs	r3, #11
 8001b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4811      	ldr	r0, [pc, #68]	@ (8001bc0 <MX_GPIO_Init+0xd8>)
 8001b7c:	f000 fc48 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD14 PD13
                           PD12 PD7 PD2 PD3
                           PD4 PD9 PD8 PD15
                           PD10 PD5 PD6 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_13
 8001b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b84:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <MX_GPIO_Init+0xdc>)
 8001b94:	f000 fc3c 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE1 PE3 PE2
                           PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_2
 8001b98:	231f      	movs	r3, #31
 8001b9a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4807      	ldr	r0, [pc, #28]	@ (8001bc8 <MX_GPIO_Init+0xe0>)
 8001baa:	f000 fc31 	bl	8002410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	48001c00 	.word	0x48001c00
 8001bc4:	48000c00 	.word	0x48000c00
 8001bc8:	48001000 	.word	0x48001000

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <Error_Handler+0x8>

08001bd8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_AHB2_GRP1_EnableClock>:
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c50:	68fb      	ldr	r3, [r7, #12]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c94:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001c98:	f7ff ffc8 	bl	8001c2c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f000 fb56 	bl	8002352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ca6:	2005      	movs	r0, #5
 8001ca8:	f000 fb6d 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2100      	movs	r1, #0
 8001cb0:	202e      	movs	r0, #46	@ 0x2e
 8001cb2:	f000 fb4e 	bl	8002352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001cb6:	202e      	movs	r0, #46	@ 0x2e
 8001cb8:	f000 fb65 	bl	8002386 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09c      	sub	sp, #112	@ 0x70
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2250      	movs	r2, #80	@ 0x50
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f007 fb63 	bl	80093ac <memset>
  if(hi2c->Instance==I2C1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_I2C_MspInit+0x88>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d126      	bne.n	8001d3e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cf4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fec5 	bl	8004a8e <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d0a:	f7ff ff5f 	bl	8001bcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7ff ff73 	bl	8001bfa <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001d14:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d26:	2304      	movs	r3, #4
 8001d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <HAL_I2C_MspInit+0x8c>)
 8001d32:	f000 fb6d 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d36:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001d3a:	f7ff ff90 	bl	8001c5e <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3770      	adds	r7, #112	@ 0x70
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	48000400 	.word	0x48000400

08001d50 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <HAL_IPCC_MspInit+0x44>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d113      	bne.n	8001d8a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001d62:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001d66:	f7ff ff61 	bl	8001c2c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	202c      	movs	r0, #44	@ 0x2c
 8001d70:	f000 faef 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d74:	202c      	movs	r0, #44	@ 0x2c
 8001d76:	f000 fb06 	bl	8002386 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	202d      	movs	r0, #45	@ 0x2d
 8001d80:	f000 fae7 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d84:	202d      	movs	r0, #45	@ 0x2d
 8001d86:	f000 fafe 	bl	8002386 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	58000c00 	.word	0x58000c00

08001d98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b096      	sub	sp, #88	@ 0x58
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	2250      	movs	r2, #80	@ 0x50
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 faff 	bl	80093ac <memset>
  if(hrtc->Instance==RTC)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a13      	ldr	r2, [pc, #76]	@ (8001e00 <HAL_RTC_MspInit+0x68>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d11f      	bne.n	8001df8 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001db8:	f001 fb68 	bl	800348c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001dc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fe5e 	bl	8004a8e <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001dd8:	f7ff fef8 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ddc:	f7ff fefc 	bl	8001bd8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001de0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001de4:	f7ff ff3b 	bl	8001c5e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 fab0 	bl	8002352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f000 fac7 	bl	8002386 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001df8:	bf00      	nop
 8001dfa:	3758      	adds	r7, #88	@ 0x58
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40002800 	.word	0x40002800

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f907 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e66:	f7ff f9a1 	bl	80011ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e80:	f006 fefa 	bl	8008c78 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e8c:	f006 ff2a 	bl	8008ce4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e98:	f000 fc2a 	bl	80026f0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <SystemInit>:
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <SystemInit+0x98>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eaa:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <SystemInit+0x98>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ed8:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <SystemInit+0x9c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eea:	f023 0305 	bic.w	r3, r3, #5
 8001eee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001efa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <SystemInit+0xa0>)
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f12:	4a0b      	ldr	r2, [pc, #44]	@ (8001f40 <SystemInit+0xa0>)
 8001f14:	611a      	str	r2, [r3, #16]
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	faf6fefb 	.word	0xfaf6fefb
 8001f40:	22041000 	.word	0x22041000

08001f44 <CopyDataInit>:
 8001f44:	58d4      	ldr	r4, [r2, r3]
 8001f46:	50c4      	str	r4, [r0, r3]
 8001f48:	3304      	adds	r3, #4

08001f4a <LoopCopyDataInit>:
 8001f4a:	18c4      	adds	r4, r0, r3
 8001f4c:	428c      	cmp	r4, r1
 8001f4e:	d3f9      	bcc.n	8001f44 <CopyDataInit>
 8001f50:	4770      	bx	lr

08001f52 <FillZerobss>:
 8001f52:	6003      	str	r3, [r0, #0]
 8001f54:	3004      	adds	r0, #4

08001f56 <LoopFillZerobss>:
 8001f56:	4288      	cmp	r0, r1
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>
 8001f5a:	4770      	bx	lr

08001f5c <Reset_Handler>:
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <LoopForever+0x2>)
 8001f5e:	4685      	mov	sp, r0
 8001f60:	f7ff ff9e 	bl	8001ea0 <SystemInit>
 8001f64:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <LoopForever+0x6>)
 8001f66:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <LoopForever+0xa>)
 8001f68:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <LoopForever+0xe>)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f7ff ffed 	bl	8001f4a <LoopCopyDataInit>
 8001f70:	480b      	ldr	r0, [pc, #44]	@ (8001fa0 <LoopForever+0x12>)
 8001f72:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <LoopForever+0x16>)
 8001f74:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <LoopForever+0x1a>)
 8001f76:	2300      	movs	r3, #0
 8001f78:	f7ff ffe7 	bl	8001f4a <LoopCopyDataInit>
 8001f7c:	480b      	ldr	r0, [pc, #44]	@ (8001fac <LoopForever+0x1e>)
 8001f7e:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <LoopForever+0x22>)
 8001f80:	2300      	movs	r3, #0
 8001f82:	f7ff ffe8 	bl	8001f56 <LoopFillZerobss>
 8001f86:	f007 fa19 	bl	80093bc <__libc_init_array>
 8001f8a:	f7ff fc5b 	bl	8001844 <main>

08001f8e <LoopForever>:
 8001f8e:	e7fe      	b.n	8001f8e <LoopForever>
 8001f90:	20030000 	.word	0x20030000
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000074 	.word	0x20000074
 8001f9c:	080096b0 	.word	0x080096b0
 8001fa0:	200301e4 	.word	0x200301e4
 8001fa4:	20030a67 	.word	0x20030a67
 8001fa8:	08009776 	.word	0x08009776
 8001fac:	200000d4 	.word	0x200000d4
 8001fb0:	2000077c 	.word	0x2000077c

08001fb4 <ADC1_IRQHandler>:
 8001fb4:	e7fe      	b.n	8001fb4 <ADC1_IRQHandler>
	...

08001fb8 <HAL_Init>:
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <HAL_Init+0x3c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff4 <HAL_Init+0x3c>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f000 f9b4 	bl	800233c <HAL_NVIC_SetPriorityGrouping>
 8001fd4:	200f      	movs	r0, #15
 8001fd6:	f000 f80f 	bl	8001ff8 <HAL_InitTick>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_Init+0x2e>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	e001      	b.n	8001fea <HAL_Init+0x32>
 8001fe6:	f7ff fe53 	bl	8001c90 <HAL_MspInit>
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	58004000 	.word	0x58004000

08001ff8 <HAL_InitTick>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <HAL_InitTick+0x6c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d024      	beq.n	8002056 <HAL_InitTick+0x5e>
 800200c:	f002 fada 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <HAL_InitTick+0x6c>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f9ca 	bl	80023be <HAL_SYSTICK_Config>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10f      	bne.n	8002050 <HAL_InitTick+0x58>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	d809      	bhi.n	800204a <HAL_InitTick+0x52>
 8002036:	2200      	movs	r2, #0
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
 800203e:	f000 f988 	bl	8002352 <HAL_NVIC_SetPriority>
 8002042:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <HAL_InitTick+0x70>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e007      	b.n	800205a <HAL_InitTick+0x62>
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e004      	b.n	800205a <HAL_InitTick+0x62>
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_InitTick+0x62>
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000004c 	.word	0x2000004c
 8002068:	20000048 	.word	0x20000048

0800206c <HAL_IncTick>:
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000004c 	.word	0x2000004c
 8002090:	200003b8 	.word	0x200003b8

08002094 <HAL_GetTick>:
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	200003b8 	.word	0x200003b8

080020ac <HAL_GetTickPrio>:
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_GetTickPrio+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000048 	.word	0x20000048

080020c4 <HAL_GetTickFreq>:
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTickFreq+0x14>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	2000004c 	.word	0x2000004c

080020dc <__NVIC_SetPriorityGrouping>:
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	@ (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_DisableIRQ>:
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db12      	blt.n	80021b4 <__NVIC_DisableIRQ+0x38>
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	490a      	ldr	r1, [pc, #40]	@ (80021c0 <__NVIC_DisableIRQ+0x44>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	3320      	adds	r3, #32
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	bf00      	nop
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPendingIRQ>:
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0c      	blt.n	80021f0 <__NVIC_SetPendingIRQ+0x2c>
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	@ (80021fc <__NVIC_SetPendingIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	3340      	adds	r3, #64	@ 0x40
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_ClearPendingIRQ>:
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0c      	blt.n	800222c <__NVIC_ClearPendingIRQ+0x2c>
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <__NVIC_ClearPendingIRQ+0x38>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	3360      	adds	r3, #96	@ 0x60
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100

0800223c <__NVIC_SetPriority>:
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	@ (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	@ (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <NVIC_EncodePriority>:
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	@ 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f1c3 0307 	rsb	r3, r3, #7
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	bf28      	it	cs
 80022ae:	2304      	movcs	r3, #4
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3304      	adds	r3, #4
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <NVIC_EncodePriority+0x30>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3b03      	subs	r3, #3
 80022be:	e000      	b.n	80022c2 <NVIC_EncodePriority+0x32>
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	f04f 32ff 	mov.w	r2, #4294967295
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	401a      	ands	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	409a      	lsls	r2, r3
 80022d8:	f04f 31ff 	mov.w	r1, #4294967295
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	43d9      	mvns	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	400b      	ands	r3, r1
 80022e8:	4313      	orrs	r3, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <SysTick_Config>:
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002308:	d301      	bcc.n	800230e <SysTick_Config+0x16>
 800230a:	2301      	movs	r3, #1
 800230c:	e00f      	b.n	800232e <SysTick_Config+0x36>
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <SysTick_Config+0x40>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	6053      	str	r3, [r2, #4]
 8002316:	210f      	movs	r1, #15
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	f7ff ff8e 	bl	800223c <__NVIC_SetPriority>
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <SysTick_Config+0x40>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <SysTick_Config+0x40>)
 8002328:	2207      	movs	r2, #7
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	2300      	movs	r3, #0
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	e000e010 	.word	0xe000e010

0800233c <HAL_NVIC_SetPriorityGrouping>:
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fec9 	bl	80020dc <__NVIC_SetPriorityGrouping>
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_SetPriority>:
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	f7ff fee0 	bl	8002124 <__NVIC_GetPriorityGrouping>
 8002364:	6178      	str	r0, [r7, #20]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7ff ff90 	bl	8002290 <NVIC_EncodePriority>
 8002370:	4602      	mov	r2, r0
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff5f 	bl	800223c <__NVIC_SetPriority>
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fed3 	bl	8002140 <__NVIC_EnableIRQ>
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_DisableIRQ>:
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fee3 	bl	800217c <__NVIC_DisableIRQ>
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_SYSTICK_Config>:
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff96 	bl	80022f8 <SysTick_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPendingIRQ>:
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	71fb      	strb	r3, [r7, #7]
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff feed 	bl	80021c4 <__NVIC_SetPendingIRQ>
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_ClearPendingIRQ>:
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fefd 	bl	8002200 <__NVIC_ClearPendingIRQ>
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e14c      	b.n	80026ba <HAL_GPIO_Init+0x2aa>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 813e 	beq.w	80026b4 <HAL_GPIO_Init+0x2a4>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d005      	beq.n	8002450 <HAL_GPIO_Init+0x40>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d130      	bne.n	80024b2 <HAL_GPIO_Init+0xa2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	2201      	movs	r2, #1
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0201 	and.w	r2, r3, #1
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d017      	beq.n	80024ee <HAL_GPIO_Init+0xde>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d123      	bne.n	8002542 <HAL_GPIO_Init+0x132>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	6939      	ldr	r1, [r7, #16]
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8098 	beq.w	80026b4 <HAL_GPIO_Init+0x2a4>
 8002584:	4a54      	ldr	r2, [pc, #336]	@ (80026d8 <HAL_GPIO_Init+0x2c8>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025ae:	d019      	beq.n	80025e4 <HAL_GPIO_Init+0x1d4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a4a      	ldr	r2, [pc, #296]	@ (80026dc <HAL_GPIO_Init+0x2cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1d0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a49      	ldr	r2, [pc, #292]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1cc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a48      	ldr	r2, [pc, #288]	@ (80026e4 <HAL_GPIO_Init+0x2d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1c8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a47      	ldr	r2, [pc, #284]	@ (80026e8 <HAL_GPIO_Init+0x2d8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1c4>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e008      	b.n	80025e6 <HAL_GPIO_Init+0x1d6>
 80025d4:	2307      	movs	r3, #7
 80025d6:	e006      	b.n	80025e6 <HAL_GPIO_Init+0x1d6>
 80025d8:	2303      	movs	r3, #3
 80025da:	e004      	b.n	80025e6 <HAL_GPIO_Init+0x1d6>
 80025dc:	2302      	movs	r3, #2
 80025de:	e002      	b.n	80025e6 <HAL_GPIO_Init+0x1d6>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_GPIO_Init+0x1d6>
 80025e4:	2300      	movs	r3, #0
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	f002 0203 	and.w	r2, r2, #3
 80025ec:	0092      	lsls	r2, r2, #2
 80025ee:	4093      	lsls	r3, r2
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	4938      	ldr	r1, [pc, #224]	@ (80026d8 <HAL_GPIO_Init+0x2c8>)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002604:	4b39      	ldr	r3, [pc, #228]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x218>
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	4a30      	ldr	r2, [pc, #192]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b2f      	ldr	r3, [pc, #188]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x242>
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4a26      	ldr	r2, [pc, #152]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	6053      	str	r3, [r2, #4]
 8002658:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x26e>
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 8002688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x29c>
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	4a0f      	ldr	r2, [pc, #60]	@ (80026ec <HAL_GPIO_Init+0x2dc>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f aeab 	bne.w	8002420 <HAL_GPIO_Init+0x10>
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40010000 	.word	0x40010000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	48000800 	.word	0x48000800
 80026e4:	48000c00 	.word	0x48000c00
 80026e8:	48001000 	.word	0x48001000
 80026ec:	58000800 	.word	0x58000800

080026f0 <HAL_HSEM_IRQHandler>:
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_HSEM_IRQHandler+0x30>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_HSEM_IRQHandler+0x30>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	43db      	mvns	r3, r3
 8002704:	4906      	ldr	r1, [pc, #24]	@ (8002720 <HAL_HSEM_IRQHandler+0x30>)
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
 800270a:	4a05      	ldr	r2, [pc, #20]	@ (8002720 <HAL_HSEM_IRQHandler+0x30>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6053      	str	r3, [r2, #4]
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f807 	bl	8002724 <HAL_HSEM_FreeCallback>
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	58001500 	.word	0x58001500

08002724 <HAL_HSEM_FreeCallback>:
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_I2C_Init>:
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_I2C_Init+0x12>
 8002746:	2301      	movs	r3, #1
 8002748:	e08d      	b.n	8002866 <HAL_I2C_Init+0x12e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_I2C_Init+0x2c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff faae 	bl	8001cc0 <HAL_I2C_MspInit>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_I2C_Init+0x7a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	e006      	b.n	80027c0 <HAL_I2C_Init+0x88>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d108      	bne.n	80027da <HAL_I2C_Init+0xa2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	e007      	b.n	80027ea <HAL_I2C_Init+0xb2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027fc:	6053      	str	r3, [r2, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	ea42 0103 	orr.w	r1, r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002864:	2300      	movs	r3, #0
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_I2C_Mem_Write>:
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	460b      	mov	r3, r1
 8002884:	813b      	strh	r3, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	f040 80f9 	bne.w	8002a8a <HAL_I2C_Mem_Write+0x21a>
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x34>
 800289e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_I2C_Mem_Write+0x40>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ed      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Mem_Write+0x4e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0e6      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c6:	f7ff fbe5 	bl	8002094 <HAL_GetTick>
 80028ca:	6178      	str	r0, [r7, #20]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2319      	movs	r3, #25
 80028d2:	2201      	movs	r2, #1
 80028d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fac3 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x78>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d1      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2221      	movs	r2, #33	@ 0x21
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2240      	movs	r2, #64	@ 0x40
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a3a      	ldr	r2, [r7, #32]
 8002902:	625a      	str	r2, [r3, #36]	@ 0x24
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002910:	88f8      	ldrh	r0, [r7, #6]
 8002912:	893a      	ldrh	r2, [r7, #8]
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4603      	mov	r3, r0
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f9d3 	bl	8002ccc <I2C_RequestMemoryWrite>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_I2C_Mem_Write+0xc8>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002934:	2301      	movs	r3, #1
 8002936:	e0a9      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2bff      	cmp	r3, #255	@ 0xff
 8002940:	d90e      	bls.n	8002960 <HAL_I2C_Mem_Write+0xf0>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	@ 0xff
 8002946:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	b2da      	uxtb	r2, r3
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fc47 	bl	80031ec <I2C_TransferConfig>
 800295e:	e00f      	b.n	8002980 <HAL_I2C_Mem_Write+0x110>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	@ 0x28
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fc36 	bl	80031ec <I2C_TransferConfig>
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fac6 	bl	8002f16 <I2C_WaitOnTXISFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Write+0x124>
 8002990:	2301      	movs	r3, #1
 8002992:	e07b      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d034      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x1c8>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d130      	bne.n	8002a38 <HAL_I2C_Mem_Write+0x1c8>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	2200      	movs	r2, #0
 80029de:	2180      	movs	r1, #128	@ 0x80
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fa3f 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x180>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04d      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d90e      	bls.n	8002a18 <HAL_I2C_Mem_Write+0x1a8>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	@ 0xff
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fbeb 	bl	80031ec <I2C_TransferConfig>
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Mem_Write+0x1c8>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fbda 	bl	80031ec <I2C_TransferConfig>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d19e      	bne.n	8002980 <HAL_I2C_Mem_Write+0x110>
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 faac 	bl	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Write+0x1e6>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e01a      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	61da      	str	r2, [r3, #28]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_I2C_Mem_Write+0x224>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	6053      	str	r3, [r2, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <HAL_I2C_Mem_Write+0x21c>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	fe00e800 	.word	0xfe00e800

08002a98 <HAL_I2C_Mem_Read>:
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	f040 80fd 	bne.w	8002cba <HAL_I2C_Mem_Read+0x222>
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_I2C_Mem_Read+0x34>
 8002ac6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_I2C_Mem_Read+0x40>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ad2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0f1      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_Mem_Read+0x4e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ea      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aee:	f7ff fad1 	bl	8002094 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f9af 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x78>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0d5      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2222      	movs	r2, #34	@ 0x22
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a3a      	ldr	r2, [r7, #32]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b38:	88f8      	ldrh	r0, [r7, #6]
 8002b3a:	893a      	ldrh	r2, [r7, #8]
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4603      	mov	r3, r0
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f913 	bl	8002d74 <I2C_RequestMemoryRead>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_I2C_Mem_Read+0xc8>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0ad      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2bff      	cmp	r3, #255	@ 0xff
 8002b68:	d90e      	bls.n	8002b88 <HAL_I2C_Mem_Read+0xf0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	22ff      	movs	r2, #255	@ 0xff
 8002b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	8979      	ldrh	r1, [r7, #10]
 8002b78:	4b52      	ldr	r3, [pc, #328]	@ (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fb33 	bl	80031ec <I2C_TransferConfig>
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Mem_Read+0x110>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fb22 	bl	80031ec <I2C_TransferConfig>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f956 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Mem_Read+0x12a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07c      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d034      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x1d0>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d130      	bne.n	8002c68 <HAL_I2C_Mem_Read+0x1d0>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f927 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Mem_Read+0x188>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04d      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2bff      	cmp	r3, #255	@ 0xff
 8002c28:	d90e      	bls.n	8002c48 <HAL_I2C_Mem_Read+0x1b0>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	22ff      	movs	r2, #255	@ 0xff
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8979      	ldrh	r1, [r7, #10]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fad3 	bl	80031ec <I2C_TransferConfig>
 8002c46:	e00f      	b.n	8002c68 <HAL_I2C_Mem_Read+0x1d0>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8979      	ldrh	r1, [r7, #10]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fac2 	bl	80031ec <I2C_TransferConfig>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d19a      	bne.n	8002ba8 <HAL_I2C_Mem_Read+0x110>
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f994 	bl	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Mem_Read+0x1ee>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e01a      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	61da      	str	r2, [r3, #28]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_I2C_Mem_Read+0x230>)
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	6053      	str	r3, [r2, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Mem_Read+0x224>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	80002400 	.word	0x80002400
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <I2C_RequestMemoryWrite>:
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	4608      	mov	r0, r1
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	817b      	strh	r3, [r7, #10]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	813b      	strh	r3, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	8979      	ldrh	r1, [r7, #10]
 8002cec:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <I2C_RequestMemoryWrite+0xa4>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 fa79 	bl	80031ec <I2C_TransferConfig>
 8002cfa:	69fa      	ldr	r2, [r7, #28]
 8002cfc:	69b9      	ldr	r1, [r7, #24]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f909 	bl	8002f16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <I2C_RequestMemoryWrite+0x42>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e02c      	b.n	8002d68 <I2C_RequestMemoryWrite+0x9c>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <I2C_RequestMemoryWrite+0x54>
 8002d14:	893b      	ldrh	r3, [r7, #8]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d1e:	e015      	b.n	8002d4c <I2C_RequestMemoryWrite+0x80>
 8002d20:	893b      	ldrh	r3, [r7, #8]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f8ef 	bl	8002f16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <I2C_RequestMemoryWrite+0x76>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e012      	b.n	8002d68 <I2C_RequestMemoryWrite+0x9c>
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f884 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_RequestMemoryWrite+0x9a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <I2C_RequestMemoryWrite+0x9c>
 8002d66:	2300      	movs	r3, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	80002000 	.word	0x80002000

08002d74 <I2C_RequestMemoryRead>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <I2C_RequestMemoryRead+0xa4>)
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fa26 	bl	80031ec <I2C_TransferConfig>
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f8b6 	bl	8002f16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_RequestMemoryRead+0x40>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e02c      	b.n	8002e0e <I2C_RequestMemoryRead+0x9a>
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <I2C_RequestMemoryRead+0x52>
 8002dba:	893b      	ldrh	r3, [r7, #8]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc4:	e015      	b.n	8002df2 <I2C_RequestMemoryRead+0x7e>
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	69b9      	ldr	r1, [r7, #24]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f89c 	bl	8002f16 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_RequestMemoryRead+0x74>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e012      	b.n	8002e0e <I2C_RequestMemoryRead+0x9a>
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2140      	movs	r1, #64	@ 0x40
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f831 	bl	8002e64 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <I2C_RequestMemoryRead+0x98>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <I2C_RequestMemoryRead+0x9a>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	80002000 	.word	0x80002000

08002e1c <I2C_Flush_TXDR>:
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d103      	bne.n	8002e3a <I2C_Flush_TXDR+0x1e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d007      	beq.n	8002e58 <I2C_Flush_TXDR+0x3c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <I2C_WaitOnFlagUntilTimeout>:
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	e03b      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f8d6 	bl	800302c <I2C_IsErrorOccurred>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x26>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e041      	b.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0xaa>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d02d      	beq.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002e92:	f7ff f8ff 	bl	8002094 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d122      	bne.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d113      	bne.n	8002eee <I2C_WaitOnFlagUntilTimeout+0x8a>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00f      	b.n	8002f0e <I2C_WaitOnFlagUntilTimeout+0xaa>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d0b4      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x12>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <I2C_WaitOnTXISFlagUntilTimeout>:
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	e033      	b.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f87f 	bl	800302c <I2C_IsErrorOccurred>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e031      	b.n	8002f9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d025      	beq.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f40:	f7ff f8a8 	bl	8002094 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11a      	bne.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d013      	beq.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e007      	b.n	8002f9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d1c4      	bne.n	8002f24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	e02f      	b.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f838 	bl	800302c <I2C_IsErrorOccurred>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e02d      	b.n	8003022 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002fc6:	f7ff f865 	bl	8002094 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11a      	bne.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d013      	beq.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800300e:	2301      	movs	r3, #1
 8003010:	e007      	b.n	8003022 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b20      	cmp	r3, #32
 800301e:	d1c8      	bne.n	8002fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8003020:	2300      	movs	r3, #0
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <I2C_IsErrorOccurred>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	@ 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	2300      	movs	r3, #0
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d068      	beq.n	800312a <I2C_IsErrorOccurred+0xfe>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2210      	movs	r2, #16
 800305e:	61da      	str	r2, [r3, #28]
 8003060:	e049      	b.n	80030f6 <I2C_IsErrorOccurred+0xca>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d045      	beq.n	80030f6 <I2C_IsErrorOccurred+0xca>
 800306a:	f7ff f813 	bl	8002094 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_IsErrorOccurred+0x54>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d13a      	bne.n	80030f6 <I2C_IsErrorOccurred+0xca>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003092:	74fb      	strb	r3, [r7, #19]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a2:	d121      	bne.n	80030e8 <I2C_IsErrorOccurred+0xbc>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030aa:	d01d      	beq.n	80030e8 <I2C_IsErrorOccurred+0xbc>
 80030ac:	7cfb      	ldrb	r3, [r7, #19]
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d01a      	beq.n	80030e8 <I2C_IsErrorOccurred+0xbc>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	f7fe ffe7 	bl	8002094 <HAL_GetTick>
 80030c6:	61f8      	str	r0, [r7, #28]
 80030c8:	e00e      	b.n	80030e8 <I2C_IsErrorOccurred+0xbc>
 80030ca:	f7fe ffe3 	bl	8002094 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b19      	cmp	r3, #25
 80030d6:	d907      	bls.n	80030e8 <I2C_IsErrorOccurred+0xbc>
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80030e6:	e006      	b.n	80030f6 <I2C_IsErrorOccurred+0xca>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d1e9      	bne.n	80030ca <I2C_IsErrorOccurred+0x9e>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d003      	beq.n	800310c <I2C_IsErrorOccurred+0xe0>
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0aa      	beq.n	8003062 <I2C_IsErrorOccurred+0x36>
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <I2C_IsErrorOccurred+0xf0>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2220      	movs	r2, #32
 800311a:	61da      	str	r2, [r3, #28]
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <I2C_IsErrorOccurred+0x128>
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314c:	61da      	str	r2, [r3, #28]
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <I2C_IsErrorOccurred+0x14a>
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800316e:	61da      	str	r2, [r3, #28]
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <I2C_IsErrorOccurred+0x16c>
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003190:	61da      	str	r2, [r3, #28]
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <I2C_IsErrorOccurred+0x1ae>
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff fe3b 	bl	8002e1c <I2C_Flush_TXDR>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0d      	ldr	r3, [pc, #52]	@ (80031e8 <I2C_IsErrorOccurred+0x1bc>)
 80031b2:	400b      	ands	r3, r1
 80031b4:	6053      	str	r3, [r2, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031de:	4618      	mov	r0, r3
 80031e0:	3728      	adds	r7, #40	@ 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	fe00e800 	.word	0xfe00e800

080031ec <I2C_TransferConfig>:
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	4613      	mov	r3, r2
 80031fc:	727b      	strb	r3, [r7, #9]
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003204:	7a7b      	ldrb	r3, [r7, #9]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	4313      	orrs	r3, r2
 8003216:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	0d5b      	lsrs	r3, r3, #21
 8003226:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800322a:	4b08      	ldr	r3, [pc, #32]	@ (800324c <I2C_TransferConfig+0x60>)
 800322c:	430b      	orrs	r3, r1
 800322e:	43db      	mvns	r3, r3
 8003230:	ea02 0103 	and.w	r1, r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	03ff63ff 	.word	0x03ff63ff

08003250 <HAL_I2CEx_ConfigAnalogFilter>:
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	d138      	bne.n	80032d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003270:	2302      	movs	r3, #2
 8003272:	e032      	b.n	80032da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	@ 0x24
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d8:	2302      	movs	r3, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_I2CEx_ConfigDigitalFilter>:
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d139      	bne.n	8003370 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003306:	2302      	movs	r3, #2
 8003308:	e033      	b.n	8003372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2224      	movs	r2, #36	@ 0x24
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003370:	2302      	movs	r3, #2
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_IPCC_Init>:
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	2300      	movs	r3, #0
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01e      	beq.n	80033d0 <HAL_IPCC_Init+0x50>
 8003392:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_IPCC_Init+0x60>)
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_IPCC_Init+0x28>
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fcd4 	bl	8001d50 <HAL_IPCC_MspInit>
 80033a8:	68b8      	ldr	r0, [r7, #8]
 80033aa:	f000 f85b 	bl	8003464 <IPCC_Reset_Register>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f82c 	bl	8003418 <IPCC_SetDefaultCallbacks>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80033ce:	e001      	b.n	80033d4 <HAL_IPCC_Init+0x54>
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	58000c00 	.word	0x58000c00

080033e4 <HAL_IPCC_RxCallback>:
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	4613      	mov	r3, r2
 80033f0:	71fb      	strb	r3, [r7, #7]
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_IPCC_TxCallback>:
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	4613      	mov	r3, r2
 800340a:	71fb      	strb	r3, [r7, #7]
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <IPCC_SetDefaultCallbacks>:
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e00f      	b.n	8003446 <IPCC_SetDefaultCallbacks+0x2e>
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	4a0b      	ldr	r2, [pc, #44]	@ (800345c <IPCC_SetDefaultCallbacks+0x44>)
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3306      	adds	r3, #6
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	4a08      	ldr	r2, [pc, #32]	@ (8003460 <IPCC_SetDefaultCallbacks+0x48>)
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b05      	cmp	r3, #5
 800344a:	d9ec      	bls.n	8003426 <IPCC_SetDefaultCallbacks+0xe>
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	080033e5 	.word	0x080033e5
 8003460:	080033ff 	.word	0x080033ff

08003464 <IPCC_Reset_Register>:
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223f      	movs	r2, #63	@ 0x3f
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_PWR_EnableBkUpAccess>:
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	58000400 	.word	0x58000400

080034ac <HAL_PWREx_GetVoltageRange>:
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	58000400 	.word	0x58000400

080034c8 <LL_RCC_HSE_IsEnabledDiv2>:
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034da:	d101      	bne.n	80034e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80034e0:	2300      	movs	r3, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <LL_RCC_HSE_Enable>:
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_RCC_HSE_Disable>:
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	bf00      	nop
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_RCC_HSE_IsReady>:
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800353a:	d101      	bne.n	8003540 <LL_RCC_HSE_IsReady+0x18>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <LL_RCC_HSE_IsReady+0x1a>
 8003540:	2300      	movs	r3, #0
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_RCC_HSI_Enable>:
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800355a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_HSI_Disable>:
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_HSI_IsReady>:
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359a:	d101      	bne.n	80035a0 <LL_RCC_HSI_IsReady+0x18>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <LL_RCC_HSI_IsReady+0x1a>
 80035a0:	2300      	movs	r3, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_RCC_HSI_SetCalibTrimming>:
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_RCC_HSI48_Enable>:
 80035d6:	b480      	push	{r7}
 80035d8:	af00      	add	r7, sp, #0
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 80035ee:	bf00      	nop
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_RCC_HSI48_Disable>:
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003600:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_RCC_HSI48_IsReady>:
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d101      	bne.n	8003632 <LL_RCC_HSI48_IsReady+0x18>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <LL_RCC_HSI48_IsReady+0x1a>
 8003632:	2300      	movs	r3, #0
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_RCC_LSE_Enable>:
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_RCC_LSE_Disable>:
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_RCC_LSE_EnableBypass>:
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_RCC_LSE_DisableBypass>:
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_RCC_LSE_IsReady>:
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d101      	bne.n	80036de <LL_RCC_LSE_IsReady+0x18>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_RCC_LSE_IsReady+0x1a>
 80036de:	2300      	movs	r3, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_RCC_LSI1_Enable>:
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_RCC_LSI1_Disable>:
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
 8003710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <LL_RCC_LSI1_IsReady>:
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
 8003732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d101      	bne.n	8003746 <LL_RCC_LSI1_IsReady+0x18>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <LL_RCC_LSI1_IsReady+0x1a>
 8003746:	2300      	movs	r3, #0
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_RCC_LSI2_Enable>:
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0
 8003756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800375e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <LL_RCC_LSI2_Disable>:
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_RCC_LSI2_IsReady>:
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d101      	bne.n	80037ae <LL_RCC_LSI2_IsReady+0x18>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <LL_RCC_LSI2_IsReady+0x1a>
 80037ae:	2300      	movs	r3, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_RCC_LSI2_SetTrimming>:
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <LL_RCC_MSI_Enable>:
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_RCC_MSI_Disable>:
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_RCC_MSI_IsReady>:
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b02      	cmp	r3, #2
 8003834:	d101      	bne.n	800383a <LL_RCC_MSI_IsReady+0x16>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_RCC_MSI_IsReady+0x18>
 800383a:	2300      	movs	r3, #0
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <LL_RCC_MSI_SetRange>:
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003858:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_RCC_MSI_GetRange>:
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2bb0      	cmp	r3, #176	@ 0xb0
 8003884:	d901      	bls.n	800388a <LL_RCC_MSI_GetRange+0x1c>
 8003886:	23b0      	movs	r3, #176	@ 0xb0
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_RCC_MSI_SetCalibTrimming>:
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_SetSysClkSource>:
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 0203 	bic.w	r2, r3, #3
 80038d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <LL_RCC_GetSysClkSource>:
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <LL_RCC_SetAHBPrescaler>:
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003914:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <LL_C2_RCC_SetAHBPrescaler>:
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003936:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800393a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800393e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_RCC_SetAHB4Prescaler>:
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003962:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_RCC_SetAPB1Prescaler>:
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4313      	orrs	r3, r2
 800399e:	608b      	str	r3, [r1, #8]
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_RCC_SetAPB2Prescaler>:
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_RCC_GetAHBPrescaler>:
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_RCC_GetAHB4Prescaler>:
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_RCC_PLL_Enable>:
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LL_RCC_PLL_Disable>:
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_RCC_PLL_IsReady>:
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a56:	d101      	bne.n	8003a5c <LL_RCC_PLL_IsReady+0x18>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <LL_RCC_PLL_IsReady+0x1a>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_PLL_GetN>:
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_PLL_GetR>:
 8003a82:	b480      	push	{r7}
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <LL_RCC_PLL_GetDivider>:
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_RCC_PLL_GetMainSource>:
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_IsActiveFlag_HPRE>:
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003adc:	d101      	bne.n	8003ae2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_IsActiveFlag_C2HPRE>:
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b02:	d101      	bne.n	8003b08 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_RCC_IsActiveFlag_SHDHPRE>:
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d101      	bne.n	8003b2e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_RCC_IsActiveFlag_PPRE1>:
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b4c:	d101      	bne.n	8003b52 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003b52:	2300      	movs	r3, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_IsActiveFlag_PPRE2>:
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b70:	d101      	bne.n	8003b76 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003b76:	2300      	movs	r3, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_RCC_OscConfig>:
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b08d      	sub	sp, #52	@ 0x34
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e363      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 808d 	beq.w	8003cbe <HAL_RCC_OscConfig+0x13a>
 8003ba4:	f7ff fea1 	bl	80038ea <LL_RCC_GetSysClkSource>
 8003ba8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003baa:	f7ff ff82 	bl	8003ab2 <LL_RCC_PLL_GetMainSource>
 8003bae:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x3e>
 8003bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d147      	bne.n	8003c4c <HAL_RCC_OscConfig+0xc8>
 8003bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d144      	bne.n	8003c4c <HAL_RCC_OscConfig+0xc8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_OscConfig+0x4a>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e347      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003bd2:	f7ff fe4c 	bl	800386e <LL_RCC_MSI_GetRange>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d914      	bls.n	8003c06 <HAL_RCC_OscConfig+0x82>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fd03 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x6c>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e336      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fe26 	bl	8003846 <LL_RCC_MSI_SetRange>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fe4a 	bl	8003898 <LL_RCC_MSI_SetCalibTrimming>
 8003c04:	e013      	b.n	8003c2e <HAL_RCC_OscConfig+0xaa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fe1b 	bl	8003846 <LL_RCC_MSI_SetRange>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fe3f 	bl	8003898 <LL_RCC_MSI_SetCalibTrimming>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fce4 	bl	80045ec <RCC_SetFlashLatencyFromMSIRange>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0xaa>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e317      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003c2e:	f000 fcc9 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4aa4      	ldr	r2, [pc, #656]	@ (8003ec8 <HAL_RCC_OscConfig+0x344>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4ba4      	ldr	r3, [pc, #656]	@ (8003ecc <HAL_RCC_OscConfig+0x348>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe f9db 	bl	8001ff8 <HAL_InitTick>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d039      	beq.n	8003cbc <HAL_RCC_OscConfig+0x138>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e308      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01e      	beq.n	8003c92 <HAL_RCC_OscConfig+0x10e>
 8003c54:	f7ff fdc8 	bl	80037e8 <LL_RCC_MSI_Enable>
 8003c58:	f7fe fa1c 	bl	8002094 <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xee>
 8003c60:	f7fe fa18 	bl	8002094 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xee>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e2f5      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003c72:	f7ff fdd7 	bl	8003824 <LL_RCC_MSI_IsReady>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f1      	beq.n	8003c60 <HAL_RCC_OscConfig+0xdc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fde0 	bl	8003846 <LL_RCC_MSI_SetRange>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fe04 	bl	8003898 <LL_RCC_MSI_SetCalibTrimming>
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x13a>
 8003c92:	f7ff fdb8 	bl	8003806 <LL_RCC_MSI_Disable>
 8003c96:	f7fe f9fd 	bl	8002094 <HAL_GetTick>
 8003c9a:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x12c>
 8003c9e:	f7fe f9f9 	bl	8002094 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x12c>
 8003cac:	2303      	movs	r3, #3
 8003cae:	e2d6      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003cb0:	f7ff fdb8 	bl	8003824 <LL_RCC_MSI_IsReady>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f1      	bne.n	8003c9e <HAL_RCC_OscConfig+0x11a>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x13a>
 8003cbc:	bf00      	nop
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d047      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1d6>
 8003cca:	f7ff fe0e 	bl	80038ea <LL_RCC_GetSysClkSource>
 8003cce:	6238      	str	r0, [r7, #32]
 8003cd0:	f7ff feef 	bl	8003ab2 <LL_RCC_PLL_GetMainSource>
 8003cd4:	61f8      	str	r0, [r7, #28]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x164>
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x170>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x170>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d134      	bne.n	8003d5a <HAL_RCC_OscConfig+0x1d6>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e2b4      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfc:	d102      	bne.n	8003d04 <HAL_RCC_OscConfig+0x180>
 8003cfe:	f7ff fbf5 	bl	80034ec <LL_RCC_HSE_Enable>
 8003d02:	e001      	b.n	8003d08 <HAL_RCC_OscConfig+0x184>
 8003d04:	f7ff fc01 	bl	800350a <LL_RCC_HSE_Disable>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d012      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
 8003d10:	f7fe f9c0 	bl	8002094 <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x1a6>
 8003d18:	f7fe f9bc 	bl	8002094 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x1a6>
 8003d26:	2303      	movs	r3, #3
 8003d28:	e299      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003d2a:	f7ff fbfd 	bl	8003528 <LL_RCC_HSE_IsReady>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f1      	beq.n	8003d18 <HAL_RCC_OscConfig+0x194>
 8003d34:	e011      	b.n	8003d5a <HAL_RCC_OscConfig+0x1d6>
 8003d36:	f7fe f9ad 	bl	8002094 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x1cc>
 8003d3e:	f7fe f9a9 	bl	8002094 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x1cc>
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e286      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003d50:	f7ff fbea 	bl	8003528 <LL_RCC_HSE_IsReady>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f1      	bne.n	8003d3e <HAL_RCC_OscConfig+0x1ba>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d04c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x27c>
 8003d66:	f7ff fdc0 	bl	80038ea <LL_RCC_GetSysClkSource>
 8003d6a:	61b8      	str	r0, [r7, #24]
 8003d6c:	f7ff fea1 	bl	8003ab2 <LL_RCC_PLL_GetMainSource>
 8003d70:	6178      	str	r0, [r7, #20]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_OscConfig+0x200>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d10e      	bne.n	8003d9c <HAL_RCC_OscConfig+0x218>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCC_OscConfig+0x218>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_OscConfig+0x20c>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e266      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fc09 	bl	80035ac <LL_RCC_HSI_SetCalibTrimming>
 8003d9a:	e031      	b.n	8003e00 <HAL_RCC_OscConfig+0x27c>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d019      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x254>
 8003da4:	f7ff fbd2 	bl	800354c <LL_RCC_HSI_Enable>
 8003da8:	f7fe f974 	bl	8002094 <HAL_GetTick>
 8003dac:	6278      	str	r0, [r7, #36]	@ 0x24
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x23e>
 8003db0:	f7fe f970 	bl	8002094 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x23e>
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e24d      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003dc2:	f7ff fbe1 	bl	8003588 <LL_RCC_HSI_IsReady>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f1      	beq.n	8003db0 <HAL_RCC_OscConfig+0x22c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff fbeb 	bl	80035ac <LL_RCC_HSI_SetCalibTrimming>
 8003dd6:	e013      	b.n	8003e00 <HAL_RCC_OscConfig+0x27c>
 8003dd8:	f7ff fbc7 	bl	800356a <LL_RCC_HSI_Disable>
 8003ddc:	f7fe f95a 	bl	8002094 <HAL_GetTick>
 8003de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x272>
 8003de4:	f7fe f956 	bl	8002094 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x272>
 8003df2:	2303      	movs	r3, #3
 8003df4:	e233      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003df6:	f7ff fbc7 	bl	8003588 <LL_RCC_HSI_IsReady>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f1      	bne.n	8003de4 <HAL_RCC_OscConfig+0x260>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_OscConfig+0x296>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80a3 	beq.w	8003f60 <HAL_RCC_OscConfig+0x3dc>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d076      	beq.n	8003f10 <HAL_RCC_OscConfig+0x38c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d046      	beq.n	8003ebc <HAL_RCC_OscConfig+0x338>
 8003e2e:	f7ff fc7e 	bl	800372e <LL_RCC_LSI1_IsReady>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d113      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2dc>
 8003e38:	f7ff fc57 	bl	80036ea <LL_RCC_LSI1_Enable>
 8003e3c:	f7fe f92a 	bl	8002094 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x2d2>
 8003e44:	f7fe f926 	bl	8002094 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x2d2>
 8003e52:	2303      	movs	r3, #3
 8003e54:	e203      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003e56:	f7ff fc6a 	bl	800372e <LL_RCC_LSI1_IsReady>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f1      	beq.n	8003e44 <HAL_RCC_OscConfig+0x2c0>
 8003e60:	f7ff fc77 	bl	8003752 <LL_RCC_LSI2_Enable>
 8003e64:	f7fe f916 	bl	8002094 <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x2fa>
 8003e6c:	f7fe f912 	bl	8002094 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x2fa>
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1ef      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003e7e:	f7ff fc8a 	bl	8003796 <LL_RCC_LSI2_IsReady>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f1      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2e8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fc94 	bl	80037ba <LL_RCC_LSI2_SetTrimming>
 8003e92:	f7ff fc3b 	bl	800370c <LL_RCC_LSI1_Disable>
 8003e96:	f7fe f8fd 	bl	8002094 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x32c>
 8003e9e:	f7fe f8f9 	bl	8002094 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x32c>
 8003eac:	2303      	movs	r3, #3
 8003eae:	e1d6      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003eb0:	f7ff fc3d 	bl	800372e <LL_RCC_LSI1_IsReady>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f1      	bne.n	8003e9e <HAL_RCC_OscConfig+0x31a>
 8003eba:	e051      	b.n	8003f60 <HAL_RCC_OscConfig+0x3dc>
 8003ebc:	f7ff fc15 	bl	80036ea <LL_RCC_LSI1_Enable>
 8003ec0:	f7fe f8e8 	bl	8002094 <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ec6:	e00c      	b.n	8003ee2 <HAL_RCC_OscConfig+0x35e>
 8003ec8:	20000044 	.word	0x20000044
 8003ecc:	20000048 	.word	0x20000048
 8003ed0:	f7fe f8e0 	bl	8002094 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x35e>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1bd      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003ee2:	f7ff fc24 	bl	800372e <LL_RCC_LSI1_IsReady>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f1      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x34c>
 8003eec:	f7ff fc42 	bl	8003774 <LL_RCC_LSI2_Disable>
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x380>
 8003ef2:	f7fe f8cf 	bl	8002094 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x380>
 8003f00:	2303      	movs	r3, #3
 8003f02:	e1ac      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003f04:	f7ff fc47 	bl	8003796 <LL_RCC_LSI2_IsReady>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f1      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x36e>
 8003f0e:	e027      	b.n	8003f60 <HAL_RCC_OscConfig+0x3dc>
 8003f10:	f7ff fc30 	bl	8003774 <LL_RCC_LSI2_Disable>
 8003f14:	f7fe f8be 	bl	8002094 <HAL_GetTick>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
 8003f1c:	f7fe f8ba 	bl	8002094 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e197      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003f2e:	f7ff fc32 	bl	8003796 <LL_RCC_LSI2_IsReady>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f1      	bne.n	8003f1c <HAL_RCC_OscConfig+0x398>
 8003f38:	f7ff fbe8 	bl	800370c <LL_RCC_LSI1_Disable>
 8003f3c:	f7fe f8aa 	bl	8002094 <HAL_GetTick>
 8003f40:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x3d2>
 8003f44:	f7fe f8a6 	bl	8002094 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x3d2>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e183      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003f56:	f7ff fbea 	bl	800372e <LL_RCC_LSI1_IsReady>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f1      	bne.n	8003f44 <HAL_RCC_OscConfig+0x3c0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x4a0>
 8003f6c:	4ba7      	ldr	r3, [pc, #668]	@ (800420c <HAL_RCC_OscConfig+0x688>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d114      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x41e>
 8003f78:	f7ff fa88 	bl	800348c <HAL_PWR_EnableBkUpAccess>
 8003f7c:	f7fe f88a 	bl	8002094 <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x412>
 8003f84:	f7fe f886 	bl	8002094 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x412>
 8003f92:	2303      	movs	r3, #3
 8003f94:	e163      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003f96:	4b9d      	ldr	r3, [pc, #628]	@ (800420c <HAL_RCC_OscConfig+0x688>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x400>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x42c>
 8003faa:	f7ff fb48 	bl	800363e <LL_RCC_LSE_Enable>
 8003fae:	e00c      	b.n	8003fca <HAL_RCC_OscConfig+0x446>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d104      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x43e>
 8003fb8:	f7ff fb63 	bl	8003682 <LL_RCC_LSE_EnableBypass>
 8003fbc:	f7ff fb3f 	bl	800363e <LL_RCC_LSE_Enable>
 8003fc0:	e003      	b.n	8003fca <HAL_RCC_OscConfig+0x446>
 8003fc2:	f7ff fb4d 	bl	8003660 <LL_RCC_LSE_Disable>
 8003fc6:	f7ff fb6d 	bl	80036a4 <LL_RCC_LSE_DisableBypass>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_RCC_OscConfig+0x478>
 8003fd2:	f7fe f85f 	bl	8002094 <HAL_GetTick>
 8003fd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x46c>
 8003fda:	f7fe f85b 	bl	8002094 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x46c>
 8003fec:	2303      	movs	r3, #3
 8003fee:	e136      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8003ff0:	f7ff fb69 	bl	80036c6 <LL_RCC_LSE_IsReady>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ef      	beq.n	8003fda <HAL_RCC_OscConfig+0x456>
 8003ffa:	e013      	b.n	8004024 <HAL_RCC_OscConfig+0x4a0>
 8003ffc:	f7fe f84a 	bl	8002094 <HAL_GetTick>
 8004000:	6278      	str	r0, [r7, #36]	@ 0x24
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x496>
 8004004:	f7fe f846 	bl	8002094 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x496>
 8004016:	2303      	movs	r3, #3
 8004018:	e121      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 800401a:	f7ff fb54 	bl	80036c6 <LL_RCC_LSE_IsReady>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ef      	bne.n	8004004 <HAL_RCC_OscConfig+0x480>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d02c      	beq.n	800408a <HAL_RCC_OscConfig+0x506>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d014      	beq.n	8004062 <HAL_RCC_OscConfig+0x4de>
 8004038:	f7ff facd 	bl	80035d6 <LL_RCC_HSI48_Enable>
 800403c:	f7fe f82a 	bl	8002094 <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	@ 0x24
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x4d2>
 8004044:	f7fe f826 	bl	8002094 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x4d2>
 8004052:	2303      	movs	r3, #3
 8004054:	e103      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8004056:	f7ff fae0 	bl	800361a <LL_RCC_HSI48_IsReady>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f1      	beq.n	8004044 <HAL_RCC_OscConfig+0x4c0>
 8004060:	e013      	b.n	800408a <HAL_RCC_OscConfig+0x506>
 8004062:	f7ff fac9 	bl	80035f8 <LL_RCC_HSI48_Disable>
 8004066:	f7fe f815 	bl	8002094 <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x4fc>
 800406e:	f7fe f811 	bl	8002094 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x4fc>
 800407c:	2303      	movs	r3, #3
 800407e:	e0ee      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8004080:	f7ff facb 	bl	800361a <LL_RCC_HSI48_IsReady>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f1      	bne.n	800406e <HAL_RCC_OscConfig+0x4ea>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80e4 	beq.w	800425c <HAL_RCC_OscConfig+0x6d8>
 8004094:	f7ff fc29 	bl	80038ea <LL_RCC_GetSysClkSource>
 8004098:	6138      	str	r0, [r7, #16]
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	f040 80b4 	bne.w	8004214 <HAL_RCC_OscConfig+0x690>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0203 	and.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d123      	bne.n	8004102 <HAL_RCC_OscConfig+0x57e>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d11c      	bne.n	8004102 <HAL_RCC_OscConfig+0x57e>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d114      	bne.n	8004102 <HAL_RCC_OscConfig+0x57e>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d10d      	bne.n	8004102 <HAL_RCC_OscConfig+0x57e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x57e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	429a      	cmp	r2, r3
 8004100:	d05d      	beq.n	80041be <HAL_RCC_OscConfig+0x63a>
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d058      	beq.n	80041ba <HAL_RCC_OscConfig+0x636>
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x596>
 8004116:	2301      	movs	r3, #1
 8004118:	e0a1      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 800411a:	f7ff fc84 	bl	8003a26 <LL_RCC_PLL_Disable>
 800411e:	f7fd ffb9 	bl	8002094 <HAL_GetTick>
 8004122:	6278      	str	r0, [r7, #36]	@ 0x24
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x5b4>
 8004126:	f7fd ffb5 	bl	8002094 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x5b4>
 8004134:	2303      	movs	r3, #3
 8004136:	e092      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8004138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ef      	bne.n	8004126 <HAL_RCC_OscConfig+0x5a2>
 8004146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	4b30      	ldr	r3, [pc, #192]	@ (8004210 <HAL_RCC_OscConfig+0x68c>)
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004158:	4311      	orrs	r1, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800415e:	0212      	lsls	r2, r2, #8
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004166:	4311      	orrs	r1, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800416c:	4311      	orrs	r1, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004172:	430a      	orrs	r2, r1
 8004174:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004178:	4313      	orrs	r3, r2
 800417a:	60cb      	str	r3, [r1, #12]
 800417c:	f7ff fc44 	bl	8003a08 <LL_RCC_PLL_Enable>
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	f7fd ff80 	bl	8002094 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x626>
 8004198:	f7fd ff7c 	bl	8002094 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x626>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e059      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ef      	beq.n	8004198 <HAL_RCC_OscConfig+0x614>
 80041b8:	e050      	b.n	800425c <HAL_RCC_OscConfig+0x6d8>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e04f      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d147      	bne.n	800425c <HAL_RCC_OscConfig+0x6d8>
 80041cc:	f7ff fc1c 	bl	8003a08 <LL_RCC_PLL_Enable>
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041de:	60d3      	str	r3, [r2, #12]
 80041e0:	f7fd ff58 	bl	8002094 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x676>
 80041e8:	f7fd ff54 	bl	8002094 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x676>
 80041f6:	2303      	movs	r3, #3
 80041f8:	e031      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ef      	beq.n	80041e8 <HAL_RCC_OscConfig+0x664>
 8004208:	e028      	b.n	800425c <HAL_RCC_OscConfig+0x6d8>
 800420a:	bf00      	nop
 800420c:	58000400 	.word	0x58000400
 8004210:	11c1808c 	.word	0x11c1808c
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b0c      	cmp	r3, #12
 8004218:	d01e      	beq.n	8004258 <HAL_RCC_OscConfig+0x6d4>
 800421a:	f7ff fc04 	bl	8003a26 <LL_RCC_PLL_Disable>
 800421e:	f7fd ff39 	bl	8002094 <HAL_GetTick>
 8004222:	6278      	str	r0, [r7, #36]	@ 0x24
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x6b4>
 8004226:	f7fd ff35 	bl	8002094 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x6b4>
 8004234:	2303      	movs	r3, #3
 8004236:	e012      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <HAL_RCC_OscConfig+0x6a2>
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004250:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <HAL_RCC_OscConfig+0x6e4>)
 8004252:	4013      	ands	r3, r2
 8004254:	60cb      	str	r3, [r1, #12]
 8004256:	e001      	b.n	800425c <HAL_RCC_OscConfig+0x6d8>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x6da>
 800425c:	2300      	movs	r3, #0
 800425e:	4618      	mov	r0, r3
 8004260:	3734      	adds	r7, #52	@ 0x34
 8004262:	46bd      	mov	sp, r7
 8004264:	bd90      	pop	{r4, r7, pc}
 8004266:	bf00      	nop
 8004268:	eefefffc 	.word	0xeefefffc

0800426c <HAL_RCC_ClockConfig>:
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
 800427c:	2301      	movs	r3, #1
 800427e:	e12d      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 8004280:	4b98      	ldr	r3, [pc, #608]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d91b      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x5a>
 800428e:	4b95      	ldr	r3, [pc, #596]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 0207 	bic.w	r2, r3, #7
 8004296:	4993      	ldr	r1, [pc, #588]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
 800429e:	f7fd fef9 	bl	8002094 <HAL_GetTick>
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_ClockConfig+0x4c>
 80042a6:	f7fd fef5 	bl	8002094 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x4c>
 80042b4:	2303      	movs	r3, #3
 80042b6:	e111      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 80042b8:	4b8a      	ldr	r3, [pc, #552]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d1ef      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x3a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <HAL_RCC_ClockConfig+0x94>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fb13 	bl	8003902 <LL_RCC_SetAHBPrescaler>
 80042dc:	f7fd feda 	bl	8002094 <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
 80042e4:	f7fd fed6 	bl	8002094 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0f2      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 80042f6:	f7ff fbe8 	bl	8003aca <LL_RCC_IsActiveFlag_HPRE>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f1      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x78>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d016      	beq.n	800433a <HAL_RCC_ClockConfig+0xce>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fb0a 	bl	800392a <LL_C2_RCC_SetAHBPrescaler>
 8004316:	f7fd febd 	bl	8002094 <HAL_GetTick>
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	e008      	b.n	8004330 <HAL_RCC_ClockConfig+0xc4>
 800431e:	f7fd feb9 	bl	8002094 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_ClockConfig+0xc4>
 800432c:	2303      	movs	r3, #3
 800432e:	e0d5      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 8004330:	f7ff fbdd 	bl	8003aee <LL_RCC_IsActiveFlag_C2HPRE>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f1      	beq.n	800431e <HAL_RCC_ClockConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <HAL_RCC_ClockConfig+0x108>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fb03 	bl	8003956 <LL_RCC_SetAHB4Prescaler>
 8004350:	f7fd fea0 	bl	8002094 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	e008      	b.n	800436a <HAL_RCC_ClockConfig+0xfe>
 8004358:	f7fd fe9c 	bl	8002094 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0xfe>
 8004366:	2303      	movs	r3, #3
 8004368:	e0b8      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 800436a:	f7ff fbd3 	bl	8003b14 <LL_RCC_IsActiveFlag_SHDHPRE>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f1      	beq.n	8004358 <HAL_RCC_ClockConfig+0xec>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d016      	beq.n	80043ae <HAL_RCC_ClockConfig+0x142>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fafd 	bl	8003984 <LL_RCC_SetAPB1Prescaler>
 800438a:	f7fd fe83 	bl	8002094 <HAL_GetTick>
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	e008      	b.n	80043a4 <HAL_RCC_ClockConfig+0x138>
 8004392:	f7fd fe7f 	bl	8002094 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x138>
 80043a0:	2303      	movs	r3, #3
 80043a2:	e09b      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 80043a4:	f7ff fbc9 	bl	8003b3a <LL_RCC_IsActiveFlag_PPRE1>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f1      	beq.n	8004392 <HAL_RCC_ClockConfig+0x126>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <HAL_RCC_ClockConfig+0x17e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff faf3 	bl	80039ac <LL_RCC_SetAPB2Prescaler>
 80043c6:	f7fd fe65 	bl	8002094 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_ClockConfig+0x174>
 80043ce:	f7fd fe61 	bl	8002094 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x174>
 80043dc:	2303      	movs	r3, #3
 80043de:	e07d      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 80043e0:	f7ff fbbd 	bl	8003b5e <LL_RCC_IsActiveFlag_PPRE2>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f1      	beq.n	80043ce <HAL_RCC_ClockConfig+0x162>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d043      	beq.n	800447e <HAL_RCC_ClockConfig+0x212>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d106      	bne.n	800440c <HAL_RCC_ClockConfig+0x1a0>
 80043fe:	f7ff f893 	bl	8003528 <LL_RCC_HSE_IsReady>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11e      	bne.n	8004446 <HAL_RCC_ClockConfig+0x1da>
 8004408:	2301      	movs	r3, #1
 800440a:	e067      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d106      	bne.n	8004422 <HAL_RCC_ClockConfig+0x1b6>
 8004414:	f7ff fb16 	bl	8003a44 <LL_RCC_PLL_IsReady>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <HAL_RCC_ClockConfig+0x1da>
 800441e:	2301      	movs	r3, #1
 8004420:	e05c      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_RCC_ClockConfig+0x1cc>
 800442a:	f7ff f9fb 	bl	8003824 <LL_RCC_MSI_IsReady>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d108      	bne.n	8004446 <HAL_RCC_ClockConfig+0x1da>
 8004434:	2301      	movs	r3, #1
 8004436:	e051      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 8004438:	f7ff f8a6 	bl	8003588 <LL_RCC_HSI_IsReady>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_ClockConfig+0x1da>
 8004442:	2301      	movs	r3, #1
 8004444:	e04a      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fa39 	bl	80038c2 <LL_RCC_SetSysClkSource>
 8004450:	f7fd fe20 	bl	8002094 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x202>
 8004458:	f7fd fe1c 	bl	8002094 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x202>
 800446a:	2303      	movs	r3, #3
 800446c:	e036      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 800446e:	f7ff fa3c 	bl	80038ea <LL_RCC_GetSysClkSource>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	429a      	cmp	r2, r3
 800447c:	d1ec      	bne.n	8004458 <HAL_RCC_ClockConfig+0x1ec>
 800447e:	4b19      	ldr	r3, [pc, #100]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d21b      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x258>
 800448c:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 0207 	bic.w	r2, r3, #7
 8004494:	4913      	ldr	r1, [pc, #76]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]
 800449c:	f7fd fdfa 	bl	8002094 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_ClockConfig+0x24a>
 80044a4:	f7fd fdf6 	bl	8002094 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x24a>
 80044b2:	2303      	movs	r3, #3
 80044b4:	e012      	b.n	80044dc <HAL_RCC_ClockConfig+0x270>
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_ClockConfig+0x278>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d1ef      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x238>
 80044c4:	f000 f87e 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80044c8:	4603      	mov	r3, r0
 80044ca:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <HAL_RCC_ClockConfig+0x27c>)
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	f7fd fded 	bl	80020ac <HAL_GetTickPrio>
 80044d2:	4603      	mov	r3, r0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd fd8f 	bl	8001ff8 <HAL_InitTick>
 80044da:	4603      	mov	r3, r0
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	58004000 	.word	0x58004000
 80044e8:	20000044 	.word	0x20000044

080044ec <HAL_RCC_GetSysClockFreq>:
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	f7ff f9fa 	bl	80038ea <LL_RCC_GetSysClkSource>
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0x28>
 80044fe:	f7ff f9b6 	bl	800386e <LL_RCC_MSI_GetRange>
 8004502:	4603      	mov	r3, r0
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a2b      	ldr	r2, [pc, #172]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e04b      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xc0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d102      	bne.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 800451a:	4b28      	ldr	r3, [pc, #160]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e045      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xc0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b08      	cmp	r3, #8
 8004524:	d10a      	bne.n	800453c <HAL_RCC_GetSysClockFreq+0x50>
 8004526:	f7fe ffcf 	bl	80034c8 <LL_RCC_HSE_IsEnabledDiv2>
 800452a:	4603      	mov	r3, r0
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_RCC_GetSysClockFreq+0x4a>
 8004530:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e03a      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xc0>
 8004536:	4b22      	ldr	r3, [pc, #136]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e037      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0xc0>
 800453c:	f7ff fab9 	bl	8003ab2 <LL_RCC_PLL_GetMainSource>
 8004540:	6038      	str	r0, [r7, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d003      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x64>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b03      	cmp	r3, #3
 800454c:	d003      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x6a>
 800454e:	e00d      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x80>
 8004550:	4b1a      	ldr	r3, [pc, #104]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	e015      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x96>
 8004556:	f7fe ffb7 	bl	80034c8 <LL_RCC_HSE_IsEnabledDiv2>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	d102      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x7a>
 8004560:	4b16      	ldr	r3, [pc, #88]	@ (80045bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	e00d      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x96>
 8004566:	4b16      	ldr	r3, [pc, #88]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	e00a      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x96>
 800456c:	f7ff f97f 	bl	800386e <LL_RCC_MSI_GetRange>
 8004570:	4603      	mov	r3, r0
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	4a0f      	ldr	r2, [pc, #60]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800457a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	bf00      	nop
 8004582:	f7ff fa71 	bl	8003a68 <LL_RCC_PLL_GetN>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	fb03 f402 	mul.w	r4, r3, r2
 800458e:	f7ff fa84 	bl	8003a9a <LL_RCC_PLL_GetDivider>
 8004592:	4603      	mov	r3, r0
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	3301      	adds	r3, #1
 8004598:	fbb4 f4f3 	udiv	r4, r4, r3
 800459c:	f7ff fa71 	bl	8003a82 <LL_RCC_PLL_GetR>
 80045a0:	4603      	mov	r3, r0
 80045a2:	0f5b      	lsrs	r3, r3, #29
 80045a4:	3301      	adds	r3, #1
 80045a6:	fbb4 f3f3 	udiv	r3, r4, r3
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	08009638 	.word	0x08009638
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	01e84800 	.word	0x01e84800

080045c4 <HAL_RCC_GetHCLKFreq>:
 80045c4:	b598      	push	{r3, r4, r7, lr}
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	f7ff ff90 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 80045cc:	4604      	mov	r4, r0
 80045ce:	f7ff fa01 	bl	80039d4 <LL_RCC_GetAHBPrescaler>
 80045d2:	4603      	mov	r3, r0
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	4a03      	ldr	r2, [pc, #12]	@ (80045e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80045dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e0:	fbb4 f3f3 	udiv	r3, r4, r3
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd98      	pop	{r3, r4, r7, pc}
 80045e8:	080095f8 	.word	0x080095f8

080045ec <RCC_SetFlashLatencyFromMSIRange>:
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80045f8:	d903      	bls.n	8004602 <RCC_SetFlashLatencyFromMSIRange+0x16>
 80045fa:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e007      	b.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x26>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800460c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	f7ff f9eb 	bl	80039ec <LL_RCC_GetAHB4Prescaler>
 8004616:	4603      	mov	r3, r0
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	0c9c      	lsrs	r4, r3, #18
 8004636:	f7fe ff39 	bl	80034ac <HAL_PWREx_GetVoltageRange>
 800463a:	4603      	mov	r3, r0
 800463c:	4619      	mov	r1, r3
 800463e:	4620      	mov	r0, r4
 8004640:	f000 f80c 	bl	800465c <RCC_SetFlashLatency>
 8004644:	4603      	mov	r3, r0
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bd90      	pop	{r4, r7, pc}
 800464e:	bf00      	nop
 8004650:	08009638 	.word	0x08009638
 8004654:	080095f8 	.word	0x080095f8
 8004658:	431bde83 	.word	0x431bde83

0800465c <RCC_SetFlashLatency>:
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b093      	sub	sp, #76	@ 0x4c
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
 8004666:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <RCC_SetFlashLatency+0xe8>)
 8004668:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800466c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800466e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004672:	4a35      	ldr	r2, [pc, #212]	@ (8004748 <RCC_SetFlashLatency+0xec>)
 8004674:	f107 031c 	add.w	r3, r7, #28
 8004678:	ca07      	ldmia	r2, {r0, r1, r2}
 800467a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800467e:	4b33      	ldr	r3, [pc, #204]	@ (800474c <RCC_SetFlashLatency+0xf0>)
 8004680:	f107 040c 	add.w	r4, r7, #12
 8004684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800468a:	2300      	movs	r3, #0
 800468c:	647b      	str	r3, [r7, #68]	@ 0x44
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004694:	d11a      	bne.n	80046cc <RCC_SetFlashLatency+0x70>
 8004696:	2300      	movs	r3, #0
 8004698:	643b      	str	r3, [r7, #64]	@ 0x40
 800469a:	e013      	b.n	80046c4 <RCC_SetFlashLatency+0x68>
 800469c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	3348      	adds	r3, #72	@ 0x48
 80046a2:	443b      	add	r3, r7
 80046a4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d807      	bhi.n	80046be <RCC_SetFlashLatency+0x62>
 80046ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	3348      	adds	r3, #72	@ 0x48
 80046b4:	443b      	add	r3, r7
 80046b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80046ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80046bc:	e020      	b.n	8004700 <RCC_SetFlashLatency+0xa4>
 80046be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c0:	3301      	adds	r3, #1
 80046c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d9e8      	bls.n	800469c <RCC_SetFlashLatency+0x40>
 80046ca:	e019      	b.n	8004700 <RCC_SetFlashLatency+0xa4>
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d0:	e013      	b.n	80046fa <RCC_SetFlashLatency+0x9e>
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	3348      	adds	r3, #72	@ 0x48
 80046d8:	443b      	add	r3, r7
 80046da:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d807      	bhi.n	80046f4 <RCC_SetFlashLatency+0x98>
 80046e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	3348      	adds	r3, #72	@ 0x48
 80046ea:	443b      	add	r3, r7
 80046ec:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80046f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046f2:	e005      	b.n	8004700 <RCC_SetFlashLatency+0xa4>
 80046f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f6:	3301      	adds	r3, #1
 80046f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d9e8      	bls.n	80046d2 <RCC_SetFlashLatency+0x76>
 8004700:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <RCC_SetFlashLatency+0xf4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 0207 	bic.w	r2, r3, #7
 8004708:	4911      	ldr	r1, [pc, #68]	@ (8004750 <RCC_SetFlashLatency+0xf4>)
 800470a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	f7fd fcc0 	bl	8002094 <HAL_GetTick>
 8004714:	63b8      	str	r0, [r7, #56]	@ 0x38
 8004716:	e008      	b.n	800472a <RCC_SetFlashLatency+0xce>
 8004718:	f7fd fcbc 	bl	8002094 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <RCC_SetFlashLatency+0xce>
 8004726:	2303      	movs	r3, #3
 8004728:	e007      	b.n	800473a <RCC_SetFlashLatency+0xde>
 800472a:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <RCC_SetFlashLatency+0xf4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004734:	429a      	cmp	r2, r3
 8004736:	d1ef      	bne.n	8004718 <RCC_SetFlashLatency+0xbc>
 8004738:	2300      	movs	r3, #0
 800473a:	4618      	mov	r0, r3
 800473c:	374c      	adds	r7, #76	@ 0x4c
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	08009454 	.word	0x08009454
 8004748:	08009464 	.word	0x08009464
 800474c:	08009470 	.word	0x08009470
 8004750:	58004000 	.word	0x58004000

08004754 <LL_RCC_LSE_IsEnabled>:
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <LL_RCC_LSE_IsEnabled+0x18>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <LL_RCC_LSE_IsEnabled+0x1a>
 800476c:	2300      	movs	r3, #0
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_RCC_LSE_IsReady>:
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d101      	bne.n	8004790 <LL_RCC_LSE_IsReady+0x18>
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <LL_RCC_LSE_IsReady+0x1a>
 8004790:	2300      	movs	r3, #0
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <LL_RCC_SetRFWKPClockSource>:
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_SetSMPSClockSource>:
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	f023 0203 	bic.w	r2, r3, #3
 80047da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	624b      	str	r3, [r1, #36]	@ 0x24
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_RCC_SetSMPSPrescaler>:
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4313      	orrs	r3, r2
 800480a:	624b      	str	r3, [r1, #36]	@ 0x24
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_SetUSARTClockSource>:
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004828:	f023 0203 	bic.w	r2, r3, #3
 800482c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LL_RCC_SetLPUARTClockSource>:
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004854:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004858:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_RCC_SetI2CClockSource>:
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800487c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	091b      	lsrs	r3, r3, #4
 8004884:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004888:	43db      	mvns	r3, r3
 800488a:	401a      	ands	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <LL_RCC_SetLPTIMClockSource>:
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_SetSAIClockSource>:
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_RCC_SetRNGClockSource>:
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800491e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <LL_RCC_SetCLK48ClockSource>:
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800494a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_RCC_SetUSBClockSource>:
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ffe3 	bl	8004936 <LL_RCC_SetCLK48ClockSource>
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <LL_RCC_SetADCClockSource>:
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800498c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_RCC_SetRTCClockSource>:
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <LL_RCC_GetRTCClockSource>:
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_RCC_ForceBackupDomainReset>:
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <LL_RCC_ReleaseBackupDomainReset>:
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_PLLSAI1_Enable>:
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_PLLSAI1_Disable>:
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_PLLSAI1_IsReady>:
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a7c:	d101      	bne.n	8004a82 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004a82:	2300      	movs	r3, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_RCCEx_PeriphCLKConfig>:
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b088      	sub	sp, #32
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	2300      	movs	r3, #0
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	77bb      	strb	r3, [r7, #30]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d034      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ab2:	d021      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004ab4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ab8:	d81b      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004abe:	d01d      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ac4:	d815      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ace:	d110      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ade:	60d3      	str	r3, [r2, #12]
 8004ae0:	e00d      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f947 	bl	8004d7a <RCCEx_PLLSAI1_ConfigNP>
 8004aec:	4603      	mov	r3, r0
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e005      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004af2:	2301      	movs	r3, #1
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e002      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004afc:	bf00      	nop
 8004afe:	7ffb      	ldrb	r3, [r7, #31]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fee8 	bl	80048de <LL_RCC_SetSAIClockSource>
 8004b0e:	e001      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004b10:	7ffb      	ldrb	r3, [r7, #31]
 8004b12:	77bb      	strb	r3, [r7, #30]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d046      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004b20:	f7ff ff56 	bl	80049d0 <LL_RCC_GetRTCClockSource>
 8004b24:	61b8      	str	r0, [r7, #24]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d03c      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004b30:	f7fe fcac 	bl	800348c <HAL_PWR_EnableBkUpAccess>
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff30 	bl	80049a4 <LL_RCC_SetRTCClockSource>
 8004b44:	e02e      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	f7ff ff4b 	bl	80049ea <LL_RCC_ForceBackupDomainReset>
 8004b54:	f7ff ff5a 	bl	8004a0c <LL_RCC_ReleaseBackupDomainReset>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b70:	f7ff fdf0 	bl	8004754 <LL_RCC_LSE_IsEnabled>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d114      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b7a:	f7fd fa8b 	bl	8002094 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]
 8004b80:	e00b      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b82:	f7fd fa87 	bl	8002094 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d902      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b94:	2303      	movs	r3, #3
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e004      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b9a:	f7ff fded 	bl	8004778 <LL_RCC_LSE_IsReady>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d1ee      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	77bb      	strb	r3, [r7, #30]
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004baa:	7ffb      	ldrb	r3, [r7, #31]
 8004bac:	77bb      	strb	r3, [r7, #30]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fe2a 	bl	8004818 <LL_RCC_SetUSARTClockSource>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fe35 	bl	8004844 <LL_RCC_SetLPUARTClockSource>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fe5d 	bl	80048aa <LL_RCC_SetLPTIMClockSource>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fe52 	bl	80048aa <LL_RCC_SetLPTIMClockSource>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fe2a 	bl	8004870 <LL_RCC_SetI2CClockSource>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fe1f 	bl	8004870 <LL_RCC_SetI2CClockSource>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d022      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fe8d 	bl	8004962 <LL_RCC_SetUSBClockSource>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c50:	d107      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c60:	60d3      	str	r3, [r2, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f8dd 	bl	8004e30 <RCCEx_PLLSAI1_ConfigNQ>
 8004c76:	4603      	mov	r3, r0
 8004c78:	77fb      	strb	r3, [r7, #31]
 8004c7a:	7ffb      	ldrb	r3, [r7, #31]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004c80:	7ffb      	ldrb	r3, [r7, #31]
 8004c82:	77bb      	strb	r3, [r7, #30]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02b      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c98:	d008      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ca2:	d003      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fe2a 	bl	800490a <LL_RCC_SetRNGClockSource>
 8004cb6:	e00a      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7ff fe21 	bl	800490a <LL_RCC_SetRNGClockSource>
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fe34 	bl	8004936 <LL_RCC_SetCLK48ClockSource>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ce6:	60d3      	str	r3, [r2, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d022      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fe3d 	bl	8004978 <LL_RCC_SetADCClockSource>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d06:	d107      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d16:	60d3      	str	r3, [r2, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d20:	d10b      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f8dd 	bl	8004ee6 <RCCEx_PLLSAI1_ConfigNR>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	7ffb      	ldrb	r3, [r7, #31]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	77bb      	strb	r3, [r7, #30]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fd26 	bl	800479c <LL_RCC_SetRFWKPClockSource>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fd45 	bl	80047f0 <LL_RCC_SetSMPSPrescaler>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fd2c 	bl	80047c8 <LL_RCC_SetSMPSClockSource>
 8004d70:	7fbb      	ldrb	r3, [r7, #30]
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <RCCEx_PLLSAI1_ConfigNP>:
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	f7ff fe61 	bl	8004a4c <LL_RCC_PLLSAI1_Disable>
 8004d8a:	f7fd f983 	bl	8002094 <HAL_GetTick>
 8004d8e:	60b8      	str	r0, [r7, #8]
 8004d90:	e009      	b.n	8004da6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004d92:	f7fd f97f 	bl	8002094 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d902      	bls.n	8004da6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004da0:	2303      	movs	r3, #3
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e004      	b.n	8004db0 <RCCEx_PLLSAI1_ConfigNP+0x36>
 8004da6:	f7ff fe60 	bl	8004a6a <LL_RCC_PLLSAI1_IsReady>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <RCCEx_PLLSAI1_ConfigNP+0x18>
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d137      	bne.n	8004e26 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	610b      	str	r3, [r1, #16]
 8004dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004de0:	4313      	orrs	r3, r2
 8004de2:	610b      	str	r3, [r1, #16]
 8004de4:	f7ff fe23 	bl	8004a2e <LL_RCC_PLLSAI1_Enable>
 8004de8:	f7fd f954 	bl	8002094 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]
 8004dee:	e009      	b.n	8004e04 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8004df0:	f7fd f950 	bl	8002094 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d902      	bls.n	8004e04 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8004dfe:	2303      	movs	r3, #3
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	e004      	b.n	8004e0e <RCCEx_PLLSAI1_ConfigNP+0x94>
 8004e04:	f7ff fe31 	bl	8004a6a <LL_RCC_PLLSAI1_IsReady>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d1f0      	bne.n	8004df0 <RCCEx_PLLSAI1_ConfigNP+0x76>
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d108      	bne.n	8004e26 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e22:	4313      	orrs	r3, r2
 8004e24:	610b      	str	r3, [r1, #16]
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <RCCEx_PLLSAI1_ConfigNQ>:
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	f7ff fe06 	bl	8004a4c <LL_RCC_PLLSAI1_Disable>
 8004e40:	f7fd f928 	bl	8002094 <HAL_GetTick>
 8004e44:	60b8      	str	r0, [r7, #8]
 8004e46:	e009      	b.n	8004e5c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 8004e48:	f7fd f924 	bl	8002094 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 8004e56:	2303      	movs	r3, #3
 8004e58:	73fb      	strb	r3, [r7, #15]
 8004e5a:	e004      	b.n	8004e66 <RCCEx_PLLSAI1_ConfigNQ+0x36>
 8004e5c:	f7ff fe05 	bl	8004a6a <LL_RCC_PLLSAI1_IsReady>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <RCCEx_PLLSAI1_ConfigNQ+0x18>
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d137      	bne.n	8004edc <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e96:	4313      	orrs	r3, r2
 8004e98:	610b      	str	r3, [r1, #16]
 8004e9a:	f7ff fdc8 	bl	8004a2e <LL_RCC_PLLSAI1_Enable>
 8004e9e:	f7fd f8f9 	bl	8002094 <HAL_GetTick>
 8004ea2:	60b8      	str	r0, [r7, #8]
 8004ea4:	e009      	b.n	8004eba <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8004ea6:	f7fd f8f5 	bl	8002094 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d902      	bls.n	8004eba <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	73fb      	strb	r3, [r7, #15]
 8004eb8:	e004      	b.n	8004ec4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
 8004eba:	f7ff fdd6 	bl	8004a6a <LL_RCC_PLLSAI1_IsReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d1f0      	bne.n	8004ea6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d108      	bne.n	8004edc <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8004eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <RCCEx_PLLSAI1_ConfigNR>:
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	f7ff fdab 	bl	8004a4c <LL_RCC_PLLSAI1_Disable>
 8004ef6:	f7fd f8cd 	bl	8002094 <HAL_GetTick>
 8004efa:	60b8      	str	r0, [r7, #8]
 8004efc:	e009      	b.n	8004f12 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8004efe:	f7fd f8c9 	bl	8002094 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d902      	bls.n	8004f12 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e004      	b.n	8004f1c <RCCEx_PLLSAI1_ConfigNR+0x36>
 8004f12:	f7ff fdaa 	bl	8004a6a <LL_RCC_PLLSAI1_IsReady>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f0      	bne.n	8004efe <RCCEx_PLLSAI1_ConfigNR+0x18>
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d137      	bne.n	8004f92 <RCCEx_PLLSAI1_ConfigNR+0xac>
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]
 8004f50:	f7ff fd6d 	bl	8004a2e <LL_RCC_PLLSAI1_Enable>
 8004f54:	f7fd f89e 	bl	8002094 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]
 8004f5a:	e009      	b.n	8004f70 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 8004f5c:	f7fd f89a 	bl	8002094 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d902      	bls.n	8004f70 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e004      	b.n	8004f7a <RCCEx_PLLSAI1_ConfigNR+0x94>
 8004f70:	f7ff fd7b 	bl	8004a6a <LL_RCC_PLLSAI1_IsReady>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d1f0      	bne.n	8004f5c <RCCEx_PLLSAI1_ConfigNR+0x76>
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <RCCEx_PLLSAI1_ConfigNR+0xac>
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_RTC_Init>:
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RTC_Init+0x12>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e09f      	b.n	80050ee <HAL_RTC_Init+0x152>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RTC_Init+0x2c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2020 	strb.w	r2, [r3, #32]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc fee8 	bl	8001d98 <HAL_RTC_MspInit>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8004fd0:	4b49      	ldr	r3, [pc, #292]	@ (80050f8 <HAL_RTC_Init+0x15c>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d07e      	beq.n	80050da <HAL_RTC_Init+0x13e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	22ca      	movs	r2, #202	@ 0xca
 8004fe2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2253      	movs	r2, #83	@ 0x53
 8004fea:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8ab 	bl	8005148 <RTC_EnterInitMode>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RTC_Init+0x72>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	22ff      	movs	r2, #255	@ 0xff
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2204      	movs	r2, #4
 8005004:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e067      	b.n	80050de <HAL_RTC_Init+0x142>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800501c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005020:	6093      	str	r3, [r2, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68d2      	ldr	r2, [r2, #12]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6919      	ldr	r1, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	041a      	lsls	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	611a      	str	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0203 	bic.w	r2, r2, #3
 800507c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d113      	bne.n	80050cc <HAL_RTC_Init+0x130>
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f829 	bl	80050fc <HAL_RTC_WaitForSynchro>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <HAL_RTC_Init+0x130>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	22ff      	movs	r2, #255	@ 0xff
 80050b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2204      	movs	r2, #4
 80050bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2020 	strb.w	r2, [r3, #32]
 80050c8:	2301      	movs	r3, #1
 80050ca:	e010      	b.n	80050ee <HAL_RTC_Init+0x152>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	22ff      	movs	r2, #255	@ 0xff
 80050d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]
 80050d8:	e001      	b.n	80050de <HAL_RTC_Init+0x142>
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <HAL_RTC_Init+0x150>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40002800 	.word	0x40002800

080050fc <HAL_RTC_WaitForSynchro>:
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005112:	60da      	str	r2, [r3, #12]
 8005114:	f7fc ffbe 	bl	8002094 <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	e009      	b.n	8005130 <HAL_RTC_WaitForSynchro+0x34>
 800511c:	f7fc ffba 	bl	8002094 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800512a:	d901      	bls.n	8005130 <HAL_RTC_WaitForSynchro+0x34>
 800512c:	2303      	movs	r3, #3
 800512e:	e007      	b.n	8005140 <HAL_RTC_WaitForSynchro+0x44>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ee      	beq.n	800511c <HAL_RTC_WaitForSynchro+0x20>
 800513e:	2300      	movs	r3, #0
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <RTC_EnterInitMode>:
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d119      	bne.n	8005192 <RTC_EnterInitMode+0x4a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f04f 32ff 	mov.w	r2, #4294967295
 8005166:	60da      	str	r2, [r3, #12]
 8005168:	f7fc ff94 	bl	8002094 <HAL_GetTick>
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	e009      	b.n	8005184 <RTC_EnterInitMode+0x3c>
 8005170:	f7fc ff90 	bl	8002094 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800517e:	d901      	bls.n	8005184 <RTC_EnterInitMode+0x3c>
 8005180:	2303      	movs	r3, #3
 8005182:	e007      	b.n	8005194 <RTC_EnterInitMode+0x4c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ee      	beq.n	8005170 <RTC_EnterInitMode+0x28>
 8005192:	2300      	movs	r3, #0
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_RTCEx_SetWakeUpTimer_IT>:
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e0a8      	b.n	8005308 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2020 	strb.w	r2, [r3, #32]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	22ca      	movs	r2, #202	@ 0xca
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2253      	movs	r2, #83	@ 0x53
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d020      	beq.n	8005226 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
 80051e4:	f7fc ff56 	bl	8002094 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]
 80051ea:	e015      	b.n	8005218 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 80051ec:	f7fc ff52 	bl	8002094 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051fa:	d90d      	bls.n	8005218 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	22ff      	movs	r2, #255	@ 0xff
 8005202:	625a      	str	r2, [r3, #36]	@ 0x24
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2203      	movs	r2, #3
 8005208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2020 	strb.w	r2, [r3, #32]
 8005214:	2303      	movs	r3, #3
 8005216:	e077      	b.n	8005308 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e2      	bne.n	80051ec <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	f7fc ff24 	bl	8002094 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]
 800524e:	e015      	b.n	800527c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 8005250:	f7fc ff20 	bl	8002094 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800525e:	d90d      	bls.n	800527c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	22ff      	movs	r2, #255	@ 0xff
 8005266:	625a      	str	r2, [r3, #36]	@ 0x24
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2203      	movs	r2, #3
 800526c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2020 	strb.w	r2, [r3, #32]
 8005278:	2303      	movs	r3, #3
 800527a:	e045      	b.n	8005308 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0e2      	beq.n	8005250 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	615a      	str	r2, [r3, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0207 	bic.w	r2, r2, #7
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6899      	ldr	r1, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
 80052b2:	4b17      	ldr	r3, [pc, #92]	@ (8005310 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80052b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b8:	4a15      	ldr	r2, [pc, #84]	@ (8005310 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80052ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052c2:	4b13      	ldr	r3, [pc, #76]	@ (8005310 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a12      	ldr	r2, [pc, #72]	@ (8005310 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80052c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	22ff      	movs	r2, #255	@ 0xff
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2020 	strb.w	r2, [r3, #32]
 8005306:	2300      	movs	r3, #0
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	58000800 	.word	0x58000800

08005314 <aci_gap_set_non_discoverable>:
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	2300      	movs	r3, #0
 800531c:	71fb      	strb	r3, [r7, #7]
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	2218      	movs	r2, #24
 8005324:	2100      	movs	r1, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f001 fa45 	bl	80067b6 <Osal_MemSet>
 800532c:	233f      	movs	r3, #63	@ 0x3f
 800532e:	813b      	strh	r3, [r7, #8]
 8005330:	2381      	movs	r3, #129	@ 0x81
 8005332:	817b      	strh	r3, [r7, #10]
 8005334:	1dfb      	adds	r3, r7, #7
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	2301      	movs	r3, #1
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	f107 0308 	add.w	r3, r7, #8
 8005340:	2100      	movs	r1, #0
 8005342:	4618      	mov	r0, r3
 8005344:	f001 fcdc 	bl	8006d00 <hci_send_req>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	da01      	bge.n	8005352 <aci_gap_set_non_discoverable+0x3e>
 800534e:	23ff      	movs	r3, #255	@ 0xff
 8005350:	e000      	b.n	8005354 <aci_gap_set_non_discoverable+0x40>
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <aci_gap_set_discoverable>:
 800535c:	b5b0      	push	{r4, r5, r7, lr}
 800535e:	b0ce      	sub	sp, #312	@ 0x138
 8005360:	af00      	add	r7, sp, #0
 8005362:	4605      	mov	r5, r0
 8005364:	460c      	mov	r4, r1
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800536e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005372:	462a      	mov	r2, r5
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800537a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800537e:	4622      	mov	r2, r4
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005386:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800538a:	4602      	mov	r2, r0
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005392:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005396:	460a      	mov	r2, r1
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	f107 0310 	add.w	r3, r7, #16
 800539e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80053a2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80053a6:	3308      	adds	r3, #8
 80053a8:	f107 0210 	add.w	r2, r7, #16
 80053ac:	4413      	add	r3, r2
 80053ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80053b2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80053b6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80053ba:	4413      	add	r3, r2
 80053bc:	3309      	adds	r3, #9
 80053be:	f107 0210 	add.w	r2, r7, #16
 80053c2:	4413      	add	r3, r2
 80053c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80053c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80053cc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80053da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053e2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80053ee:	3301      	adds	r3, #1
 80053f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80053f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80053f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80053fc:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005400:	8812      	ldrh	r2, [r2, #0]
 8005402:	f8a3 2001 	strh.w	r2, [r3, #1]
 8005406:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800540a:	3302      	adds	r3, #2
 800540c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005410:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005414:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005418:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800541c:	8812      	ldrh	r2, [r2, #0]
 800541e:	f8a3 2003 	strh.w	r2, [r3, #3]
 8005422:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005426:	3302      	adds	r3, #2
 8005428:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800542c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005430:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005434:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	715a      	strb	r2, [r3, #5]
 800543c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005440:	3301      	adds	r3, #1
 8005442:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005446:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800544a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800544e:	719a      	strb	r2, [r3, #6]
 8005450:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005454:	3301      	adds	r3, #1
 8005456:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800545a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800545e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005462:	71da      	strb	r2, [r3, #7]
 8005464:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005468:	3301      	adds	r3, #1
 800546a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800546e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005472:	3308      	adds	r3, #8
 8005474:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005478:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f98a 	bl	8006796 <Osal_MemCpy>
 8005482:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005486:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800548a:	4413      	add	r3, r2
 800548c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005490:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005494:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800549e:	3301      	adds	r3, #1
 80054a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80054a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80054a8:	3301      	adds	r3, #1
 80054aa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80054ae:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 f96f 	bl	8006796 <Osal_MemCpy>
 80054b8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80054bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80054c0:	4413      	add	r3, r2
 80054c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054ca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054d4:	3302      	adds	r3, #2
 80054d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80054da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054de:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80054e2:	805a      	strh	r2, [r3, #2]
 80054e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054e8:	3302      	adds	r3, #2
 80054ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80054ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054f2:	2218      	movs	r2, #24
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 f95d 	bl	80067b6 <Osal_MemSet>
 80054fc:	233f      	movs	r3, #63	@ 0x3f
 80054fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005502:	2383      	movs	r3, #131	@ 0x83
 8005504:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005510:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005514:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005518:	f107 030f 	add.w	r3, r7, #15
 800551c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005520:	2301      	movs	r3, #1
 8005522:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fbe7 	bl	8006d00 <hci_send_req>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	da01      	bge.n	800553c <aci_gap_set_discoverable+0x1e0>
 8005538:	23ff      	movs	r3, #255	@ 0xff
 800553a:	e004      	b.n	8005546 <aci_gap_set_discoverable+0x1ea>
 800553c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005540:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800554c:	46bd      	mov	sp, r7
 800554e:	bdb0      	pop	{r4, r5, r7, pc}

08005550 <aci_gap_set_io_capability>:
 8005550:	b580      	push	{r7, lr}
 8005552:	b0cc      	sub	sp, #304	@ 0x130
 8005554:	af00      	add	r7, sp, #0
 8005556:	4602      	mov	r2, r0
 8005558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800555c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	f107 0310 	add.w	r3, r7, #16
 8005566:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800556a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800556e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005580:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005584:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005588:	7812      	ldrb	r2, [r2, #0]
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005590:	3301      	adds	r3, #1
 8005592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800559a:	2218      	movs	r2, #24
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 f909 	bl	80067b6 <Osal_MemSet>
 80055a4:	233f      	movs	r3, #63	@ 0x3f
 80055a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 80055aa:	2385      	movs	r3, #133	@ 0x85
 80055ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 80055b0:	f107 0310 	add.w	r3, r7, #16
 80055b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80055b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80055c0:	f107 030f 	add.w	r3, r7, #15
 80055c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80055c8:	2301      	movs	r3, #1
 80055ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80055ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fb93 	bl	8006d00 <hci_send_req>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	da01      	bge.n	80055e4 <aci_gap_set_io_capability+0x94>
 80055e0:	23ff      	movs	r3, #255	@ 0xff
 80055e2:	e004      	b.n	80055ee <aci_gap_set_io_capability+0x9e>
 80055e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <aci_gap_set_authentication_requirement>:
 80055f8:	b5b0      	push	{r4, r5, r7, lr}
 80055fa:	b0cc      	sub	sp, #304	@ 0x130
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4605      	mov	r5, r0
 8005600:	460c      	mov	r4, r1
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800560a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800560e:	462a      	mov	r2, r5
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005616:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800561a:	4622      	mov	r2, r4
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005622:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005626:	4602      	mov	r2, r0
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800562e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005632:	460a      	mov	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800563e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005642:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005650:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005654:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005658:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005664:	3301      	adds	r3, #1
 8005666:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800566a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800566e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005672:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	705a      	strb	r2, [r3, #1]
 800567a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800567e:	3301      	adds	r3, #1
 8005680:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005688:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800568c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	709a      	strb	r2, [r3, #2]
 8005694:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005698:	3301      	adds	r3, #1
 800569a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800569e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056a6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80056aa:	7812      	ldrb	r2, [r2, #0]
 80056ac:	70da      	strb	r2, [r3, #3]
 80056ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056b2:	3301      	adds	r3, #1
 80056b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80056b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056bc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80056c0:	711a      	strb	r2, [r3, #4]
 80056c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056c6:	3301      	adds	r3, #1
 80056c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80056cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056d0:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80056d4:	715a      	strb	r2, [r3, #5]
 80056d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056da:	3301      	adds	r3, #1
 80056dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80056e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056e4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80056e8:	719a      	strb	r2, [r3, #6]
 80056ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056ee:	3301      	adds	r3, #1
 80056f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80056f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80056f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80056fc:	f8c3 2007 	str.w	r2, [r3, #7]
 8005700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005704:	3304      	adds	r3, #4
 8005706:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800570a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800570e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005712:	72da      	strb	r2, [r3, #11]
 8005714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005718:	3301      	adds	r3, #1
 800571a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800571e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005722:	2218      	movs	r2, #24
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f845 	bl	80067b6 <Osal_MemSet>
 800572c:	233f      	movs	r3, #63	@ 0x3f
 800572e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005732:	2386      	movs	r3, #134	@ 0x86
 8005734:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005740:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005744:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005748:	f107 030f 	add.w	r3, r7, #15
 800574c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005750:	2301      	movs	r3, #1
 8005752:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f001 facf 	bl	8006d00 <hci_send_req>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	da01      	bge.n	800576c <aci_gap_set_authentication_requirement+0x174>
 8005768:	23ff      	movs	r3, #255	@ 0xff
 800576a:	e004      	b.n	8005776 <aci_gap_set_authentication_requirement+0x17e>
 800576c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005770:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800577c:	46bd      	mov	sp, r7
 800577e:	bdb0      	pop	{r4, r5, r7, pc}

08005780 <aci_gap_pass_key_resp>:
 8005780:	b580      	push	{r7, lr}
 8005782:	b0cc      	sub	sp, #304	@ 0x130
 8005784:	af00      	add	r7, sp, #0
 8005786:	4602      	mov	r2, r0
 8005788:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800578c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005790:	6019      	str	r1, [r3, #0]
 8005792:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005796:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	f107 0310 	add.w	r3, r7, #16
 80057a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80057a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	2300      	movs	r3, #0
 80057b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ca:	3302      	adds	r3, #2
 80057cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80057d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80057d8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	f8c3 2002 	str.w	r2, [r3, #2]
 80057e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057e6:	3304      	adds	r3, #4
 80057e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80057ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057f0:	2218      	movs	r2, #24
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 ffde 	bl	80067b6 <Osal_MemSet>
 80057fa:	233f      	movs	r3, #63	@ 0x3f
 80057fc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005800:	2388      	movs	r3, #136	@ 0x88
 8005802:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8005806:	f107 0310 	add.w	r3, r7, #16
 800580a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800580e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005812:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005816:	f107 030f 	add.w	r3, r7, #15
 800581a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800581e:	2301      	movs	r3, #1
 8005820:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005824:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f001 fa68 	bl	8006d00 <hci_send_req>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	da01      	bge.n	800583a <aci_gap_pass_key_resp+0xba>
 8005836:	23ff      	movs	r3, #255	@ 0xff
 8005838:	e004      	b.n	8005844 <aci_gap_pass_key_resp+0xc4>
 800583a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800583e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <aci_gap_init>:
 800584e:	b590      	push	{r4, r7, lr}
 8005850:	b0cd      	sub	sp, #308	@ 0x134
 8005852:	af00      	add	r7, sp, #0
 8005854:	4604      	mov	r4, r0
 8005856:	4608      	mov	r0, r1
 8005858:	4611      	mov	r1, r2
 800585a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800585e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005868:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800586c:	4622      	mov	r2, r4
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005874:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005878:	4602      	mov	r2, r0
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005880:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005884:	460a      	mov	r2, r1
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	f107 0310 	add.w	r3, r7, #16
 800588c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005890:	f107 0308 	add.w	r3, r7, #8
 8005894:	2207      	movs	r2, #7
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f000 ff8c 	bl	80067b6 <Osal_MemSet>
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058ac:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80058b0:	7812      	ldrb	r2, [r2, #0]
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80058ca:	7812      	ldrb	r2, [r2, #0]
 80058cc:	705a      	strb	r2, [r3, #1]
 80058ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058d2:	3301      	adds	r3, #1
 80058d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80058dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80058e0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	709a      	strb	r2, [r3, #2]
 80058e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058ec:	3301      	adds	r3, #1
 80058ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058f6:	2218      	movs	r2, #24
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 ff5b 	bl	80067b6 <Osal_MemSet>
 8005900:	233f      	movs	r3, #63	@ 0x3f
 8005902:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005906:	238a      	movs	r3, #138	@ 0x8a
 8005908:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 800590c:	f107 0310 	add.w	r3, r7, #16
 8005910:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005914:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005918:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800591c:	f107 0308 	add.w	r3, r7, #8
 8005920:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005924:	2307      	movs	r3, #7
 8005926:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800592a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f001 f9e5 	bl	8006d00 <hci_send_req>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	da01      	bge.n	8005940 <aci_gap_init+0xf2>
 800593c:	23ff      	movs	r3, #255	@ 0xff
 800593e:	e02e      	b.n	800599e <aci_gap_init+0x150>
 8005940:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005944:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <aci_gap_init+0x10c>
 800594e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005952:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	e021      	b.n	800599e <aci_gap_init+0x150>
 800595a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800595e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005962:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005966:	b29a      	uxth	r2, r3
 8005968:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	801a      	strh	r2, [r3, #0]
 8005974:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005978:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800597c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005980:	b29a      	uxth	r2, r3
 8005982:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800598c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005990:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005994:	b29a      	uxth	r2, r3
 8005996:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	2300      	movs	r3, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd90      	pop	{r4, r7, pc}

080059a8 <aci_gap_update_adv_data>:
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b0cc      	sub	sp, #304	@ 0x130
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4602      	mov	r2, r0
 80059b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80059b8:	6019      	str	r1, [r3, #0]
 80059ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	f107 0310 	add.w	r3, r7, #16
 80059c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80059cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80059d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80059de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80059e6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059f2:	3301      	adds	r3, #1
 80059f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80059f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80059fc:	1c58      	adds	r0, r3, #1
 80059fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a02:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a0c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005a10:	6819      	ldr	r1, [r3, #0]
 8005a12:	f000 fec0 	bl	8006796 <Osal_MemCpy>
 8005a16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a1a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a24:	4413      	add	r3, r2
 8005a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a2e:	2218      	movs	r2, #24
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 febf 	bl	80067b6 <Osal_MemSet>
 8005a38:	233f      	movs	r3, #63	@ 0x3f
 8005a3a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005a3e:	238e      	movs	r3, #142	@ 0x8e
 8005a40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8005a44:	f107 0310 	add.w	r3, r7, #16
 8005a48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a54:	f107 030f 	add.w	r3, r7, #15
 8005a58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005a62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 f949 	bl	8006d00 <hci_send_req>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da01      	bge.n	8005a78 <aci_gap_update_adv_data+0xd0>
 8005a74:	23ff      	movs	r3, #255	@ 0xff
 8005a76:	e004      	b.n	8005a82 <aci_gap_update_adv_data+0xda>
 8005a78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <aci_gap_configure_filter_accept_list>:
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	2300      	movs	r3, #0
 8005a94:	71fb      	strb	r3, [r7, #7]
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	2218      	movs	r2, #24
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe89 	bl	80067b6 <Osal_MemSet>
 8005aa4:	233f      	movs	r3, #63	@ 0x3f
 8005aa6:	813b      	strh	r3, [r7, #8]
 8005aa8:	2392      	movs	r3, #146	@ 0x92
 8005aaa:	817b      	strh	r3, [r7, #10]
 8005aac:	1dfb      	adds	r3, r7, #7
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f920 	bl	8006d00 <hci_send_req>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da01      	bge.n	8005aca <aci_gap_configure_filter_accept_list+0x3e>
 8005ac6:	23ff      	movs	r3, #255	@ 0xff
 8005ac8:	e000      	b.n	8005acc <aci_gap_configure_filter_accept_list+0x40>
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <aci_gap_numeric_comparison_value_confirm_yesno>:
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b0cc      	sub	sp, #304	@ 0x130
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4602      	mov	r2, r0
 8005adc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ae0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005aea:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005aee:	460a      	mov	r2, r1
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	f107 0310 	add.w	r3, r7, #16
 8005af6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005afa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005afe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	2300      	movs	r3, #0
 8005b08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b14:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005b18:	8812      	ldrh	r2, [r2, #0]
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b20:	3302      	adds	r3, #2
 8005b22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b2e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	709a      	strb	r2, [r3, #2]
 8005b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005b40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b44:	2218      	movs	r2, #24
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fe34 	bl	80067b6 <Osal_MemSet>
 8005b4e:	233f      	movs	r3, #63	@ 0x3f
 8005b50:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005b54:	23a5      	movs	r3, #165	@ 0xa5
 8005b56:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8005b5a:	f107 0310 	add.w	r3, r7, #16
 8005b5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005b6a:	f107 030f 	add.w	r3, r7, #15
 8005b6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005b72:	2301      	movs	r3, #1
 8005b74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f8be 	bl	8006d00 <hci_send_req>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da01      	bge.n	8005b8e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
 8005b8a:	23ff      	movs	r3, #255	@ 0xff
 8005b8c:	e004      	b.n	8005b98 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
 8005b8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <aci_gatt_init>:
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b088      	sub	sp, #32
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	71fb      	strb	r3, [r7, #7]
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	2218      	movs	r2, #24
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fdfe 	bl	80067b6 <Osal_MemSet>
 8005bba:	233f      	movs	r3, #63	@ 0x3f
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	f240 1301 	movw	r3, #257	@ 0x101
 8005bc2:	817b      	strh	r3, [r7, #10]
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	f107 0308 	add.w	r3, r7, #8
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 f894 	bl	8006d00 <hci_send_req>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da01      	bge.n	8005be2 <aci_gatt_init+0x40>
 8005bde:	23ff      	movs	r3, #255	@ 0xff
 8005be0:	e000      	b.n	8005be4 <aci_gatt_init+0x42>
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <aci_gatt_add_service>:
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b0cf      	sub	sp, #316	@ 0x13c
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005bf8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005bfc:	6001      	str	r1, [r0, #0]
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c06:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c12:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005c16:	4602      	mov	r2, r0
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c1e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005c22:	460a      	mov	r2, r1
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	f107 0310 	add.w	r3, r7, #16
 8005c2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005c2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c32:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d00a      	beq.n	8005c52 <aci_gatt_add_service+0x66>
 8005c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c40:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d101      	bne.n	8005c4e <aci_gatt_add_service+0x62>
 8005c4a:	2311      	movs	r3, #17
 8005c4c:	e002      	b.n	8005c54 <aci_gatt_add_service+0x68>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <aci_gatt_add_service+0x68>
 8005c52:	2303      	movs	r3, #3
 8005c54:	f107 0210 	add.w	r2, r7, #16
 8005c58:	4413      	add	r3, r2
 8005c5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	2203      	movs	r2, #3
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 fda5 	bl	80067b6 <Osal_MemSet>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005c76:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005c7a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c86:	3301      	adds	r3, #1
 8005c88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005c90:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d002      	beq.n	8005ca0 <aci_gatt_add_service+0xb4>
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d004      	beq.n	8005ca8 <aci_gatt_add_service+0xbc>
 8005c9e:	e007      	b.n	8005cb0 <aci_gatt_add_service+0xc4>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005ca6:	e005      	b.n	8005cb4 <aci_gatt_add_service+0xc8>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005cae:	e001      	b.n	8005cb4 <aci_gatt_add_service+0xc8>
 8005cb0:	2397      	movs	r3, #151	@ 0x97
 8005cb2:	e06c      	b.n	8005d8e <aci_gatt_add_service+0x1a2>
 8005cb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005cb8:	1c58      	adds	r0, r3, #1
 8005cba:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005cc2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005cc6:	6819      	ldr	r1, [r3, #0]
 8005cc8:	f000 fd65 	bl	8006796 <Osal_MemCpy>
 8005ccc:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005cd0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cde:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005ce2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005ce6:	7812      	ldrb	r2, [r2, #0]
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cf8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005cfc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	705a      	strb	r2, [r3, #1]
 8005d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005d0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d12:	2218      	movs	r2, #24
 8005d14:	2100      	movs	r1, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fd4d 	bl	80067b6 <Osal_MemSet>
 8005d1c:	233f      	movs	r3, #63	@ 0x3f
 8005d1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8005d22:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005d26:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8005d2a:	f107 0310 	add.w	r3, r7, #16
 8005d2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005d3a:	f107 030c 	add.w	r3, r7, #12
 8005d3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005d42:	2303      	movs	r3, #3
 8005d44:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005d48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ffd6 	bl	8006d00 <hci_send_req>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da01      	bge.n	8005d5e <aci_gatt_add_service+0x172>
 8005d5a:	23ff      	movs	r3, #255	@ 0xff
 8005d5c:	e017      	b.n	8005d8e <aci_gatt_add_service+0x1a2>
 8005d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <aci_gatt_add_service+0x18c>
 8005d6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	e00a      	b.n	8005d8e <aci_gatt_add_service+0x1a2>
 8005d78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005d7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005d80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd90      	pop	{r4, r7, pc}

08005d98 <aci_gatt_add_char>:
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b0d1      	sub	sp, #324	@ 0x144
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005da6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005daa:	600a      	str	r2, [r1, #0]
 8005dac:	4619      	mov	r1, r3
 8005dae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005db2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005db6:	4622      	mov	r2, r4
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dbe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dca:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005dce:	460a      	mov	r2, r1
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	f107 0318 	add.w	r3, r7, #24
 8005dd6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005dda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dde:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d00a      	beq.n	8005dfe <aci_gatt_add_char+0x66>
 8005de8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dec:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d101      	bne.n	8005dfa <aci_gatt_add_char+0x62>
 8005df6:	2313      	movs	r3, #19
 8005df8:	e002      	b.n	8005e00 <aci_gatt_add_char+0x68>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e000      	b.n	8005e00 <aci_gatt_add_char+0x68>
 8005dfe:	2305      	movs	r3, #5
 8005e00:	f107 0218 	add.w	r2, r7, #24
 8005e04:	4413      	add	r3, r2
 8005e06:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	2203      	movs	r2, #3
 8005e10:	2100      	movs	r1, #0
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fccf 	bl	80067b6 <Osal_MemSet>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005e1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e22:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005e26:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005e2a:	8812      	ldrh	r2, [r2, #0]
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e32:	3302      	adds	r3, #2
 8005e34:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005e38:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e3c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005e40:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	709a      	strb	r2, [r3, #2]
 8005e48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005e52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e56:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d002      	beq.n	8005e66 <aci_gatt_add_char+0xce>
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d004      	beq.n	8005e6e <aci_gatt_add_char+0xd6>
 8005e64:	e007      	b.n	8005e76 <aci_gatt_add_char+0xde>
 8005e66:	2302      	movs	r3, #2
 8005e68:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005e6c:	e005      	b.n	8005e7a <aci_gatt_add_char+0xe2>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005e74:	e001      	b.n	8005e7a <aci_gatt_add_char+0xe2>
 8005e76:	2397      	movs	r3, #151	@ 0x97
 8005e78:	e091      	b.n	8005f9e <aci_gatt_add_char+0x206>
 8005e7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e7e:	1cd8      	adds	r0, r3, #3
 8005e80:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005e84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e88:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	f000 fc82 	bl	8006796 <Osal_MemCpy>
 8005e92:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005e96:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005ea0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ea4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005ea8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005eac:	8812      	ldrh	r2, [r2, #0]
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ebe:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005ec2:	709a      	strb	r2, [r3, #2]
 8005ec4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ec8:	3301      	adds	r3, #1
 8005eca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ed2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005ed6:	70da      	strb	r2, [r3, #3]
 8005ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005edc:	3301      	adds	r3, #1
 8005ede:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ee6:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005eea:	711a      	strb	r2, [r3, #4]
 8005eec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005ef6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005efa:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8005efe:	715a      	strb	r2, [r3, #5]
 8005f00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f04:	3301      	adds	r3, #1
 8005f06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005f0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f0e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8005f12:	719a      	strb	r2, [r3, #6]
 8005f14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005f1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f22:	2218      	movs	r2, #24
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fc45 	bl	80067b6 <Osal_MemSet>
 8005f2c:	233f      	movs	r3, #63	@ 0x3f
 8005f2e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8005f32:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005f36:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005f4a:	f107 0314 	add.w	r3, r7, #20
 8005f4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005f52:	2303      	movs	r3, #3
 8005f54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005f58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fece 	bl	8006d00 <hci_send_req>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da01      	bge.n	8005f6e <aci_gatt_add_char+0x1d6>
 8005f6a:	23ff      	movs	r3, #255	@ 0xff
 8005f6c:	e017      	b.n	8005f9e <aci_gatt_add_char+0x206>
 8005f6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <aci_gatt_add_char+0x1f0>
 8005f7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	e00a      	b.n	8005f9e <aci_gatt_add_char+0x206>
 8005f88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005f90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <aci_gatt_update_char_value>:
 8005fa8:	b5b0      	push	{r4, r5, r7, lr}
 8005faa:	b0cc      	sub	sp, #304	@ 0x130
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4605      	mov	r5, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005fca:	4622      	mov	r2, r4
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fd2:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fde:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	f107 0310 	add.w	r3, r7, #16
 8005fea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005fee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ff2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006000:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006004:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006008:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800600c:	8812      	ldrh	r2, [r2, #0]
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006014:	3302      	adds	r3, #2
 8006016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800601a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800601e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006022:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006026:	8812      	ldrh	r2, [r2, #0]
 8006028:	805a      	strh	r2, [r3, #2]
 800602a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800602e:	3302      	adds	r3, #2
 8006030:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006038:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800603c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	711a      	strb	r2, [r3, #4]
 8006044:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006048:	3301      	adds	r3, #1
 800604a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006052:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006056:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800605a:	7812      	ldrb	r2, [r2, #0]
 800605c:	715a      	strb	r2, [r3, #5]
 800605e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006062:	3301      	adds	r3, #1
 8006064:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006068:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800606c:	1d98      	adds	r0, r3, #6
 800606e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006072:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800607e:	f000 fb8a 	bl	8006796 <Osal_MemCpy>
 8006082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006086:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006090:	4413      	add	r3, r2
 8006092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006096:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800609a:	2218      	movs	r2, #24
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fb89 	bl	80067b6 <Osal_MemSet>
 80060a4:	233f      	movs	r3, #63	@ 0x3f
 80060a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 80060aa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80060ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 80060b2:	f107 0310 	add.w	r3, r7, #16
 80060b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80060ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80060c2:	f107 030f 	add.w	r3, r7, #15
 80060c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80060ca:	2301      	movs	r3, #1
 80060cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80060d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060d4:	2100      	movs	r1, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fe12 	bl	8006d00 <hci_send_req>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da01      	bge.n	80060e6 <aci_gatt_update_char_value+0x13e>
 80060e2:	23ff      	movs	r3, #255	@ 0xff
 80060e4:	e004      	b.n	80060f0 <aci_gatt_update_char_value+0x148>
 80060e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bdb0      	pop	{r4, r5, r7, pc}

080060fa <aci_gatt_confirm_indication>:
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b0cc      	sub	sp, #304	@ 0x130
 80060fe:	af00      	add	r7, sp, #0
 8006100:	4602      	mov	r2, r0
 8006102:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006106:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	f107 0310 	add.w	r3, r7, #16
 8006110:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006114:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006118:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800612a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800612e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800613a:	3302      	adds	r3, #2
 800613c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006140:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006144:	2218      	movs	r2, #24
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fb34 	bl	80067b6 <Osal_MemSet>
 800614e:	233f      	movs	r3, #63	@ 0x3f
 8006150:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8006154:	f240 1325 	movw	r3, #293	@ 0x125
 8006158:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 800615c:	f107 0310 	add.w	r3, r7, #16
 8006160:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006164:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006168:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800616c:	f107 030f 	add.w	r3, r7, #15
 8006170:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006174:	2301      	movs	r3, #1
 8006176:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800617a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fdbd 	bl	8006d00 <hci_send_req>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	da01      	bge.n	8006190 <aci_gatt_confirm_indication+0x96>
 800618c:	23ff      	movs	r3, #255	@ 0xff
 800618e:	e004      	b.n	800619a <aci_gatt_confirm_indication+0xa0>
 8006190:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006194:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <aci_gatt_allow_read>:
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b0cc      	sub	sp, #304	@ 0x130
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4602      	mov	r2, r0
 80061ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	f107 0310 	add.w	r3, r7, #16
 80061ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80061be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061c6:	2200      	movs	r2, #0
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80061d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80061d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80061d8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80061dc:	8812      	ldrh	r2, [r2, #0]
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061e4:	3302      	adds	r3, #2
 80061e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80061ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061ee:	2218      	movs	r2, #24
 80061f0:	2100      	movs	r1, #0
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fadf 	bl	80067b6 <Osal_MemSet>
 80061f8:	233f      	movs	r3, #63	@ 0x3f
 80061fa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 80061fe:	f240 1327 	movw	r3, #295	@ 0x127
 8006202:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8006206:	f107 0310 	add.w	r3, r7, #16
 800620a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800620e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006212:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006216:	f107 030f 	add.w	r3, r7, #15
 800621a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800621e:	2301      	movs	r3, #1
 8006220:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd68 	bl	8006d00 <hci_send_req>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	da01      	bge.n	800623a <aci_gatt_allow_read+0x96>
 8006236:	23ff      	movs	r3, #255	@ 0xff
 8006238:	e004      	b.n	8006244 <aci_gatt_allow_read+0xa0>
 800623a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800623e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <aci_gatt_update_char_value_ext>:
 800624e:	b5b0      	push	{r4, r5, r7, lr}
 8006250:	b0cc      	sub	sp, #304	@ 0x130
 8006252:	af00      	add	r7, sp, #0
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4610      	mov	r0, r2
 800625a:	4619      	mov	r1, r3
 800625c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006260:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006264:	462a      	mov	r2, r5
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800626c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006270:	4622      	mov	r2, r4
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006278:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800627c:	4602      	mov	r2, r0
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006284:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8006288:	460a      	mov	r2, r1
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	f107 0310 	add.w	r3, r7, #16
 8006290:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006294:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006298:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80062a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80062ae:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80062b2:	8812      	ldrh	r2, [r2, #0]
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062ba:	3302      	adds	r3, #2
 80062bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80062c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80062c8:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	805a      	strh	r2, [r3, #2]
 80062d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062d4:	3302      	adds	r3, #2
 80062d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80062e2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80062e6:	8812      	ldrh	r2, [r2, #0]
 80062e8:	809a      	strh	r2, [r3, #4]
 80062ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062ee:	3302      	adds	r3, #2
 80062f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80062f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80062fc:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	719a      	strb	r2, [r3, #6]
 8006304:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006308:	3301      	adds	r3, #1
 800630a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800630e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006312:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8006316:	f8a3 2007 	strh.w	r2, [r3, #7]
 800631a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800631e:	3302      	adds	r3, #2
 8006320:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006324:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006328:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 800632c:	f8a3 2009 	strh.w	r2, [r3, #9]
 8006330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006334:	3302      	adds	r3, #2
 8006336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800633a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800633e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006342:	72da      	strb	r2, [r3, #11]
 8006344:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006348:	3301      	adds	r3, #1
 800634a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800634e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006352:	330c      	adds	r3, #12
 8006354:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006358:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fa1a 	bl	8006796 <Osal_MemCpy>
 8006362:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8006366:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800636a:	4413      	add	r3, r2
 800636c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006370:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006374:	2218      	movs	r2, #24
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fa1c 	bl	80067b6 <Osal_MemSet>
 800637e:	233f      	movs	r3, #63	@ 0x3f
 8006380:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8006384:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006388:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 800638c:	f107 0310 	add.w	r3, r7, #16
 8006390:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006398:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800639c:	f107 030f 	add.w	r3, r7, #15
 80063a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80063a4:	2301      	movs	r3, #1
 80063a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80063aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fca5 	bl	8006d00 <hci_send_req>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	da01      	bge.n	80063c0 <aci_gatt_update_char_value_ext+0x172>
 80063bc:	23ff      	movs	r3, #255	@ 0xff
 80063be:	e004      	b.n	80063ca <aci_gatt_update_char_value_ext+0x17c>
 80063c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bdb0      	pop	{r4, r5, r7, pc}

080063d4 <aci_hal_write_config_data>:
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b0cc      	sub	sp, #304	@ 0x130
 80063d8:	af00      	add	r7, sp, #0
 80063da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063e8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80063ec:	4602      	mov	r2, r0
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80063f8:	460a      	mov	r2, r1
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	f107 0310 	add.w	r3, r7, #16
 8006400:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006404:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006408:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800641a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800641e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800642a:	3301      	adds	r3, #1
 800642c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006434:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006438:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800643c:	7812      	ldrb	r2, [r2, #0]
 800643e:	705a      	strb	r2, [r3, #1]
 8006440:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006444:	3301      	adds	r3, #1
 8006446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800644a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800644e:	1c98      	adds	r0, r3, #2
 8006450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006454:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800645e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	f000 f997 	bl	8006796 <Osal_MemCpy>
 8006468:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800646c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006476:	4413      	add	r3, r2
 8006478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800647c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006480:	2218      	movs	r2, #24
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f996 	bl	80067b6 <Osal_MemSet>
 800648a:	233f      	movs	r3, #63	@ 0x3f
 800648c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8006490:	230c      	movs	r3, #12
 8006492:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8006496:	f107 0310 	add.w	r3, r7, #16
 800649a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800649e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80064a6:	f107 030f 	add.w	r3, r7, #15
 80064aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80064ae:	2301      	movs	r3, #1
 80064b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80064b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fc20 	bl	8006d00 <hci_send_req>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da01      	bge.n	80064ca <aci_hal_write_config_data+0xf6>
 80064c6:	23ff      	movs	r3, #255	@ 0xff
 80064c8:	e004      	b.n	80064d4 <aci_hal_write_config_data+0x100>
 80064ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <aci_hal_set_tx_power_level>:
 80064de:	b580      	push	{r7, lr}
 80064e0:	b0cc      	sub	sp, #304	@ 0x130
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	4602      	mov	r2, r0
 80064e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064ea:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064f4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80064f8:	460a      	mov	r2, r1
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	f107 0310 	add.w	r3, r7, #16
 8006500:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006504:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006508:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800651a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800651e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006522:	7812      	ldrb	r2, [r2, #0]
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800652a:	3301      	adds	r3, #1
 800652c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006530:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006534:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006538:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	705a      	strb	r2, [r3, #1]
 8006540:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006544:	3301      	adds	r3, #1
 8006546:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800654a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800654e:	2218      	movs	r2, #24
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f000 f92f 	bl	80067b6 <Osal_MemSet>
 8006558:	233f      	movs	r3, #63	@ 0x3f
 800655a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 800655e:	230f      	movs	r3, #15
 8006560:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 8006564:	f107 0310 	add.w	r3, r7, #16
 8006568:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800656c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006570:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006574:	f107 030f 	add.w	r3, r7, #15
 8006578:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800657c:	2301      	movs	r3, #1
 800657e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fbb9 	bl	8006d00 <hci_send_req>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	da01      	bge.n	8006598 <aci_hal_set_tx_power_level+0xba>
 8006594:	23ff      	movs	r3, #255	@ 0xff
 8006596:	e004      	b.n	80065a2 <aci_hal_set_tx_power_level+0xc4>
 8006598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800659c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <aci_hal_set_radio_activity_mask>:
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b0cc      	sub	sp, #304	@ 0x130
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4602      	mov	r2, r0
 80065b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	f107 0310 	add.w	r3, r7, #16
 80065c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80065c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80065d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065e0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80065e4:	8812      	ldrh	r2, [r2, #0]
 80065e6:	801a      	strh	r2, [r3, #0]
 80065e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065ec:	3302      	adds	r3, #2
 80065ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80065f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065f6:	2218      	movs	r2, #24
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f8db 	bl	80067b6 <Osal_MemSet>
 8006600:	233f      	movs	r3, #63	@ 0x3f
 8006602:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8006606:	2318      	movs	r3, #24
 8006608:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006614:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006618:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800661c:	f107 030f 	add.w	r3, r7, #15
 8006620:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006624:	2301      	movs	r3, #1
 8006626:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800662a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fb65 	bl	8006d00 <hci_send_req>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	da01      	bge.n	8006640 <aci_hal_set_radio_activity_mask+0x94>
 800663c:	23ff      	movs	r3, #255	@ 0xff
 800663e:	e004      	b.n	800664a <aci_hal_set_radio_activity_mask+0x9e>
 8006640:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006644:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <hci_reset>:
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	2300      	movs	r3, #0
 800665c:	71fb      	strb	r3, [r7, #7]
 800665e:	f107 0308 	add.w	r3, r7, #8
 8006662:	2218      	movs	r2, #24
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f8a5 	bl	80067b6 <Osal_MemSet>
 800666c:	2303      	movs	r3, #3
 800666e:	813b      	strh	r3, [r7, #8]
 8006670:	2303      	movs	r3, #3
 8006672:	817b      	strh	r3, [r7, #10]
 8006674:	1dfb      	adds	r3, r7, #7
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	2301      	movs	r3, #1
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	f107 0308 	add.w	r3, r7, #8
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fb3c 	bl	8006d00 <hci_send_req>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	da01      	bge.n	8006692 <hci_reset+0x3e>
 800668e:	23ff      	movs	r3, #255	@ 0xff
 8006690:	e000      	b.n	8006694 <hci_reset+0x40>
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <hci_le_set_default_phy>:
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b0cd      	sub	sp, #308	@ 0x134
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066ac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80066b0:	4622      	mov	r2, r4
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80066bc:	4602      	mov	r2, r0
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066c4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80066c8:	460a      	mov	r2, r1
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80066d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80066e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066ee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066fa:	3301      	adds	r3, #1
 80066fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006700:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006704:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006708:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	705a      	strb	r2, [r3, #1]
 8006710:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006714:	3301      	adds	r3, #1
 8006716:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800671a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800671e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006722:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	709a      	strb	r2, [r3, #2]
 800672a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800672e:	3301      	adds	r3, #1
 8006730:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006734:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006738:	2218      	movs	r2, #24
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f83a 	bl	80067b6 <Osal_MemSet>
 8006742:	2308      	movs	r3, #8
 8006744:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
 8006748:	2331      	movs	r3, #49	@ 0x31
 800674a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
 800674e:	f107 0310 	add.w	r3, r7, #16
 8006752:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006756:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800675a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800675e:	f107 030f 	add.w	r3, r7, #15
 8006762:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006766:	2301      	movs	r3, #1
 8006768:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800676c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006770:	2100      	movs	r1, #0
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fac4 	bl	8006d00 <hci_send_req>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	da01      	bge.n	8006782 <hci_le_set_default_phy+0xe6>
 800677e:	23ff      	movs	r3, #255	@ 0xff
 8006780:	e004      	b.n	800678c <hci_le_set_default_phy+0xf0>
 8006782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006786:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}

08006796 <Osal_MemCpy>:
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f002 fe2c 	bl	8009404 <memcpy>
 80067ac:	4603      	mov	r3, r0
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <Osal_MemSet>:
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f002 fdf0 	bl	80093ac <memset>
 80067cc:	4603      	mov	r3, r0
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80067d6:	b480      	push	{r7}
 80067d8:	af00      	add	r7, sp, #0
  return;
 80067da:	bf00      	nop
}
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  return;
 80067e8:	bf00      	nop
}
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80067f2:	b480      	push	{r7}
 80067f4:	af00      	add	r7, sp, #0
  return;
 80067f6:	bf00      	nop
}
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
  return;
 8006804:	bf00      	nop
}
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800680e:	b480      	push	{r7}
 8006810:	af00      	add	r7, sp, #0
  return;
 8006812:	bf00      	nop
}
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  return;
 8006820:	bf00      	nop
}
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800682a:	b480      	push	{r7}
 800682c:	af00      	add	r7, sp, #0
  return;
 800682e:	bf00      	nop
}
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return;
 800683c:	bf00      	nop
}
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0
  return;
 800684a:	bf00      	nop
}
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  return;
 8006858:	bf00      	nop
}
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006862:	b480      	push	{r7}
 8006864:	af00      	add	r7, sp, #0
  return;
 8006866:	bf00      	nop
}
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return;
 8006874:	bf00      	nop
}
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800687e:	b480      	push	{r7}
 8006880:	af00      	add	r7, sp, #0
  return;
 8006882:	bf00      	nop
}
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
  return;
 8006890:	bf00      	nop
}
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0
  return;
 800689e:	bf00      	nop
}
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  return;
 80068ac:	bf00      	nop
}
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80068b6:	b480      	push	{r7}
 80068b8:	af00      	add	r7, sp, #0
  return;
 80068ba:	bf00      	nop
}
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80068c8:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <SVCCTL_Init+0x18>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80068ce:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <SVCCTL_Init+0x1c>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	751a      	strb	r2, [r3, #20]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80068d4:	f000 f806 	bl	80068e4 <SVCCTL_SvcInit>

  return;
 80068d8:	bf00      	nop
}
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000074 	.word	0x20000074
 80068e0:	20000094 	.word	0x20000094

080068e4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  BAS_Init();
 80068e8:	f7ff ff75 	bl	80067d6 <BAS_Init>

  BLS_Init();
 80068ec:	f7ff ff7a 	bl	80067e4 <BLS_Init>

  CRS_STM_Init();
 80068f0:	f7ff ff7f 	bl	80067f2 <CRS_STM_Init>

  DIS_Init();
 80068f4:	f7ff ff84 	bl	8006800 <DIS_Init>

  EDS_STM_Init();
 80068f8:	f7ff ff89 	bl	800680e <EDS_STM_Init>

  HIDS_Init();
 80068fc:	f7ff ff8e 	bl	800681c <HIDS_Init>

  HRS_Init();
 8006900:	f7ff ff93 	bl	800682a <HRS_Init>

  HTS_Init();
 8006904:	f7ff ff98 	bl	8006838 <HTS_Init>

  IAS_Init();
 8006908:	f7ff ff9d 	bl	8006846 <IAS_Init>

  LLS_Init();
 800690c:	f7ff ffa2 	bl	8006854 <LLS_Init>

  TPS_Init();
 8006910:	f7ff ffa7 	bl	8006862 <TPS_Init>

  MOTENV_STM_Init();
 8006914:	f7ff ffac 	bl	8006870 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006918:	f7ff ffb1 	bl	800687e <P2PS_STM_Init>

  ZDD_STM_Init();
 800691c:	f7ff ffb6 	bl	800688c <ZDD_STM_Init>

  OTAS_STM_Init();
 8006920:	f7ff ffbb 	bl	800689a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006924:	f7ff ffc7 	bl	80068b6 <BVOPUS_STM_Init>

  MESH_Init();
 8006928:	f7ff ffbe 	bl	80068a8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800692c:	f001 feea 	bl	8008704 <SVCCTL_InitCustomSvc>
  
  return;
 8006930:	bf00      	nop
}
 8006932:	bd80      	pop	{r7, pc}

08006934 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800693c:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <SVCCTL_RegisterSvcHandler+0x30>)
 800693e:	7f1b      	ldrb	r3, [r3, #28]
 8006940:	4619      	mov	r1, r3
 8006942:	4a08      	ldr	r2, [pc, #32]	@ (8006964 <SVCCTL_RegisterSvcHandler+0x30>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <SVCCTL_RegisterSvcHandler+0x30>)
 800694c:	7f1b      	ldrb	r3, [r3, #28]
 800694e:	3301      	adds	r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4b04      	ldr	r3, [pc, #16]	@ (8006964 <SVCCTL_RegisterSvcHandler+0x30>)
 8006954:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006956:	bf00      	nop
}
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000074 	.word	0x20000074

08006968 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3301      	adds	r3, #1
 8006974:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2bff      	cmp	r3, #255	@ 0xff
 8006980:	d13f      	bne.n	8006a02 <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3302      	adds	r3, #2
 8006986:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006992:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006996:	d132      	bne.n	80069fe <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006998:	2300      	movs	r3, #0
 800699a:	757b      	strb	r3, [r7, #21]
 800699c:	e00d      	b.n	80069ba <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800699e:	7d7b      	ldrb	r3, [r7, #21]
 80069a0:	4a27      	ldr	r2, [pc, #156]	@ (8006a40 <SVCCTL_UserEvtRx+0xd8>)
 80069a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d108      	bne.n	80069c6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80069b4:	7d7b      	ldrb	r3, [r7, #21]
 80069b6:	3301      	adds	r3, #1
 80069b8:	757b      	strb	r3, [r7, #21]
 80069ba:	4b21      	ldr	r3, [pc, #132]	@ (8006a40 <SVCCTL_UserEvtRx+0xd8>)
 80069bc:	7f1b      	ldrb	r3, [r3, #28]
 80069be:	7d7a      	ldrb	r2, [r7, #21]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d3ec      	bcc.n	800699e <SVCCTL_UserEvtRx+0x36>
 80069c4:	e000      	b.n	80069c8 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 80069c6:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 80069c8:	2300      	movs	r3, #0
 80069ca:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	757b      	strb	r3, [r7, #21]
 80069d0:	e00d      	b.n	80069ee <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 80069d2:	7d7b      	ldrb	r3, [r7, #21]
 80069d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a44 <SVCCTL_UserEvtRx+0xdc>)
 80069d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d108      	bne.n	80069fa <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80069e8:	7d7b      	ldrb	r3, [r7, #21]
 80069ea:	3301      	adds	r3, #1
 80069ec:	757b      	strb	r3, [r7, #21]
 80069ee:	4b15      	ldr	r3, [pc, #84]	@ (8006a44 <SVCCTL_UserEvtRx+0xdc>)
 80069f0:	7d1b      	ldrb	r3, [r3, #20]
 80069f2:	7d7a      	ldrb	r2, [r7, #21]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d3ec      	bcc.n	80069d2 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 80069f8:	e002      	b.n	8006a00 <SVCCTL_UserEvtRx+0x98>
              break;
 80069fa:	bf00      	nop
          break;
 80069fc:	e000      	b.n	8006a00 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 80069fe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006a00:	e000      	b.n	8006a04 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8006a02:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d00f      	beq.n	8006a2a <SVCCTL_UserEvtRx+0xc2>
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	dc10      	bgt.n	8006a30 <SVCCTL_UserEvtRx+0xc8>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <SVCCTL_UserEvtRx+0xb0>
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d006      	beq.n	8006a24 <SVCCTL_UserEvtRx+0xbc>
 8006a16:	e00b      	b.n	8006a30 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 ff87 	bl	800792c <SVCCTL_App_Notification>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75bb      	strb	r3, [r7, #22]
      break;
 8006a22:	e008      	b.n	8006a36 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006a24:	2301      	movs	r3, #1
 8006a26:	75bb      	strb	r3, [r7, #22]
      break;
 8006a28:	e005      	b.n	8006a36 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75bb      	strb	r3, [r7, #22]
      break;
 8006a2e:	e002      	b.n	8006a36 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75bb      	strb	r3, [r7, #22]
      break;
 8006a34:	bf00      	nop
  }

  return (return_status);
 8006a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000074 	.word	0x20000074
 8006a44:	20000094 	.word	0x20000094

08006a48 <SHCI_C2_BLE_Init>:
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f103 020c 	add.w	r2, r3, #12
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	212e      	movs	r1, #46	@ 0x2e
 8006a60:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006a64:	f000 fae8 	bl	8007038 <shci_send>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	330b      	adds	r3, #11
 8006a6c:	78db      	ldrb	r3, [r3, #3]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <SHCI_C2_DEBUG_Init>:
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b088      	sub	sp, #32
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 030c 	add.w	r3, r7, #12
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f103 020c 	add.w	r2, r3, #12
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	210f      	movs	r1, #15
 8006a8e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006a92:	f000 fad1 	bl	8007038 <shci_send>
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	330b      	adds	r3, #11
 8006a9a:	78db      	ldrb	r3, [r3, #3]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <SHCI_C2_Config>:
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	f107 030c 	add.w	r3, r7, #12
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	2110      	movs	r1, #16
 8006ab8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006abc:	f000 fabc 	bl	8007038 <shci_send>
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	330b      	adds	r3, #11
 8006ac4:	78db      	ldrb	r3, [r3, #3]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <SHCI_GetWirelessFwInfo>:
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08b      	sub	sp, #44	@ 0x2c
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	623b      	str	r3, [r7, #32]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	2300      	movs	r3, #0
 8006aee:	60bb      	str	r3, [r7, #8]
 8006af0:	2300      	movs	r3, #0
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	4b4a      	ldr	r3, [pc, #296]	@ (8006c24 <SHCI_GetWirelessFwInfo+0x154>)
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006b0a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60bb      	str	r3, [r7, #8]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a44      	ldr	r2, [pc, #272]	@ (8006c28 <SHCI_GetWirelessFwInfo+0x158>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10f      	bne.n	8006b3c <SHCI_GetWirelessFwInfo+0x6c>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	623b      	str	r3, [r7, #32]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e01a      	b.n	8006b72 <SHCI_GetWirelessFwInfo+0xa2>
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006b44:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	617b      	str	r3, [r7, #20]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	0e1b      	lsrs	r3, r3, #24
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	705a      	strb	r2, [r3, #1]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	709a      	strb	r2, [r3, #2]
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	70da      	strb	r2, [r3, #3]
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	711a      	strb	r2, [r3, #4]
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	0e1b      	lsrs	r3, r3, #24
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	715a      	strb	r2, [r3, #5]
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	719a      	strb	r2, [r3, #6]
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	0a1b      	lsrs	r3, r3, #8
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	71da      	strb	r2, [r3, #7]
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	721a      	strb	r2, [r3, #8]
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	725a      	strb	r2, [r3, #9]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	0e1b      	lsrs	r3, r3, #24
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	729a      	strb	r2, [r3, #10]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	72da      	strb	r2, [r3, #11]
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	0a1b      	lsrs	r3, r3, #8
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	731a      	strb	r2, [r3, #12]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	0e1b      	lsrs	r3, r3, #24
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	735a      	strb	r2, [r3, #13]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	739a      	strb	r2, [r3, #14]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	73da      	strb	r2, [r3, #15]
 8006c16:	2300      	movs	r3, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	372c      	adds	r7, #44	@ 0x2c
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	58004000 	.word	0x58004000
 8006c28:	a94656b9 	.word	0xa94656b9

08006c2c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4a08      	ldr	r2, [pc, #32]	@ (8006c5c <hci_init+0x30>)
 8006c3c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006c3e:	4a08      	ldr	r2, [pc, #32]	@ (8006c60 <hci_init+0x34>)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006c44:	4806      	ldr	r0, [pc, #24]	@ (8006c60 <hci_init+0x34>)
 8006c46:	f000 f979 	bl	8006f3c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f8da 	bl	8006e08 <TlInit>

  return;
 8006c54:	bf00      	nop
}
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	200003e4 	.word	0x200003e4
 8006c60:	200003bc 	.word	0x200003bc

08006c64 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006c6a:	4822      	ldr	r0, [pc, #136]	@ (8006cf4 <hci_user_evt_proc+0x90>)
 8006c6c:	f000 fd32 	bl	80076d4 <LST_is_empty>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d12b      	bne.n	8006cce <hci_user_evt_proc+0x6a>
 8006c76:	4b20      	ldr	r3, [pc, #128]	@ (8006cf8 <hci_user_evt_proc+0x94>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d027      	beq.n	8006cce <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006c7e:	f107 030c 	add.w	r3, r7, #12
 8006c82:	4619      	mov	r1, r3
 8006c84:	481b      	ldr	r0, [pc, #108]	@ (8006cf4 <hci_user_evt_proc+0x90>)
 8006c86:	f000 fdb4 	bl	80077f2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cfc <hci_user_evt_proc+0x98>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006c96:	2301      	movs	r3, #1
 8006c98:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006c9a:	4b18      	ldr	r3, [pc, #96]	@ (8006cfc <hci_user_evt_proc+0x98>)
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	1d3a      	adds	r2, r7, #4
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006ca4:	793a      	ldrb	r2, [r7, #4]
 8006ca6:	4b14      	ldr	r3, [pc, #80]	@ (8006cf8 <hci_user_evt_proc+0x94>)
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	e002      	b.n	8006cb2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006cac:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <hci_user_evt_proc+0x94>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006cb2:	4b11      	ldr	r3, [pc, #68]	@ (8006cf8 <hci_user_evt_proc+0x94>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fc0d 	bl	80074dc <TL_MM_EvtDone>
 8006cc2:	e004      	b.n	8006cce <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	480a      	ldr	r0, [pc, #40]	@ (8006cf4 <hci_user_evt_proc+0x90>)
 8006cca:	f000 fd25 	bl	8007718 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006cce:	4809      	ldr	r0, [pc, #36]	@ (8006cf4 <hci_user_evt_proc+0x90>)
 8006cd0:	f000 fd00 	bl	80076d4 <LST_is_empty>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <hci_user_evt_proc+0x86>
 8006cda:	4b07      	ldr	r3, [pc, #28]	@ (8006cf8 <hci_user_evt_proc+0x94>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006ce2:	4804      	ldr	r0, [pc, #16]	@ (8006cf4 <hci_user_evt_proc+0x90>)
 8006ce4:	f001 f856 	bl	8007d94 <hci_notify_asynch_evt>
  }


  return;
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
}
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200000b0 	.word	0x200000b0
 8006cf8:	200000bc 	.word	0x200000bc
 8006cfc:	200003bc 	.word	0x200003bc

08006d00 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f000 f8d1 	bl	8006eb4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006d12:	2300      	movs	r3, #0
 8006d14:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	885b      	ldrh	r3, [r3, #2]
 8006d1a:	b21b      	sxth	r3, r3
 8006d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d20:	b21a      	sxth	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	029b      	lsls	r3, r3, #10
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006d30:	4b33      	ldr	r3, [pc, #204]	@ (8006e00 <hci_send_req+0x100>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	b2d9      	uxtb	r1, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	8bbb      	ldrh	r3, [r7, #28]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f890 	bl	8006e68 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006d48:	e04e      	b.n	8006de8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006d4a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006d4e:	f001 f838 	bl	8007dc2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006d52:	e043      	b.n	8006ddc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	4619      	mov	r1, r3
 8006d5a:	482a      	ldr	r0, [pc, #168]	@ (8006e04 <hci_send_req+0x104>)
 8006d5c:	f000 fd49 	bl	80077f2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	7a5b      	ldrb	r3, [r3, #9]
 8006d64:	2b0f      	cmp	r3, #15
 8006d66:	d114      	bne.n	8006d92 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	330b      	adds	r3, #11
 8006d6c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	885b      	ldrh	r3, [r3, #2]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	8bba      	ldrh	r2, [r7, #28]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d104      	bne.n	8006d84 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d027      	beq.n	8006ddc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e024      	b.n	8006ddc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	330b      	adds	r3, #11
 8006d96:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	8bba      	ldrh	r2, [r7, #28]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d114      	bne.n	8006dd0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	7a9b      	ldrb	r3, [r3, #10]
 8006daa:	3b03      	subs	r3, #3
 8006dac:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695a      	ldr	r2, [r3, #20]
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	bfa8      	it	ge
 8006db8:	461a      	movge	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6918      	ldr	r0, [r3, #16]
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	1cd9      	adds	r1, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f002 fb1a 	bl	8009404 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006ddc:	4809      	ldr	r0, [pc, #36]	@ (8006e04 <hci_send_req+0x104>)
 8006dde:	f000 fc79 	bl	80076d4 <LST_is_empty>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0b5      	beq.n	8006d54 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006de8:	7ffb      	ldrb	r3, [r7, #31]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ad      	beq.n	8006d4a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006dee:	2001      	movs	r0, #1
 8006df0:	f000 f860 	bl	8006eb4 <NotifyCmdStatus>

  return 0;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200003e8 	.word	0x200003e8
 8006e04:	200003dc 	.word	0x200003dc

08006e08 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006e10:	480f      	ldr	r0, [pc, #60]	@ (8006e50 <TlInit+0x48>)
 8006e12:	f000 fc4f 	bl	80076b4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006e16:	4a0f      	ldr	r2, [pc, #60]	@ (8006e54 <TlInit+0x4c>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006e1c:	480e      	ldr	r0, [pc, #56]	@ (8006e58 <TlInit+0x50>)
 8006e1e:	f000 fc49 	bl	80076b4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006e22:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <TlInit+0x54>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006e28:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <TlInit+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006e34:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <TlInit+0x5c>)
 8006e36:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006e38:	4b09      	ldr	r3, [pc, #36]	@ (8006e60 <TlInit+0x58>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f107 0208 	add.w	r2, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
  }

  return;
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
}
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	200003dc 	.word	0x200003dc
 8006e54:	200000b8 	.word	0x200000b8
 8006e58:	200000b0 	.word	0x200000b0
 8006e5c:	200000bc 	.word	0x200000bc
 8006e60:	200003bc 	.word	0x200003bc
 8006e64:	08006ef5 	.word	0x08006ef5

08006e68 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	603a      	str	r2, [r7, #0]
 8006e72:	80fb      	strh	r3, [r7, #6]
 8006e74:	460b      	mov	r3, r1
 8006e76:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006e78:	4b0c      	ldr	r3, [pc, #48]	@ (8006eac <SendCmd+0x44>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	88fa      	ldrh	r2, [r7, #6]
 8006e7e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006e82:	4b0a      	ldr	r3, [pc, #40]	@ (8006eac <SendCmd+0x44>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	797a      	ldrb	r2, [r7, #5]
 8006e88:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006e8a:	4b08      	ldr	r3, [pc, #32]	@ (8006eac <SendCmd+0x44>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	797a      	ldrb	r2, [r7, #5]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f002 fab5 	bl	8009404 <memcpy>

  hciContext.io.Send(0,0);
 8006e9a:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <SendCmd+0x48>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	4798      	blx	r3

  return;
 8006ea4:	bf00      	nop
}
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200000b8 	.word	0x200000b8
 8006eb0:	200003bc 	.word	0x200003bc

08006eb4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <NotifyCmdStatus+0x3c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00d      	beq.n	8006ee8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006ecc:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <NotifyCmdStatus+0x3c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006ed4:	e008      	b.n	8006ee8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006ed6:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <NotifyCmdStatus+0x3c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006ede:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <NotifyCmdStatus+0x3c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	4798      	blx	r3
  return;
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
}
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	200003e4 	.word	0x200003e4

08006ef4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7a5b      	ldrb	r3, [r3, #9]
 8006f00:	2b0f      	cmp	r3, #15
 8006f02:	d003      	beq.n	8006f0c <TlEvtReceived+0x18>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7a5b      	ldrb	r3, [r3, #9]
 8006f08:	2b0e      	cmp	r3, #14
 8006f0a:	d107      	bne.n	8006f1c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4809      	ldr	r0, [pc, #36]	@ (8006f34 <TlEvtReceived+0x40>)
 8006f10:	f000 fc28 	bl	8007764 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006f14:	2000      	movs	r0, #0
 8006f16:	f000 ff49 	bl	8007dac <hci_cmd_resp_release>
 8006f1a:	e006      	b.n	8006f2a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006f1c:	6879      	ldr	r1, [r7, #4]
 8006f1e:	4806      	ldr	r0, [pc, #24]	@ (8006f38 <TlEvtReceived+0x44>)
 8006f20:	f000 fc20 	bl	8007764 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006f24:	4804      	ldr	r0, [pc, #16]	@ (8006f38 <TlEvtReceived+0x44>)
 8006f26:	f000 ff35 	bl	8007d94 <hci_notify_asynch_evt>
  }

  return;
 8006f2a:	bf00      	nop
}
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200003dc 	.word	0x200003dc
 8006f38:	200000b0 	.word	0x200000b0

08006f3c <hci_register_io_bus>:
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a05      	ldr	r2, [pc, #20]	@ (8006f5c <hci_register_io_bus+0x20>)
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a04      	ldr	r2, [pc, #16]	@ (8006f60 <hci_register_io_bus+0x24>)
 8006f4e:	611a      	str	r2, [r3, #16]
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	08007255 	.word	0x08007255
 8006f60:	080072bd 	.word	0x080072bd

08006f64 <shci_init>:
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4a08      	ldr	r2, [pc, #32]	@ (8006f94 <shci_init+0x30>)
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4a08      	ldr	r2, [pc, #32]	@ (8006f98 <shci_init+0x34>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	61d3      	str	r3, [r2, #28]
 8006f7c:	4806      	ldr	r0, [pc, #24]	@ (8006f98 <shci_init+0x34>)
 8006f7e:	f000 f915 	bl	80071ac <shci_register_io_bus>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f898 	bl	80070bc <TlInit>
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	2000040c 	.word	0x2000040c
 8006f98:	200003ec 	.word	0x200003ec

08006f9c <shci_user_evt_proc>:
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4822      	ldr	r0, [pc, #136]	@ (800702c <shci_user_evt_proc+0x90>)
 8006fa4:	f000 fb96 	bl	80076d4 <LST_is_empty>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d12b      	bne.n	8007006 <shci_user_evt_proc+0x6a>
 8006fae:	4b20      	ldr	r3, [pc, #128]	@ (8007030 <shci_user_evt_proc+0x94>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d027      	beq.n	8007006 <shci_user_evt_proc+0x6a>
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	4619      	mov	r1, r3
 8006fbc:	481b      	ldr	r0, [pc, #108]	@ (800702c <shci_user_evt_proc+0x90>)
 8006fbe:	f000 fc18 	bl	80077f2 <LST_remove_head>
 8006fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007034 <shci_user_evt_proc+0x98>)
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <shci_user_evt_proc+0x48>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	2301      	movs	r3, #1
 8006fd0:	713b      	strb	r3, [r7, #4]
 8006fd2:	4b18      	ldr	r3, [pc, #96]	@ (8007034 <shci_user_evt_proc+0x98>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	1d3a      	adds	r2, r7, #4
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	793a      	ldrb	r2, [r7, #4]
 8006fde:	4b14      	ldr	r3, [pc, #80]	@ (8007030 <shci_user_evt_proc+0x94>)
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e002      	b.n	8006fea <shci_user_evt_proc+0x4e>
 8006fe4:	4b12      	ldr	r3, [pc, #72]	@ (8007030 <shci_user_evt_proc+0x94>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <shci_user_evt_proc+0x94>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <shci_user_evt_proc+0x60>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fa71 	bl	80074dc <TL_MM_EvtDone>
 8006ffa:	e004      	b.n	8007006 <shci_user_evt_proc+0x6a>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4619      	mov	r1, r3
 8007000:	480a      	ldr	r0, [pc, #40]	@ (800702c <shci_user_evt_proc+0x90>)
 8007002:	f000 fb89 	bl	8007718 <LST_insert_head>
 8007006:	4809      	ldr	r0, [pc, #36]	@ (800702c <shci_user_evt_proc+0x90>)
 8007008:	f000 fb64 	bl	80076d4 <LST_is_empty>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d107      	bne.n	8007022 <shci_user_evt_proc+0x86>
 8007012:	4b07      	ldr	r3, [pc, #28]	@ (8007030 <shci_user_evt_proc+0x94>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <shci_user_evt_proc+0x86>
 800701a:	4804      	ldr	r0, [pc, #16]	@ (800702c <shci_user_evt_proc+0x90>)
 800701c:	f7f9 fd58 	bl	8000ad0 <shci_notify_asynch_evt>
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200000c0 	.word	0x200000c0
 8007030:	200000d0 	.word	0x200000d0
 8007034:	200003ec 	.word	0x200003ec

08007038 <shci_send>:
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60ba      	str	r2, [r7, #8]
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	4603      	mov	r3, r0
 8007044:	81fb      	strh	r3, [r7, #14]
 8007046:	460b      	mov	r3, r1
 8007048:	737b      	strb	r3, [r7, #13]
 800704a:	2000      	movs	r0, #0
 800704c:	f000 f868 	bl	8007120 <Cmd_SetStatus>
 8007050:	4b17      	ldr	r3, [pc, #92]	@ (80070b0 <shci_send+0x78>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	89fa      	ldrh	r2, [r7, #14]
 8007056:	f8a3 2009 	strh.w	r2, [r3, #9]
 800705a:	4b15      	ldr	r3, [pc, #84]	@ (80070b0 <shci_send+0x78>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	7b7a      	ldrb	r2, [r7, #13]
 8007060:	72da      	strb	r2, [r3, #11]
 8007062:	4b13      	ldr	r3, [pc, #76]	@ (80070b0 <shci_send+0x78>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	7b7a      	ldrb	r2, [r7, #13]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	4618      	mov	r0, r3
 800706e:	f002 f9c9 	bl	8009404 <memcpy>
 8007072:	4b10      	ldr	r3, [pc, #64]	@ (80070b4 <shci_send+0x7c>)
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	4b0f      	ldr	r3, [pc, #60]	@ (80070b8 <shci_send+0x80>)
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2100      	movs	r1, #0
 800707e:	2000      	movs	r0, #0
 8007080:	4798      	blx	r3
 8007082:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007086:	f7f9 fd3a 	bl	8000afe <shci_cmd_resp_wait>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f103 0008 	add.w	r0, r3, #8
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <shci_send+0x78>)
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <shci_send+0x78>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	789b      	ldrb	r3, [r3, #2]
 800709a:	3303      	adds	r3, #3
 800709c:	461a      	mov	r2, r3
 800709e:	f002 f9b1 	bl	8009404 <memcpy>
 80070a2:	2001      	movs	r0, #1
 80070a4:	f000 f83c 	bl	8007120 <Cmd_SetStatus>
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	200000cc 	.word	0x200000cc
 80070b4:	20000410 	.word	0x20000410
 80070b8:	200003ec 	.word	0x200003ec

080070bc <TlInit>:
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	4a10      	ldr	r2, [pc, #64]	@ (8007108 <TlInit+0x4c>)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4810      	ldr	r0, [pc, #64]	@ (800710c <TlInit+0x50>)
 80070cc:	f000 faf2 	bl	80076b4 <LST_init_head>
 80070d0:	2001      	movs	r0, #1
 80070d2:	f000 f825 	bl	8007120 <Cmd_SetStatus>
 80070d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007110 <TlInit+0x54>)
 80070d8:	2201      	movs	r2, #1
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007114 <TlInit+0x58>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00c      	beq.n	80070fe <TlInit+0x42>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007118 <TlInit+0x5c>)
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <TlInit+0x60>)
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	4b08      	ldr	r3, [pc, #32]	@ (8007114 <TlInit+0x58>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f107 020c 	add.w	r2, r7, #12
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	200000cc 	.word	0x200000cc
 800710c:	200000c0 	.word	0x200000c0
 8007110:	200000d0 	.word	0x200000d0
 8007114:	200003ec 	.word	0x200003ec
 8007118:	08007171 	.word	0x08007171
 800711c:	08007189 	.word	0x08007189

08007120 <Cmd_SetStatus>:
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	71fb      	strb	r3, [r7, #7]
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <Cmd_SetStatus+0x28>
 8007130:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <Cmd_SetStatus+0x48>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <Cmd_SetStatus+0x20>
 8007138:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <Cmd_SetStatus+0x48>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2000      	movs	r0, #0
 800713e:	4798      	blx	r3
 8007140:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <Cmd_SetStatus+0x4c>)
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e00b      	b.n	8007160 <Cmd_SetStatus+0x40>
 8007148:	4b08      	ldr	r3, [pc, #32]	@ (800716c <Cmd_SetStatus+0x4c>)
 800714a:	2201      	movs	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <Cmd_SetStatus+0x48>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d004      	beq.n	8007160 <Cmd_SetStatus+0x40>
 8007156:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <Cmd_SetStatus+0x48>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2001      	movs	r0, #1
 800715c:	4798      	blx	r3
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	2000040c 	.word	0x2000040c
 800716c:	200000c8 	.word	0x200000c8

08007170 <TlCmdEvtReceived>:
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	2000      	movs	r0, #0
 800717a:	f7f9 fcb5 	bl	8000ae8 <shci_cmd_resp_release>
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <TlUserEvtReceived>:
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4805      	ldr	r0, [pc, #20]	@ (80071a8 <TlUserEvtReceived+0x20>)
 8007194:	f000 fae6 	bl	8007764 <LST_insert_tail>
 8007198:	4803      	ldr	r0, [pc, #12]	@ (80071a8 <TlUserEvtReceived+0x20>)
 800719a:	f7f9 fc99 	bl	8000ad0 <shci_notify_asynch_evt>
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	200000c0 	.word	0x200000c0

080071ac <shci_register_io_bus>:
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a05      	ldr	r2, [pc, #20]	@ (80071cc <shci_register_io_bus+0x20>)
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a04      	ldr	r2, [pc, #16]	@ (80071d0 <shci_register_io_bus+0x24>)
 80071be:	611a      	str	r2, [r3, #16]
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	08007369 	.word	0x08007369
 80071d0:	080073bd 	.word	0x080073bd

080071d4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80071d8:	f001 fdba 	bl	8008d50 <HW_IPCC_Enable>

  return;
 80071dc:	bf00      	nop
}
 80071de:	bd80      	pop	{r7, pc}

080071e0 <TL_Init>:


void TL_Init( void )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80071e4:	4b10      	ldr	r3, [pc, #64]	@ (8007228 <TL_Init+0x48>)
 80071e6:	4a11      	ldr	r2, [pc, #68]	@ (800722c <TL_Init+0x4c>)
 80071e8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80071ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007228 <TL_Init+0x48>)
 80071ec:	4a10      	ldr	r2, [pc, #64]	@ (8007230 <TL_Init+0x50>)
 80071ee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80071f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <TL_Init+0x48>)
 80071f2:	4a10      	ldr	r2, [pc, #64]	@ (8007234 <TL_Init+0x54>)
 80071f4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80071f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <TL_Init+0x48>)
 80071f8:	4a0f      	ldr	r2, [pc, #60]	@ (8007238 <TL_Init+0x58>)
 80071fa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007228 <TL_Init+0x48>)
 80071fe:	4a0f      	ldr	r2, [pc, #60]	@ (800723c <TL_Init+0x5c>)
 8007200:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007202:	4b09      	ldr	r3, [pc, #36]	@ (8007228 <TL_Init+0x48>)
 8007204:	4a0e      	ldr	r2, [pc, #56]	@ (8007240 <TL_Init+0x60>)
 8007206:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007208:	4b07      	ldr	r3, [pc, #28]	@ (8007228 <TL_Init+0x48>)
 800720a:	4a0e      	ldr	r2, [pc, #56]	@ (8007244 <TL_Init+0x64>)
 800720c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800720e:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <TL_Init+0x48>)
 8007210:	4a0d      	ldr	r2, [pc, #52]	@ (8007248 <TL_Init+0x68>)
 8007212:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007214:	4b04      	ldr	r3, [pc, #16]	@ (8007228 <TL_Init+0x48>)
 8007216:	4a0d      	ldr	r2, [pc, #52]	@ (800724c <TL_Init+0x6c>)
 8007218:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800721a:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <TL_Init+0x48>)
 800721c:	4a0c      	ldr	r2, [pc, #48]	@ (8007250 <TL_Init+0x70>)
 800721e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007220:	f001 fdaa 	bl	8008d78 <HW_IPCC_Init>

  return;
 8007224:	bf00      	nop
}
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20030000 	.word	0x20030000
 800722c:	20030028 	.word	0x20030028
 8007230:	20030048 	.word	0x20030048
 8007234:	20030058 	.word	0x20030058
 8007238:	20030068 	.word	0x20030068
 800723c:	20030070 	.word	0x20030070
 8007240:	20030078 	.word	0x20030078
 8007244:	20030080 	.word	0x20030080
 8007248:	2003009c 	.word	0x2003009c
 800724c:	200300a0 	.word	0x200300a0
 8007250:	200300ac 	.word	0x200300ac

08007254 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007260:	4811      	ldr	r0, [pc, #68]	@ (80072a8 <TL_BLE_Init+0x54>)
 8007262:	f000 fa27 	bl	80076b4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007266:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <TL_BLE_Init+0x58>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4a0c      	ldr	r2, [pc, #48]	@ (80072b0 <TL_BLE_Init+0x5c>)
 8007280:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	4a08      	ldr	r2, [pc, #32]	@ (80072a8 <TL_BLE_Init+0x54>)
 8007286:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007288:	f001 fd8c 	bl	8008da4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a08      	ldr	r2, [pc, #32]	@ (80072b4 <TL_BLE_Init+0x60>)
 8007292:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a07      	ldr	r2, [pc, #28]	@ (80072b8 <TL_BLE_Init+0x64>)
 800729a:	6013      	str	r3, [r2, #0]

  return 0;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200300c8 	.word	0x200300c8
 80072ac:	20030000 	.word	0x20030000
 80072b0:	20030a58 	.word	0x20030a58
 80072b4:	2000041c 	.word	0x2000041c
 80072b8:	20000420 	.word	0x20000420

080072bc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80072c8:	4b09      	ldr	r3, [pc, #36]	@ (80072f0 <TL_BLE_SendCmd+0x34>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2201      	movs	r2, #1
 80072d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80072d2:	4b07      	ldr	r3, [pc, #28]	@ (80072f0 <TL_BLE_SendCmd+0x34>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4619      	mov	r1, r3
 80072da:	2001      	movs	r0, #1
 80072dc:	f000 f96c 	bl	80075b8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80072e0:	f001 fd6a 	bl	8008db8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20030000 	.word	0x20030000

080072f4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80072fa:	e01c      	b.n	8007336 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80072fc:	1d3b      	adds	r3, r7, #4
 80072fe:	4619      	mov	r1, r3
 8007300:	4812      	ldr	r0, [pc, #72]	@ (800734c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007302:	f000 fa76 	bl	80077f2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7a5b      	ldrb	r3, [r3, #9]
 800730a:	2b0f      	cmp	r3, #15
 800730c:	d003      	beq.n	8007316 <HW_IPCC_BLE_RxEvtNot+0x22>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7a5b      	ldrb	r3, [r3, #9]
 8007312:	2b0e      	cmp	r3, #14
 8007314:	d105      	bne.n	8007322 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4619      	mov	r1, r3
 800731a:	2002      	movs	r0, #2
 800731c:	f000 f94c 	bl	80075b8 <OutputDbgTrace>
 8007320:	e004      	b.n	800732c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4619      	mov	r1, r3
 8007326:	2003      	movs	r0, #3
 8007328:	f000 f946 	bl	80075b8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800732c:	4b08      	ldr	r3, [pc, #32]	@ (8007350 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4610      	mov	r0, r2
 8007334:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007336:	4805      	ldr	r0, [pc, #20]	@ (800734c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007338:	f000 f9cc 	bl	80076d4 <LST_is_empty>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0dc      	beq.n	80072fc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007342:	bf00      	nop
}
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	200300c8 	.word	0x200300c8
 8007350:	2000041c 	.word	0x2000041c

08007354 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007358:	4b02      	ldr	r3, [pc, #8]	@ (8007364 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4798      	blx	r3

  return;
 800735e:	bf00      	nop
}
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000420 	.word	0x20000420

08007368 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007374:	480d      	ldr	r0, [pc, #52]	@ (80073ac <TL_SYS_Init+0x44>)
 8007376:	f000 f99d 	bl	80076b4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800737a:	4b0d      	ldr	r3, [pc, #52]	@ (80073b0 <TL_SYS_Init+0x48>)
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <TL_SYS_Init+0x44>)
 800738c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800738e:	f001 fd35 	bl	8008dfc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a07      	ldr	r2, [pc, #28]	@ (80073b4 <TL_SYS_Init+0x4c>)
 8007398:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4a06      	ldr	r2, [pc, #24]	@ (80073b8 <TL_SYS_Init+0x50>)
 80073a0:	6013      	str	r3, [r2, #0]

  return 0;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200300d0 	.word	0x200300d0
 80073b0:	20030000 	.word	0x20030000
 80073b4:	20000424 	.word	0x20000424
 80073b8:	20000428 	.word	0x20000428

080073bc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80073c8:	4b09      	ldr	r3, [pc, #36]	@ (80073f0 <TL_SYS_SendCmd+0x34>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2210      	movs	r2, #16
 80073d0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80073d2:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <TL_SYS_SendCmd+0x34>)
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	2004      	movs	r0, #4
 80073dc:	f000 f8ec 	bl	80075b8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80073e0:	f001 fd16 	bl	8008e10 <HW_IPCC_SYS_SendCmd>

  return 0;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20030000 	.word	0x20030000

080073f4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80073f8:	4b07      	ldr	r3, [pc, #28]	@ (8007418 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4619      	mov	r1, r3
 8007400:	2005      	movs	r0, #5
 8007402:	f000 f8d9 	bl	80075b8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007406:	4b05      	ldr	r3, [pc, #20]	@ (800741c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a03      	ldr	r2, [pc, #12]	@ (8007418 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3

  return;
 8007414:	bf00      	nop
}
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20030000 	.word	0x20030000
 800741c:	20000424 	.word	0x20000424

08007420 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007426:	e00e      	b.n	8007446 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	4619      	mov	r1, r3
 800742c:	480b      	ldr	r0, [pc, #44]	@ (800745c <HW_IPCC_SYS_EvtNot+0x3c>)
 800742e:	f000 f9e0 	bl	80077f2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4619      	mov	r1, r3
 8007436:	2006      	movs	r0, #6
 8007438:	f000 f8be 	bl	80075b8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800743c:	4b08      	ldr	r3, [pc, #32]	@ (8007460 <HW_IPCC_SYS_EvtNot+0x40>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4610      	mov	r0, r2
 8007444:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007446:	4805      	ldr	r0, [pc, #20]	@ (800745c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007448:	f000 f944 	bl	80076d4 <LST_is_empty>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0ea      	beq.n	8007428 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007452:	bf00      	nop
}
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200300d0 	.word	0x200300d0
 8007460:	20000428 	.word	0x20000428

08007464 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800746c:	4817      	ldr	r0, [pc, #92]	@ (80074cc <TL_MM_Init+0x68>)
 800746e:	f000 f921 	bl	80076b4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007472:	4817      	ldr	r0, [pc, #92]	@ (80074d0 <TL_MM_Init+0x6c>)
 8007474:	f000 f91e 	bl	80076b4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007478:	4b16      	ldr	r3, [pc, #88]	@ (80074d4 <TL_MM_Init+0x70>)
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	4a16      	ldr	r2, [pc, #88]	@ (80074d8 <TL_MM_Init+0x74>)
 800747e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007480:	4b15      	ldr	r3, [pc, #84]	@ (80074d8 <TL_MM_Init+0x74>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6892      	ldr	r2, [r2, #8]
 8007488:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800748a:	4b13      	ldr	r3, [pc, #76]	@ (80074d8 <TL_MM_Init+0x74>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68d2      	ldr	r2, [r2, #12]
 8007492:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007494:	4b10      	ldr	r3, [pc, #64]	@ (80074d8 <TL_MM_Init+0x74>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <TL_MM_Init+0x68>)
 800749a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800749c:	4b0e      	ldr	r3, [pc, #56]	@ (80074d8 <TL_MM_Init+0x74>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80074a6:	4b0c      	ldr	r3, [pc, #48]	@ (80074d8 <TL_MM_Init+0x74>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6852      	ldr	r2, [r2, #4]
 80074ae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80074b0:	4b09      	ldr	r3, [pc, #36]	@ (80074d8 <TL_MM_Init+0x74>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6912      	ldr	r2, [r2, #16]
 80074b8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <TL_MM_Init+0x74>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6952      	ldr	r2, [r2, #20]
 80074c2:	619a      	str	r2, [r3, #24]

  return;
 80074c4:	bf00      	nop
}
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	200300b8 	.word	0x200300b8
 80074d0:	20000414 	.word	0x20000414
 80074d4:	20030000 	.word	0x20030000
 80074d8:	2000042c 	.word	0x2000042c

080074dc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	4807      	ldr	r0, [pc, #28]	@ (8007504 <TL_MM_EvtDone+0x28>)
 80074e8:	f000 f93c 	bl	8007764 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	2000      	movs	r0, #0
 80074f0:	f000 f862 	bl	80075b8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80074f4:	4804      	ldr	r0, [pc, #16]	@ (8007508 <TL_MM_EvtDone+0x2c>)
 80074f6:	f001 fcb1 	bl	8008e5c <HW_IPCC_MM_SendFreeBuf>

  return;
 80074fa:	bf00      	nop
}
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000414 	.word	0x20000414
 8007508:	0800750d 	.word	0x0800750d

0800750c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007512:	e00c      	b.n	800752e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007514:	1d3b      	adds	r3, r7, #4
 8007516:	4619      	mov	r1, r3
 8007518:	480a      	ldr	r0, [pc, #40]	@ (8007544 <SendFreeBuf+0x38>)
 800751a:	f000 f96a 	bl	80077f2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800751e:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <SendFreeBuf+0x3c>)
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f000 f91b 	bl	8007764 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800752e:	4805      	ldr	r0, [pc, #20]	@ (8007544 <SendFreeBuf+0x38>)
 8007530:	f000 f8d0 	bl	80076d4 <LST_is_empty>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ec      	beq.n	8007514 <SendFreeBuf+0x8>
  }

  return;
 800753a:	bf00      	nop
}
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000414 	.word	0x20000414
 8007548:	20030000 	.word	0x20030000

0800754c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007550:	4805      	ldr	r0, [pc, #20]	@ (8007568 <TL_TRACES_Init+0x1c>)
 8007552:	f000 f8af 	bl	80076b4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007556:	4b05      	ldr	r3, [pc, #20]	@ (800756c <TL_TRACES_Init+0x20>)
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	4a03      	ldr	r2, [pc, #12]	@ (8007568 <TL_TRACES_Init+0x1c>)
 800755c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800755e:	f001 fcb3 	bl	8008ec8 <HW_IPCC_TRACES_Init>

  return;
 8007562:	bf00      	nop
}
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	200300c0 	.word	0x200300c0
 800756c:	20030000 	.word	0x20030000

08007570 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007576:	e008      	b.n	800758a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007578:	1d3b      	adds	r3, r7, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4808      	ldr	r0, [pc, #32]	@ (80075a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800757e:	f000 f938 	bl	80077f2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	f000 f80d 	bl	80075a4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800758a:	4805      	ldr	r0, [pc, #20]	@ (80075a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800758c:	f000 f8a2 	bl	80076d4 <LST_is_empty>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007596:	bf00      	nop
}
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200300c0 	.word	0x200300c0

080075a4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	6039      	str	r1, [r7, #0]
 80075c2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	2b06      	cmp	r3, #6
 80075c8:	d845      	bhi.n	8007656 <OutputDbgTrace+0x9e>
 80075ca:	a201      	add	r2, pc, #4	@ (adr r2, 80075d0 <OutputDbgTrace+0x18>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	08007611 	.word	0x08007611
 80075d8:	08007617 	.word	0x08007617
 80075dc:	0800762b 	.word	0x0800762b
 80075e0:	08007637 	.word	0x08007637
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	0800764b 	.word	0x0800764b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	7a5b      	ldrb	r3, [r3, #9]
 80075f4:	2bff      	cmp	r3, #255	@ 0xff
 80075f6:	d005      	beq.n	8007604 <OutputDbgTrace+0x4c>
 80075f8:	2bff      	cmp	r3, #255	@ 0xff
 80075fa:	dc05      	bgt.n	8007608 <OutputDbgTrace+0x50>
 80075fc:	2b0e      	cmp	r3, #14
 80075fe:	d005      	beq.n	800760c <OutputDbgTrace+0x54>
 8007600:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007602:	e001      	b.n	8007608 <OutputDbgTrace+0x50>
          break;
 8007604:	bf00      	nop
 8007606:	e027      	b.n	8007658 <OutputDbgTrace+0xa0>
          break;
 8007608:	bf00      	nop
 800760a:	e025      	b.n	8007658 <OutputDbgTrace+0xa0>
          break;
 800760c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800760e:	e023      	b.n	8007658 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007614:	e020      	b.n	8007658 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	7a5b      	ldrb	r3, [r3, #9]
 800761e:	2b0e      	cmp	r3, #14
 8007620:	d001      	beq.n	8007626 <OutputDbgTrace+0x6e>
 8007622:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007624:	e000      	b.n	8007628 <OutputDbgTrace+0x70>
          break;
 8007626:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007628:	e016      	b.n	8007658 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	7a5b      	ldrb	r3, [r3, #9]
 8007632:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007634:	e010      	b.n	8007658 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800763a:	e00d      	b.n	8007658 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8007646:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007648:	e006      	b.n	8007658 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	7a5b      	ldrb	r3, [r3, #9]
 8007652:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007654:	e000      	b.n	8007658 <OutputDbgTrace+0xa0>

    default:
      break;
 8007656:	bf00      	nop
  }

  return;
 8007658:	bf00      	nop
}
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800766e:	4b0f      	ldr	r3, [pc, #60]	@ (80076ac <OTP_Read+0x48>)
 8007670:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007672:	e002      	b.n	800767a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3b08      	subs	r3, #8
 8007678:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3307      	adds	r3, #7
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	79fa      	ldrb	r2, [r7, #7]
 8007682:	429a      	cmp	r2, r3
 8007684:	d003      	beq.n	800768e <OTP_Read+0x2a>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4a09      	ldr	r2, [pc, #36]	@ (80076b0 <OTP_Read+0x4c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d1f2      	bne.n	8007674 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3307      	adds	r3, #7
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	79fa      	ldrb	r2, [r7, #7]
 8007696:	429a      	cmp	r2, r3
 8007698:	d001      	beq.n	800769e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800769e:	68fb      	ldr	r3, [r7, #12]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	1fff73f8 	.word	0x1fff73f8
 80076b0:	1fff7000 	.word	0x1fff7000

080076b4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	605a      	str	r2, [r3, #4]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076dc:	f3ef 8310 	mrs	r3, PRIMASK
 80076e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80076e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80076e6:	b672      	cpsid	i
}
 80076e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d102      	bne.n	80076fa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	75fb      	strb	r3, [r7, #23]
 80076f8:	e001      	b.n	80076fe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f383 8810 	msr	PRIMASK, r3
}
 8007708:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800770a:	7dfb      	ldrb	r3, [r7, #23]
}
 800770c:	4618      	mov	r0, r3
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007722:	f3ef 8310 	mrs	r3, PRIMASK
 8007726:	60fb      	str	r3, [r7, #12]
  return(result);
 8007728:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800772a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800772c:	b672      	cpsid	i
}
 800772e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	605a      	str	r2, [r3, #4]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f383 8810 	msr	PRIMASK, r3
}
 8007756:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007758:	bf00      	nop
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800776e:	f3ef 8310 	mrs	r3, PRIMASK
 8007772:	60fb      	str	r3, [r7, #12]
  return(result);
 8007774:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007778:	b672      	cpsid	i
}
 800777a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f383 8810 	msr	PRIMASK, r3
}
 80077a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80077a4:	bf00      	nop
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b8:	f3ef 8310 	mrs	r3, PRIMASK
 80077bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80077be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80077c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80077c2:	b672      	cpsid	i
}
 80077c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6852      	ldr	r2, [r2, #4]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f383 8810 	msr	PRIMASK, r3
}
 80077e4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007800:	60fb      	str	r3, [r7, #12]
  return(result);
 8007802:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007806:	b672      	cpsid	i
}
 8007808:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff ffca 	bl	80077b0 <LST_remove_node>
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f383 8810 	msr	PRIMASK, r3
}
 8007826:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007834:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <LL_FLASH_GetUDN+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	1fff7580 	.word	0x1fff7580

08007848 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800784c:	4b03      	ldr	r3, [pc, #12]	@ (800785c <LL_FLASH_GetDeviceID+0x14>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	b2db      	uxtb	r3, r3
}
 8007852:	4618      	mov	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	1fff7584 	.word	0x1fff7584

08007860 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007864:	4b03      	ldr	r3, [pc, #12]	@ (8007874 <LL_FLASH_GetSTCompanyID+0x14>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	0a1b      	lsrs	r3, r3, #8
}
 800786a:	4618      	mov	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	1fff7584 	.word	0x1fff7584

08007878 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b090      	sub	sp, #64	@ 0x40
 800787c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800787e:	2392      	movs	r3, #146	@ 0x92
 8007880:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007884:	4b25      	ldr	r3, [pc, #148]	@ (800791c <APP_BLE_Init+0xa4>)
 8007886:	1d3c      	adds	r4, r7, #4
 8007888:	461d      	mov	r5, r3
 800788a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800788c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800788e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800789a:	c403      	stmia	r4!, {r0, r1}
 800789c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800789e:	f000 f921 	bl	8007ae4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80078a2:	2101      	movs	r1, #1
 80078a4:	2002      	movs	r0, #2
 80078a6:	f001 fb37 	bl	8008f18 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80078aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007920 <APP_BLE_Init+0xa8>)
 80078ac:	2100      	movs	r1, #0
 80078ae:	2002      	movs	r0, #2
 80078b0:	f001 fc5e 	bl	8009170 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80078b4:	1d3b      	adds	r3, r7, #4
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff f8c6 	bl	8006a48 <SHCI_C2_BLE_Init>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80078c2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80078ca:	f7fa f97f 	bl	8001bcc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80078ce:	f000 f91f 	bl	8007b10 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80078d2:	f7fe fff7 	bl	80068c4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80078d6:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <APP_BLE_Init+0xac>)
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80078de:	4b11      	ldr	r3, [pc, #68]	@ (8007924 <APP_BLE_Init+0xac>)
 80078e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80078e4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80078e6:	4a10      	ldr	r2, [pc, #64]	@ (8007928 <APP_BLE_Init+0xb0>)
 80078e8:	2100      	movs	r1, #0
 80078ea:	2001      	movs	r0, #1
 80078ec:	f001 fc40 	bl	8009170 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80078f0:	2006      	movs	r0, #6
 80078f2:	f7fe fe5b 	bl	80065ac <aci_hal_set_radio_activity_mask>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80078fc:	f000 fb30 	bl	8007f60 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007900:	4b08      	ldr	r3, [pc, #32]	@ (8007924 <APP_BLE_Init+0xac>)
 8007902:	2200      	movs	r2, #0
 8007904:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007906:	4b07      	ldr	r3, [pc, #28]	@ (8007924 <APP_BLE_Init+0xac>)
 8007908:	2200      	movs	r2, #0
 800790a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800790c:	2001      	movs	r0, #1
 800790e:	f000 f9b3 	bl	8007c78 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007912:	bf00      	nop
}
 8007914:	3740      	adds	r7, #64	@ 0x40
 8007916:	46bd      	mov	sp, r7
 8007918:	bdb0      	pop	{r4, r5, r7, pc}
 800791a:	bf00      	nop
 800791c:	08009480 	.word	0x08009480
 8007920:	08006c65 	.word	0x08006c65
 8007924:	20000438 	.word	0x20000438
 8007928:	08007d61 	.word	0x08007d61

0800792c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	@ 0x30
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007934:	2392      	movs	r3, #146	@ 0x92
 8007936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3301      	adds	r3, #1
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2bff      	cmp	r3, #255	@ 0xff
 8007946:	d05c      	beq.n	8007a02 <SVCCTL_App_Notification+0xd6>
 8007948:	2bff      	cmp	r3, #255	@ 0xff
 800794a:	f300 80bd 	bgt.w	8007ac8 <SVCCTL_App_Notification+0x19c>
 800794e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007950:	d02b      	beq.n	80079aa <SVCCTL_App_Notification+0x7e>
 8007952:	2b3e      	cmp	r3, #62	@ 0x3e
 8007954:	f300 80b8 	bgt.w	8007ac8 <SVCCTL_App_Notification+0x19c>
 8007958:	2b05      	cmp	r3, #5
 800795a:	d002      	beq.n	8007962 <SVCCTL_App_Notification+0x36>
 800795c:	2b10      	cmp	r3, #16
 800795e:	d020      	beq.n	80079a2 <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007960:	e0b2      	b.n	8007ac8 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	3302      	adds	r3, #2
 8007966:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800796e:	b29a      	uxth	r2, r3
 8007970:	4b59      	ldr	r3, [pc, #356]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 8007972:	8adb      	ldrh	r3, [r3, #22]
 8007974:	429a      	cmp	r2, r3
 8007976:	d106      	bne.n	8007986 <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007978:	4b57      	ldr	r3, [pc, #348]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 800797a:	2200      	movs	r2, #0
 800797c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800797e:	4b56      	ldr	r3, [pc, #344]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007986:	2001      	movs	r0, #1
 8007988:	f000 f976 	bl	8007c78 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800798c:	4b53      	ldr	r3, [pc, #332]	@ (8007adc <SVCCTL_App_Notification+0x1b0>)
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007992:	4b51      	ldr	r3, [pc, #324]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 8007994:	8ada      	ldrh	r2, [r3, #22]
 8007996:	4b51      	ldr	r3, [pc, #324]	@ (8007adc <SVCCTL_App_Notification+0x1b0>)
 8007998:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800799a:	4850      	ldr	r0, [pc, #320]	@ (8007adc <SVCCTL_App_Notification+0x1b0>)
 800799c:	f000 fab6 	bl	8007f0c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80079a0:	e095      	b.n	8007ace <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 80079a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a4:	3302      	adds	r3, #2
 80079a6:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 80079a8:	e091      	b.n	8007ace <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	3302      	adds	r3, #2
 80079ae:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d001      	beq.n	80079bc <SVCCTL_App_Notification+0x90>
 80079b8:	2b03      	cmp	r3, #3
          break;
 80079ba:	e021      	b.n	8007a00 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	3301      	adds	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80079c2:	4b45      	ldr	r3, [pc, #276]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 80079c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d104      	bne.n	80079d6 <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80079cc:	4b42      	ldr	r3, [pc, #264]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 80079ce:	2206      	movs	r2, #6
 80079d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80079d4:	e003      	b.n	80079de <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80079d6:	4b40      	ldr	r3, [pc, #256]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 80079d8:	2205      	movs	r2, #5
 80079da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 80079e8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80079ea:	4b3c      	ldr	r3, [pc, #240]	@ (8007adc <SVCCTL_App_Notification+0x1b0>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80079f0:	4b39      	ldr	r3, [pc, #228]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 80079f2:	8ada      	ldrh	r2, [r3, #22]
 80079f4:	4b39      	ldr	r3, [pc, #228]	@ (8007adc <SVCCTL_App_Notification+0x1b0>)
 80079f6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80079f8:	4838      	ldr	r0, [pc, #224]	@ (8007adc <SVCCTL_App_Notification+0x1b0>)
 80079fa:	f000 fa87 	bl	8007f0c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80079fe:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007a00:	e065      	b.n	8007ace <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a04:	3302      	adds	r3, #2
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d048      	beq.n	8007aa8 <SVCCTL_App_Notification+0x17c>
 8007a16:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	dc56      	bgt.n	8007acc <SVCCTL_App_Notification+0x1a0>
 8007a1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a22:	d04b      	beq.n	8007abc <SVCCTL_App_Notification+0x190>
 8007a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a28:	dc50      	bgt.n	8007acc <SVCCTL_App_Notification+0x1a0>
 8007a2a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	dc4c      	bgt.n	8007acc <SVCCTL_App_Notification+0x1a0>
 8007a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a36:	dc04      	bgt.n	8007a42 <SVCCTL_App_Notification+0x116>
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	d041      	beq.n	8007ac0 <SVCCTL_App_Notification+0x194>
 8007a3c:	2b06      	cmp	r3, #6
 8007a3e:	d039      	beq.n	8007ab4 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007a40:	e044      	b.n	8007acc <SVCCTL_App_Notification+0x1a0>
 8007a42:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007a46:	2b09      	cmp	r3, #9
 8007a48:	d840      	bhi.n	8007acc <SVCCTL_App_Notification+0x1a0>
 8007a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <SVCCTL_App_Notification+0x124>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007acd 	.word	0x08007acd
 8007a5c:	08007acd 	.word	0x08007acd
 8007a60:	08007acd 	.word	0x08007acd
 8007a64:	08007acd 	.word	0x08007acd
 8007a68:	08007ac5 	.word	0x08007ac5
 8007a6c:	08007acd 	.word	0x08007acd
 8007a70:	08007a8d 	.word	0x08007a8d
 8007a74:	08007ac5 	.word	0x08007ac5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007a78:	4b17      	ldr	r3, [pc, #92]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 8007a7a:	8adb      	ldrh	r3, [r3, #22]
 8007a7c:	4918      	ldr	r1, [pc, #96]	@ (8007ae0 <SVCCTL_App_Notification+0x1b4>)
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fd fe7e 	bl	8005780 <aci_gap_pass_key_resp>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007a8a:	e01c      	b.n	8007ac6 <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007a8c:	4b12      	ldr	r3, [pc, #72]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 8007a8e:	8adb      	ldrh	r3, [r3, #22]
 8007a90:	2101      	movs	r1, #1
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe f81e 	bl	8005ad4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8007a9e:	e012      	b.n	8007ac6 <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	623b      	str	r3, [r7, #32]
          break;
 8007aa6:	e00e      	b.n	8007ac6 <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <SVCCTL_App_Notification+0x1ac>)
 8007aaa:	8adb      	ldrh	r3, [r3, #22]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe fb24 	bl	80060fa <aci_gatt_confirm_indication>
        break;
 8007ab2:	e008      	b.n	8007ac6 <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	61fb      	str	r3, [r7, #28]
          break;
 8007aba:	e004      	b.n	8007ac6 <SVCCTL_App_Notification+0x19a>
          break;
 8007abc:	bf00      	nop
 8007abe:	e005      	b.n	8007acc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007ac0:	bf00      	nop
 8007ac2:	e003      	b.n	8007acc <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007ac4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007ac6:	e001      	b.n	8007acc <SVCCTL_App_Notification+0x1a0>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e000      	b.n	8007ace <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007acc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007ace:	2301      	movs	r3, #1
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3730      	adds	r7, #48	@ 0x30
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20000438 	.word	0x20000438
 8007adc:	200004bc 	.word	0x200004bc
 8007ae0:	0001b207 	.word	0x0001b207

08007ae4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007aea:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <Ble_Tl_Init+0x20>)
 8007aec:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007aee:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <Ble_Tl_Init+0x24>)
 8007af0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007af2:	463b      	mov	r3, r7
 8007af4:	4619      	mov	r1, r3
 8007af6:	4805      	ldr	r0, [pc, #20]	@ (8007b0c <Ble_Tl_Init+0x28>)
 8007af8:	f7ff f898 	bl	8006c2c <hci_init>

  return;
 8007afc:	bf00      	nop
}
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200300d8 	.word	0x200300d8
 8007b08:	08007e11 	.word	0x08007e11
 8007b0c:	08007dd9 	.word	0x08007dd9

08007b10 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	b08d      	sub	sp, #52	@ 0x34
 8007b14:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007b16:	2300      	movs	r3, #0
 8007b18:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007b1a:	2392      	movs	r3, #146	@ 0x92
 8007b1c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007b1e:	f7fe fd99 	bl	8006654 <hci_reset>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007b26:	f000 f8d7 	bl	8007cd8 <BleGetBdAddress>
 8007b2a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	2106      	movs	r1, #6
 8007b30:	2000      	movs	r0, #0
 8007b32:	f7fe fc4f 	bl	80063d4 <aci_hal_write_config_data>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8007c64 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007b3c:	2110      	movs	r1, #16
 8007b3e:	2018      	movs	r0, #24
 8007b40:	f7fe fc48 	bl	80063d4 <aci_hal_write_config_data>
 8007b44:	4603      	mov	r3, r0
 8007b46:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007b48:	4a47      	ldr	r2, [pc, #284]	@ (8007c68 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007b4a:	2110      	movs	r1, #16
 8007b4c:	2008      	movs	r0, #8
 8007b4e:	f7fe fc41 	bl	80063d4 <aci_hal_write_config_data>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007b56:	2118      	movs	r1, #24
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f7fe fcc0 	bl	80064de <aci_hal_set_tx_power_level>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007b62:	f7fe f81e 	bl	8005ba2 <aci_gatt_init>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	f043 0301 	orr.w	r3, r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01f      	beq.n	8007bbc <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c6c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007b7e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007b80:	1dba      	adds	r2, r7, #6
 8007b82:	7bf8      	ldrb	r0, [r7, #15]
 8007b84:	1cbb      	adds	r3, r7, #2
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	1d3b      	adds	r3, r7, #4
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	2208      	movs	r2, #8
 8007b90:	2100      	movs	r1, #0
 8007b92:	f7fd fe5c 	bl	800584e <aci_gap_init>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007b9a:	88fc      	ldrh	r4, [r7, #6]
 8007b9c:	88bd      	ldrh	r5, [r7, #4]
 8007b9e:	68b8      	ldr	r0, [r7, #8]
 8007ba0:	f7f8 faec 	bl	800017c <strlen>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7fe f9f8 	bl	8005fa8 <aci_gatt_update_char_value>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007bbc:	88f8      	ldrh	r0, [r7, #6]
 8007bbe:	8879      	ldrh	r1, [r7, #2]
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f7fe f9ee 	bl	8005fa8 <aci_gatt_update_char_value>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f7fe fd61 	bl	800669c <hci_le_set_default_phy>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007bde:	4b24      	ldr	r3, [pc, #144]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007be4:	4b22      	ldr	r3, [pc, #136]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fd fcb1 	bl	8005550 <aci_gap_set_io_capability>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007bfa:	2208      	movs	r2, #8
 8007bfc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c00:	2210      	movs	r2, #16
 8007c02:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007c04:	4b1a      	ldr	r3, [pc, #104]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007c0a:	4b19      	ldr	r3, [pc, #100]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c0c:	4a19      	ldr	r2, [pc, #100]	@ (8007c74 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007c0e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007c10:	4b17      	ldr	r3, [pc, #92]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007c16:	4b16      	ldr	r3, [pc, #88]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c18:	789c      	ldrb	r4, [r3, #2]
 8007c1a:	4b15      	ldr	r3, [pc, #84]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c1c:	785d      	ldrb	r5, [r3, #1]
 8007c1e:	4b14      	ldr	r3, [pc, #80]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	4a13      	ldr	r2, [pc, #76]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c24:	7952      	ldrb	r2, [r2, #5]
 8007c26:	4912      	ldr	r1, [pc, #72]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c28:	78c9      	ldrb	r1, [r1, #3]
 8007c2a:	4811      	ldr	r0, [pc, #68]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c2c:	6880      	ldr	r0, [r0, #8]
 8007c2e:	2600      	movs	r6, #0
 8007c30:	9604      	str	r6, [sp, #16]
 8007c32:	9003      	str	r0, [sp, #12]
 8007c34:	9102      	str	r1, [sp, #8]
 8007c36:	9201      	str	r2, [sp, #4]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7fd fcd9 	bl	80055f8 <aci_gap_set_authentication_requirement>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007c4a:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007c52:	f7fd ff1b 	bl	8005a8c <aci_gap_configure_filter_accept_list>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c62:	bf00      	nop
 8007c64:	08009680 	.word	0x08009680
 8007c68:	08009690 	.word	0x08009690
 8007c6c:	080094bc 	.word	0x080094bc
 8007c70:	20000438 	.word	0x20000438
 8007c74:	0001b207 	.word	0x0001b207

08007c78 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	@ 0x30
 8007c7c:	af08      	add	r7, sp, #32
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007c82:	2392      	movs	r3, #146	@ 0x92
 8007c84:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007c86:	4a12      	ldr	r2, [pc, #72]	@ (8007cd0 <Adv_Request+0x58>)
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9306      	str	r3, [sp, #24]
 8007c92:	2300      	movs	r3, #0
 8007c94:	9305      	str	r3, [sp, #20]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9302      	str	r3, [sp, #8]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	2300      	movs	r3, #0
 8007cac:	22a0      	movs	r2, #160	@ 0xa0
 8007cae:	2180      	movs	r1, #128	@ 0x80
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f7fd fb53 	bl	800535c <aci_gap_set_discoverable>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007cba:	4906      	ldr	r1, [pc, #24]	@ (8007cd4 <Adv_Request+0x5c>)
 8007cbc:	2015      	movs	r0, #21
 8007cbe:	f7fd fe73 	bl	80059a8 <aci_gap_update_adv_data>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007cc6:	bf00      	nop
}
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000438 	.word	0x20000438
 8007cd4:	20000050 	.word	0x20000050

08007cd8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007cde:	f7ff fda7 	bl	8007830 <LL_FLASH_GetUDN>
 8007ce2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cea:	d023      	beq.n	8007d34 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007cec:	f7ff fdb8 	bl	8007860 <LL_FLASH_GetSTCompanyID>
 8007cf0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007cf2:	f7ff fda9 	bl	8007848 <LL_FLASH_GetDeviceID>
 8007cf6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	4b16      	ldr	r3, [pc, #88]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007cfe:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	4b14      	ldr	r3, [pc, #80]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007d08:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	4b12      	ldr	r3, [pc, #72]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007d10:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	4b10      	ldr	r3, [pc, #64]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007d18:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007d22:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	0c1b      	lsrs	r3, r3, #16
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007d2c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <BleGetBdAddress+0x80>)
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e00b      	b.n	8007d4c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7ff fc95 	bl	8007664 <OTP_Read>
 8007d3a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e001      	b.n	8007d4c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007d48:	4b04      	ldr	r3, [pc, #16]	@ (8007d5c <BleGetBdAddress+0x84>)
 8007d4a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007d4c:	697b      	ldr	r3, [r7, #20]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000430 	.word	0x20000430
 8007d5c:	08009678 	.word	0x08009678

08007d60 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007d66:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <Adv_Cancel+0x30>)
 8007d68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d00a      	beq.n	8007d86 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007d70:	2392      	movs	r3, #146	@ 0x92
 8007d72:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007d74:	f7fd face 	bl	8005314 <aci_gap_set_non_discoverable>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007d7c:	4b04      	ldr	r3, [pc, #16]	@ (8007d90 <Adv_Cancel+0x30>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
}
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000438 	.word	0x20000438

08007d94 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	2002      	movs	r0, #2
 8007da0:	f001 fa08 	bl	80091b4 <UTIL_SEQ_SetTask>

  return;
 8007da4:	bf00      	nop
}
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007db4:	2001      	movs	r0, #1
 8007db6:	f001 fa69 	bl	800928c <UTIL_SEQ_SetEvt>

  return;
 8007dba:	bf00      	nop
}
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007dca:	2001      	movs	r0, #1
 8007dcc:	f001 fa7e 	bl	80092cc <UTIL_SEQ_WaitEvt>

  return;
 8007dd0:	bf00      	nop
}
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	3308      	adds	r3, #8
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fdbc 	bl	8006968 <SVCCTL_UserEvtRx>
 8007df0:	4603      	mov	r3, r0
 8007df2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007e00:	e003      	b.n	8007e0a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
  return;
 8007e08:	bf00      	nop
}
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <BLE_StatusNot+0x16>
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d006      	beq.n	8007e32 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007e24:	e00b      	b.n	8007e3e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007e26:	2303      	movs	r3, #3
 8007e28:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f001 f9ee 	bl	800920c <UTIL_SEQ_PauseTask>
      break;
 8007e30:	e005      	b.n	8007e3e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007e32:	2303      	movs	r3, #3
 8007e34:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f001 fa08 	bl	800924c <UTIL_SEQ_ResumeTask>
      break;
 8007e3c:	bf00      	nop
  }

  return;
 8007e3e:	bf00      	nop
}
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <Custom_STM_App_Notification>:
static void Custom_Fast_Send_Notification(void);  // Added for 0.3s timer
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b15      	cmp	r3, #21
 8007e56:	d84d      	bhi.n	8007ef4 <Custom_STM_App_Notification+0xac>
 8007e58:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <Custom_STM_App_Notification+0x18>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007ef5 	.word	0x08007ef5
 8007e64:	08007ef5 	.word	0x08007ef5
 8007e68:	08007ef5 	.word	0x08007ef5
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007ec7 	.word	0x08007ec7
 8007e74:	08007ef5 	.word	0x08007ef5
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007ef5 	.word	0x08007ef5
 8007e84:	08007ef5 	.word	0x08007ef5
 8007e88:	08007ed5 	.word	0x08007ed5
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007ef5 	.word	0x08007ef5
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007ef5 	.word	0x08007ef5
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	08007ee5 	.word	0x08007ee5
 8007ea8:	08007eed 	.word	0x08007eed
 8007eac:	08007ef5 	.word	0x08007ef5
 8007eb0:	08007ef5 	.word	0x08007ef5
 8007eb4:	08007ef5 	.word	0x08007ef5
      /* USER CODE END CUSTOM_STM_BHW_WRITE_EVT */
      break;

    case CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT */
      Custom_App_Context.Bhw_Notification_Status = 1;
 8007eb8:	4b12      	ldr	r3, [pc, #72]	@ (8007f04 <Custom_STM_App_Notification+0xbc>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
      notification_allowed = 1;
 8007ebe:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <Custom_STM_App_Notification+0xc0>)
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT */
      break;
 8007ec4:	e017      	b.n	8007ef6 <Custom_STM_App_Notification+0xae>

    case CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT */
      Custom_App_Context.Bhw_Notification_Status = 0;
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f04 <Custom_STM_App_Notification+0xbc>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
      notification_allowed = 0;
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f08 <Custom_STM_App_Notification+0xc0>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT */
      break;
 8007ed2:	e010      	b.n	8007ef6 <Custom_STM_App_Notification+0xae>
      /* USER CODE END CUSTOM_STM_BHR_WRITE_EVT */
      break;

    case CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT */
      Custom_App_Context.Bhr_Notification_Status = 1;
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <Custom_STM_App_Notification+0xbc>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT */
      break;
 8007eda:	e00c      	b.n	8007ef6 <Custom_STM_App_Notification+0xae>

    case CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT */
      Custom_App_Context.Bhr_Notification_Status = 0;
 8007edc:	4b09      	ldr	r3, [pc, #36]	@ (8007f04 <Custom_STM_App_Notification+0xbc>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT */
      break;
 8007ee2:	e008      	b.n	8007ef6 <Custom_STM_App_Notification+0xae>
      /* USER CODE END CUSTOM_STM_BHRV_WRITE_EVT */
      break;

    case CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT */
      Custom_App_Context.Bhrv_Notification_Status = 1;
 8007ee4:	4b07      	ldr	r3, [pc, #28]	@ (8007f04 <Custom_STM_App_Notification+0xbc>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	711a      	strb	r2, [r3, #4]
      /* USER CODE END CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT */
      break;
 8007eea:	e004      	b.n	8007ef6 <Custom_STM_App_Notification+0xae>

    case CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT */
      Custom_App_Context.Bhrv_Notification_Status = 0;
 8007eec:	4b05      	ldr	r3, [pc, #20]	@ (8007f04 <Custom_STM_App_Notification+0xbc>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	711a      	strb	r2, [r3, #4]
      /* USER CODE END CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT */
      break;
 8007ef2:	e000      	b.n	8007ef6 <Custom_STM_App_Notification+0xae>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007ef4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007ef6:	bf00      	nop
}
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	200004c0 	.word	0x200004c0
 8007f08:	200006cd 	.word	0x200006cd

08007f0c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <Custom_APP_Notification+0x16>
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d005      	beq.n	8007f2c <Custom_APP_Notification+0x20>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007f20:	e014      	b.n	8007f4c <Custom_APP_Notification+0x40>
      Custom_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	885a      	ldrh	r2, [r3, #2]
 8007f26:	4b0c      	ldr	r3, [pc, #48]	@ (8007f58 <Custom_APP_Notification+0x4c>)
 8007f28:	811a      	strh	r2, [r3, #8]
      break;
 8007f2a:	e00f      	b.n	8007f4c <Custom_APP_Notification+0x40>
      Custom_App_Context.ConnectionHandle = 0;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f58 <Custom_APP_Notification+0x4c>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	811a      	strh	r2, [r3, #8]
      notification_allowed = 0;
 8007f32:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <Custom_APP_Notification+0x50>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
      Custom_App_Context.Bhw_Notification_Status = 0;
 8007f38:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <Custom_APP_Notification+0x4c>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
      Custom_App_Context.Bhr_Notification_Status = 0;
 8007f3e:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <Custom_APP_Notification+0x4c>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	709a      	strb	r2, [r3, #2]
      Custom_App_Context.Bhrv_Notification_Status = 0;
 8007f44:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <Custom_APP_Notification+0x4c>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	711a      	strb	r2, [r3, #4]
      break;
 8007f4a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007f4c:	bf00      	nop
}
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	200004c0 	.word	0x200004c0
 8007f5c:	200006cd 	.word	0x200006cd

08007f60 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
  // Initialize the NotifyCharData buffer
  NotifyCharData[0] = 0;
 8007f64:	4b16      	ldr	r3, [pc, #88]	@ (8007fc0 <Custom_APP_Init+0x60>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
  NotifyCharData[1] = 0;
 8007f6a:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <Custom_APP_Init+0x60>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	705a      	strb	r2, [r3, #1]

  // Register the BalodiHeart measurement task
  UTIL_SEQ_RegTask(1 << CFG_TASK_BHW_MEAS_REQ_ID, UTIL_SEQ_RFU, Custom_Bhw_Send_Notification);
 8007f70:	4a14      	ldr	r2, [pc, #80]	@ (8007fc4 <Custom_APP_Init+0x64>)
 8007f72:	2100      	movs	r1, #0
 8007f74:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007f78:	f001 f8fa 	bl	8009170 <UTIL_SEQ_RegTask>

  // Register the fast measurement task
  UTIL_SEQ_RegTask(1 << CFG_TASK_FAST_MEAS_REQ_ID, UTIL_SEQ_RFU, Custom_Fast_Send_Notification);
 8007f7c:	4a12      	ldr	r2, [pc, #72]	@ (8007fc8 <Custom_APP_Init+0x68>)
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8007f84:	f001 f8f4 	bl	8009170 <UTIL_SEQ_RegTask>

  // Create timer for BalodiHeart Measurement
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.TimerMeasurement_Id), hw_ts_Repeated, BhwMeas_PeriodicTask);
 8007f88:	4b10      	ldr	r3, [pc, #64]	@ (8007fcc <Custom_APP_Init+0x6c>)
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	4910      	ldr	r1, [pc, #64]	@ (8007fd0 <Custom_APP_Init+0x70>)
 8007f8e:	2000      	movs	r0, #0
 8007f90:	f7f9 faae 	bl	80014f0 <HW_TS_Create>
  // Create timer for Fast Measurement (0.3s)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(Custom_App_Context.FastTimerMeasurement_Id), hw_ts_Repeated, FastMeas_PeriodicTask);
 8007f94:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd4 <Custom_APP_Init+0x74>)
 8007f96:	2201      	movs	r2, #1
 8007f98:	490f      	ldr	r1, [pc, #60]	@ (8007fd8 <Custom_APP_Init+0x78>)
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f7f9 faa8 	bl	80014f0 <HW_TS_Create>

  // Start the timer to trigger measurements every 0.2 seconds
  HW_TS_Start(Custom_App_Context.TimerMeasurement_Id, SEC_TO_TICKS(0.2));
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <Custom_APP_Init+0x7c>)
 8007fa2:	799b      	ldrb	r3, [r3, #6]
 8007fa4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7f9 fb9f 	bl	80016ec <HW_TS_Start>
  // Start the fast timer to trigger every 5 seconds
  HW_TS_Start(Custom_App_Context.FastTimerMeasurement_Id, SEC_TO_TICKS(5));
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <Custom_APP_Init+0x7c>)
 8007fb0:	79db      	ldrb	r3, [r3, #7]
 8007fb2:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7f9 fb98 	bl	80016ec <HW_TS_Start>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007fbc:	bf00      	nop
}
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200004cc 	.word	0x200004cc
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08008381 	.word	0x08008381
 8007fcc:	0800835d 	.word	0x0800835d
 8007fd0:	200004c6 	.word	0x200004c6
 8007fd4:	0800836f 	.word	0x0800836f
 8007fd8:	200004c7 	.word	0x200004c7
 8007fdc:	200004c0 	.word	0x200004c0

08007fe0 <Custom_Bhw_Send_Notification>:
  /* USER CODE END Bhw_UC_Last*/
  return;
}

void Custom_Bhw_Send_Notification(void) /* Property Notification */
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bhw_NS_1*/
  // Only send notification if it's allowed (client has enabled notifications)
  if (Custom_App_Context.Bhw_Notification_Status == 0)
 8007fea:	4ba9      	ldr	r3, [pc, #676]	@ (8008290 <Custom_Bhw_Send_Notification+0x2b0>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8147 	beq.w	8008282 <Custom_Bhw_Send_Notification+0x2a2>
  {
    return; // Exit if notifications are not enabled
  }

  Count++;
 8007ff4:	4ba7      	ldr	r3, [pc, #668]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	4ba5      	ldr	r3, [pc, #660]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8007ffe:	701a      	strb	r2, [r3, #0]
  ADPD1080_Check_FIFO(&hi2c1);  // fetch new row
 8008000:	48a5      	ldr	r0, [pc, #660]	@ (8008298 <Custom_Bhw_Send_Notification+0x2b8>)
 8008002:	f7f8 fa11 	bl	8000428 <ADPD1080_Check_FIFO>
  if (NewReading_Check==1){
 8008006:	4ba5      	ldr	r3, [pc, #660]	@ (800829c <Custom_Bhw_Send_Notification+0x2bc>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d143      	bne.n	8008096 <Custom_Bhw_Send_Notification+0xb6>
    for (int i = 0; i < 7; i++) {  // 7 values per row
 800800e:	2300      	movs	r3, #0
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	e03d      	b.n	8008090 <Custom_Bhw_Send_Notification+0xb0>
      NotifyCharData[Notifyindex++] = (adpd1080_actual_reading_row_4[i] >> 24) & 0xFF;
 8008014:	4aa2      	ldr	r2, [pc, #648]	@ (80082a0 <Custom_Bhw_Send_Notification+0x2c0>)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800801c:	0e19      	lsrs	r1, r3, #24
 800801e:	4ba1      	ldr	r3, [pc, #644]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	b2d0      	uxtb	r0, r2
 8008026:	4a9f      	ldr	r2, [pc, #636]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 8008028:	7010      	strb	r0, [r2, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	b2c9      	uxtb	r1, r1
 800802e:	4b9e      	ldr	r3, [pc, #632]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008030:	5499      	strb	r1, [r3, r2]
      NotifyCharData[Notifyindex++] = (adpd1080_actual_reading_row_4[i] >> 16) & 0xFF;
 8008032:	4a9b      	ldr	r2, [pc, #620]	@ (80082a0 <Custom_Bhw_Send_Notification+0x2c0>)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803a:	0c19      	lsrs	r1, r3, #16
 800803c:	4b99      	ldr	r3, [pc, #612]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	b2d0      	uxtb	r0, r2
 8008044:	4a97      	ldr	r2, [pc, #604]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 8008046:	7010      	strb	r0, [r2, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	b2c9      	uxtb	r1, r1
 800804c:	4b96      	ldr	r3, [pc, #600]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800804e:	5499      	strb	r1, [r3, r2]
      NotifyCharData[Notifyindex++] = (adpd1080_actual_reading_row_4[i] >> 8) & 0xFF;
 8008050:	4a93      	ldr	r2, [pc, #588]	@ (80082a0 <Custom_Bhw_Send_Notification+0x2c0>)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008058:	0a19      	lsrs	r1, r3, #8
 800805a:	4b92      	ldr	r3, [pc, #584]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	b2d0      	uxtb	r0, r2
 8008062:	4a90      	ldr	r2, [pc, #576]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 8008064:	7010      	strb	r0, [r2, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	b2c9      	uxtb	r1, r1
 800806a:	4b8f      	ldr	r3, [pc, #572]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800806c:	5499      	strb	r1, [r3, r2]
      NotifyCharData[Notifyindex++] = adpd1080_actual_reading_row_4[i] & 0xFF;
 800806e:	4a8c      	ldr	r2, [pc, #560]	@ (80082a0 <Custom_Bhw_Send_Notification+0x2c0>)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008076:	4b8b      	ldr	r3, [pc, #556]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	b2d0      	uxtb	r0, r2
 800807e:	4a89      	ldr	r2, [pc, #548]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 8008080:	7010      	strb	r0, [r2, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	b2c9      	uxtb	r1, r1
 8008086:	4b88      	ldr	r3, [pc, #544]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008088:	5499      	strb	r1, [r3, r2]
    for (int i = 0; i < 7; i++) {  // 7 values per row
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b06      	cmp	r3, #6
 8008094:	ddbe      	ble.n	8008014 <Custom_Bhw_Send_Notification+0x34>
    }
  }
  NewReading_Check = 0;
 8008096:	4b81      	ldr	r3, [pc, #516]	@ (800829c <Custom_Bhw_Send_Notification+0x2bc>)
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]

  if (Notifyindex >= 200) {
 800809c:	4b81      	ldr	r3, [pc, #516]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80080a2:	f240 80e3 	bls.w	800826c <Custom_Bhw_Send_Notification+0x28c>
    Notifyindex = 0;
 80080a6:	4b7f      	ldr	r3, [pc, #508]	@ (80082a4 <Custom_Bhw_Send_Notification+0x2c4>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]
    NotifyCharData[224] = Count;
 80080ac:	4b79      	ldr	r3, [pc, #484]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	4b7d      	ldr	r3, [pc, #500]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80080b2:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
    NotifyCharData[225] = Count++;
 80080b6:	4b77      	ldr	r3, [pc, #476]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	b2d1      	uxtb	r1, r2
 80080be:	4a75      	ldr	r2, [pc, #468]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080c0:	7011      	strb	r1, [r2, #0]
 80080c2:	4a79      	ldr	r2, [pc, #484]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80080c4:	f882 30e1 	strb.w	r3, [r2, #225]	@ 0xe1
    NotifyCharData[226] = Count++;
 80080c8:	4b72      	ldr	r3, [pc, #456]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	b2d1      	uxtb	r1, r2
 80080d0:	4a70      	ldr	r2, [pc, #448]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080d2:	7011      	strb	r1, [r2, #0]
 80080d4:	4a74      	ldr	r2, [pc, #464]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80080d6:	f882 30e2 	strb.w	r3, [r2, #226]	@ 0xe2
    NotifyCharData[227] = Count++;
 80080da:	4b6e      	ldr	r3, [pc, #440]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	b2d1      	uxtb	r1, r2
 80080e2:	4a6c      	ldr	r2, [pc, #432]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080e4:	7011      	strb	r1, [r2, #0]
 80080e6:	4a70      	ldr	r2, [pc, #448]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80080e8:	f882 30e3 	strb.w	r3, [r2, #227]	@ 0xe3
    NotifyCharData[228] = Count++;
 80080ec:	4b69      	ldr	r3, [pc, #420]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	b2d1      	uxtb	r1, r2
 80080f4:	4a67      	ldr	r2, [pc, #412]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80080f6:	7011      	strb	r1, [r2, #0]
 80080f8:	4a6b      	ldr	r2, [pc, #428]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80080fa:	f882 30e4 	strb.w	r3, [r2, #228]	@ 0xe4
    NotifyCharData[229] = Count++;
 80080fe:	4b65      	ldr	r3, [pc, #404]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	b2d1      	uxtb	r1, r2
 8008106:	4a63      	ldr	r2, [pc, #396]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008108:	7011      	strb	r1, [r2, #0]
 800810a:	4a67      	ldr	r2, [pc, #412]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800810c:	f882 30e5 	strb.w	r3, [r2, #229]	@ 0xe5

    NotifyCharData[230] = 55;
 8008110:	4b65      	ldr	r3, [pc, #404]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008112:	2237      	movs	r2, #55	@ 0x37
 8008114:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
    NotifyCharData[231] = 55;
 8008118:	4b63      	ldr	r3, [pc, #396]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800811a:	2237      	movs	r2, #55	@ 0x37
 800811c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
    NotifyCharData[232] = 55;
 8008120:	4b61      	ldr	r3, [pc, #388]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008122:	2237      	movs	r2, #55	@ 0x37
 8008124:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
    NotifyCharData[233] = 55;
 8008128:	4b5f      	ldr	r3, [pc, #380]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800812a:	2237      	movs	r2, #55	@ 0x37
 800812c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
    NotifyCharData[234] = 55;
 8008130:	4b5d      	ldr	r3, [pc, #372]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008132:	2237      	movs	r2, #55	@ 0x37
 8008134:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
    NotifyCharData[235] = 55;
 8008138:	4b5b      	ldr	r3, [pc, #364]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800813a:	2237      	movs	r2, #55	@ 0x37
 800813c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb

    NotifyCharData[236] = 55;
 8008140:	4b59      	ldr	r3, [pc, #356]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008142:	2237      	movs	r2, #55	@ 0x37
 8008144:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
    NotifyCharData[237] = 55;
 8008148:	4b57      	ldr	r3, [pc, #348]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800814a:	2237      	movs	r2, #55	@ 0x37
 800814c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
    NotifyCharData[238] = 55;
 8008150:	4b55      	ldr	r3, [pc, #340]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008152:	2237      	movs	r2, #55	@ 0x37
 8008154:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
    NotifyCharData[239] = 55;
 8008158:	4b53      	ldr	r3, [pc, #332]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800815a:	2237      	movs	r2, #55	@ 0x37
 800815c:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
    NotifyCharData[240] = 55;
 8008160:	4b51      	ldr	r3, [pc, #324]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008162:	2237      	movs	r2, #55	@ 0x37
 8008164:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    NotifyCharData[241] = 55;
 8008168:	4b4f      	ldr	r3, [pc, #316]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800816a:	2237      	movs	r2, #55	@ 0x37
 800816c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1

    NotifyCharData[242] = Count;
 8008170:	4b48      	ldr	r3, [pc, #288]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008172:	781a      	ldrb	r2, [r3, #0]
 8008174:	4b4c      	ldr	r3, [pc, #304]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008176:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
    NotifyCharData[243] = Count++;
 800817a:	4b46      	ldr	r3, [pc, #280]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	b2d1      	uxtb	r1, r2
 8008182:	4a44      	ldr	r2, [pc, #272]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008184:	7011      	strb	r1, [r2, #0]
 8008186:	4a48      	ldr	r2, [pc, #288]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008188:	f882 30f3 	strb.w	r3, [r2, #243]	@ 0xf3
    NotifyCharData[244] = Count++;
 800818c:	4b41      	ldr	r3, [pc, #260]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	b2d1      	uxtb	r1, r2
 8008194:	4a3f      	ldr	r2, [pc, #252]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008196:	7011      	strb	r1, [r2, #0]
 8008198:	4a43      	ldr	r2, [pc, #268]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800819a:	f882 30f4 	strb.w	r3, [r2, #244]	@ 0xf4
    NotifyCharData[245] = Count++;
 800819e:	4b3d      	ldr	r3, [pc, #244]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	b2d1      	uxtb	r1, r2
 80081a6:	4a3b      	ldr	r2, [pc, #236]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081a8:	7011      	strb	r1, [r2, #0]
 80081aa:	4a3f      	ldr	r2, [pc, #252]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80081ac:	f882 30f5 	strb.w	r3, [r2, #245]	@ 0xf5
    NotifyCharData[246] = Count++;
 80081b0:	4b38      	ldr	r3, [pc, #224]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	b2d1      	uxtb	r1, r2
 80081b8:	4a36      	ldr	r2, [pc, #216]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081ba:	7011      	strb	r1, [r2, #0]
 80081bc:	4a3a      	ldr	r2, [pc, #232]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80081be:	f882 30f6 	strb.w	r3, [r2, #246]	@ 0xf6
    NotifyCharData[247] = Count++;
 80081c2:	4b34      	ldr	r3, [pc, #208]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	1c5a      	adds	r2, r3, #1
 80081c8:	b2d1      	uxtb	r1, r2
 80081ca:	4a32      	ldr	r2, [pc, #200]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081cc:	7011      	strb	r1, [r2, #0]
 80081ce:	4a36      	ldr	r2, [pc, #216]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80081d0:	f882 30f7 	strb.w	r3, [r2, #247]	@ 0xf7

    NotifyCharData[248] = Count;
 80081d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081d6:	781a      	ldrb	r2, [r3, #0]
 80081d8:	4b33      	ldr	r3, [pc, #204]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80081da:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
    NotifyCharData[249] = Count++;
 80081de:	4b2d      	ldr	r3, [pc, #180]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	b2d1      	uxtb	r1, r2
 80081e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081e8:	7011      	strb	r1, [r2, #0]
 80081ea:	4a2f      	ldr	r2, [pc, #188]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80081ec:	f882 30f9 	strb.w	r3, [r2, #249]	@ 0xf9
    NotifyCharData[250] = Count++;
 80081f0:	4b28      	ldr	r3, [pc, #160]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	b2d1      	uxtb	r1, r2
 80081f8:	4a26      	ldr	r2, [pc, #152]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 80081fa:	7011      	strb	r1, [r2, #0]
 80081fc:	4a2a      	ldr	r2, [pc, #168]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 80081fe:	f882 30fa 	strb.w	r3, [r2, #250]	@ 0xfa
    NotifyCharData[251] = Count++;
 8008202:	4b24      	ldr	r3, [pc, #144]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	b2d1      	uxtb	r1, r2
 800820a:	4a22      	ldr	r2, [pc, #136]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 800820c:	7011      	strb	r1, [r2, #0]
 800820e:	4a26      	ldr	r2, [pc, #152]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008210:	f882 30fb 	strb.w	r3, [r2, #251]	@ 0xfb
    NotifyCharData[252] = Count++;
 8008214:	4b1f      	ldr	r3, [pc, #124]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	b2d1      	uxtb	r1, r2
 800821c:	4a1d      	ldr	r2, [pc, #116]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 800821e:	7011      	strb	r1, [r2, #0]
 8008220:	4a21      	ldr	r2, [pc, #132]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008222:	f882 30fc 	strb.w	r3, [r2, #252]	@ 0xfc
    NotifyCharData[253] = Count++;
 8008226:	4b1b      	ldr	r3, [pc, #108]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	b2d1      	uxtb	r1, r2
 800822e:	4a19      	ldr	r2, [pc, #100]	@ (8008294 <Custom_Bhw_Send_Notification+0x2b4>)
 8008230:	7011      	strb	r1, [r2, #0]
 8008232:	4a1d      	ldr	r2, [pc, #116]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008234:	f882 30fd 	strb.w	r3, [r2, #253]	@ 0xfd

    NotifyCharData[256] = 55;
 8008238:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800823a:	2237      	movs	r2, #55	@ 0x37
 800823c:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
    NotifyCharData[257] = 55;
 8008240:	4b19      	ldr	r3, [pc, #100]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008242:	2237      	movs	r2, #55	@ 0x37
 8008244:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
    NotifyCharData[258] = 55;
 8008248:	4b17      	ldr	r3, [pc, #92]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800824a:	2237      	movs	r2, #55	@ 0x37
 800824c:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    NotifyCharData[259] = 55;
 8008250:	4b15      	ldr	r3, [pc, #84]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008252:	2237      	movs	r2, #55	@ 0x37
 8008254:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103
    NotifyCharData[260] = 55;
 8008258:	4b13      	ldr	r3, [pc, #76]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 800825a:	2237      	movs	r2, #55	@ 0x37
 800825c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    NotifyCharData[261] = 55;
 8008260:	4b11      	ldr	r3, [pc, #68]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008262:	2237      	movs	r2, #55	@ 0x37
 8008264:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    updateflag = 1;
 8008268:	2301      	movs	r3, #1
 800826a:	71fb      	strb	r3, [r7, #7]
  }
  /* USER CODE END Bhw_NS_1*/

  if (updateflag != 0)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <Custom_Bhw_Send_Notification+0x2a6>
  {
    Custom_STM_App_Update_Char_Ext(Custom_App_Context.ConnectionHandle, CUSTOM_STM_BHW, (uint8_t *)NotifyCharData);
 8008272:	4b07      	ldr	r3, [pc, #28]	@ (8008290 <Custom_Bhw_Send_Notification+0x2b0>)
 8008274:	891b      	ldrh	r3, [r3, #8]
 8008276:	4a0c      	ldr	r2, [pc, #48]	@ (80082a8 <Custom_Bhw_Send_Notification+0x2c8>)
 8008278:	2100      	movs	r1, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fb40 	bl	8008900 <Custom_STM_App_Update_Char_Ext>

  /* USER CODE BEGIN Bhw_NS_Last*/

  /* USER CODE END Bhw_NS_Last*/

  return;
 8008280:	e001      	b.n	8008286 <Custom_Bhw_Send_Notification+0x2a6>
    return; // Exit if notifications are not enabled
 8008282:	bf00      	nop
 8008284:	e000      	b.n	8008288 <Custom_Bhw_Send_Notification+0x2a8>
  return;
 8008286:	bf00      	nop
}
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	200004c0 	.word	0x200004c0
 8008294:	200006cc 	.word	0x200006cc
 8008298:	20000300 	.word	0x20000300
 800829c:	200001fc 	.word	0x200001fc
 80082a0:	200001e0 	.word	0x200001e0
 80082a4:	200006ce 	.word	0x200006ce
 80082a8:	200004cc 	.word	0x200004cc

080082ac <Custom_Bhr_Send_Notification>:
  /* USER CODE END Bhr_UC_Last*/
  return;
}

void Custom_Bhr_Send_Notification(void) /* Property Notification */
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bhr_NS_1*/
  // Only send notification if it's allowed (client has enabled notifications)
  if (Custom_App_Context.Bhr_Notification_Status == 0)
 80082b6:	4b13      	ldr	r3, [pc, #76]	@ (8008304 <Custom_Bhr_Send_Notification+0x58>)
 80082b8:	789b      	ldrb	r3, [r3, #2]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01c      	beq.n	80082f8 <Custom_Bhr_Send_Notification+0x4c>
  {
    return; // Exit if notifications are not enabled
  }

  if (Fall == 1) {
 80082be:	4b12      	ldr	r3, [pc, #72]	@ (8008308 <Custom_Bhr_Send_Notification+0x5c>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d108      	bne.n	80082d8 <Custom_Bhr_Send_Notification+0x2c>
    NotifyCharData[0] = 0xFF; // Fall detected
 80082c6:	4b11      	ldr	r3, [pc, #68]	@ (800830c <Custom_Bhr_Send_Notification+0x60>)
 80082c8:	22ff      	movs	r2, #255	@ 0xff
 80082ca:	701a      	strb	r2, [r3, #0]
    updateflag = 1;
 80082cc:	2301      	movs	r3, #1
 80082ce:	71fb      	strb	r3, [r7, #7]
    Fall = 0;
 80082d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008308 <Custom_Bhr_Send_Notification+0x5c>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e007      	b.n	80082e8 <Custom_Bhr_Send_Notification+0x3c>
  } else {
    NotifyCharData[0] = 0x00; // No fall detected
 80082d8:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <Custom_Bhr_Send_Notification+0x60>)
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
    Fall = 1;
 80082de:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <Custom_Bhr_Send_Notification+0x5c>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
    updateflag = 1;
 80082e4:	2301      	movs	r3, #1
 80082e6:	71fb      	strb	r3, [r7, #7]
  }
  /* USER CODE END Bhr_NS_1*/

  if (updateflag != 0)
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d006      	beq.n	80082fc <Custom_Bhr_Send_Notification+0x50>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_BHR, (uint8_t *)NotifyCharData);
 80082ee:	4907      	ldr	r1, [pc, #28]	@ (800830c <Custom_Bhr_Send_Notification+0x60>)
 80082f0:	2001      	movs	r0, #1
 80082f2:	f000 fab5 	bl	8008860 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Bhr_NS_Last*/

  /* USER CODE END Bhr_NS_Last*/

  return;
 80082f6:	e001      	b.n	80082fc <Custom_Bhr_Send_Notification+0x50>
    return; // Exit if notifications are not enabled
 80082f8:	bf00      	nop
 80082fa:	e000      	b.n	80082fe <Custom_Bhr_Send_Notification+0x52>
  return;
 80082fc:	bf00      	nop
}
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	200004c0 	.word	0x200004c0
 8008308:	200006cf 	.word	0x200006cf
 800830c:	200004cc 	.word	0x200004cc

08008310 <Custom_Bhrv_Send_Notification>:
  /* USER CODE END Bhrv_UC_Last*/
  return;
}

void Custom_Bhrv_Send_Notification(void) /* Property Notification */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Bhrv_NS_1*/
  // Only send notification if it's allowed (client has enabled notifications)
  if (Custom_App_Context.Bhrv_Notification_Status == 0)
 800831a:	4b0d      	ldr	r3, [pc, #52]	@ (8008350 <Custom_Bhrv_Send_Notification+0x40>)
 800831c:	791b      	ldrb	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <Custom_Bhrv_Send_Notification+0x34>
  {
    return; // Exit if notifications are not enabled
  }

  // Use different data for BHRV to differentiate
  NotifyCharData[0] = 0xAA; // HRV identification value
 8008322:	4b0c      	ldr	r3, [pc, #48]	@ (8008354 <Custom_Bhrv_Send_Notification+0x44>)
 8008324:	22aa      	movs	r2, #170	@ 0xaa
 8008326:	701a      	strb	r2, [r3, #0]
  NotifyCharData[1] = Count;
 8008328:	4b0b      	ldr	r3, [pc, #44]	@ (8008358 <Custom_Bhrv_Send_Notification+0x48>)
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <Custom_Bhrv_Send_Notification+0x44>)
 800832e:	705a      	strb	r2, [r3, #1]
  updateflag = 1;
 8008330:	2301      	movs	r3, #1
 8008332:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Bhrv_NS_1*/

  if (updateflag != 0)
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d006      	beq.n	8008348 <Custom_Bhrv_Send_Notification+0x38>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_BHRV, (uint8_t *)NotifyCharData);
 800833a:	4906      	ldr	r1, [pc, #24]	@ (8008354 <Custom_Bhrv_Send_Notification+0x44>)
 800833c:	2002      	movs	r0, #2
 800833e:	f000 fa8f 	bl	8008860 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Bhrv_NS_Last*/

  /* USER CODE END Bhrv_NS_Last*/

  return;
 8008342:	e001      	b.n	8008348 <Custom_Bhrv_Send_Notification+0x38>
    return; // Exit if notifications are not enabled
 8008344:	bf00      	nop
 8008346:	e000      	b.n	800834a <Custom_Bhrv_Send_Notification+0x3a>
  return;
 8008348:	bf00      	nop
}
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	200004c0 	.word	0x200004c0
 8008354:	200004cc 	.word	0x200004cc
 8008358:	200006cc 	.word	0x200006cc

0800835c <BhwMeas_PeriodicTask>:
 * @brief  Periodic task triggered by timer that requests the measurement task
 * @param  None
 * @retval None
 */
static void BhwMeas_PeriodicTask(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  // Request execution of the measurement task
  UTIL_SEQ_SetTask(1 << CFG_TASK_BHW_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8008360:	2100      	movs	r1, #0
 8008362:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008366:	f000 ff25 	bl	80091b4 <UTIL_SEQ_SetTask>
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}

0800836e <FastMeas_PeriodicTask>:
 * @brief  Fast periodic task triggered every 5 seconds
 * @param  None
 * @retval None
 */
static void FastMeas_PeriodicTask(void)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	af00      	add	r7, sp, #0
  // Request execution of the fast measurement task
  UTIL_SEQ_SetTask(1 << CFG_TASK_FAST_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 8008372:	2100      	movs	r1, #0
 8008374:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8008378:	f000 ff1c 	bl	80091b4 <UTIL_SEQ_SetTask>
}
 800837c:	bf00      	nop
 800837e:	bd80      	pop	{r7, pc}

08008380 <Custom_Fast_Send_Notification>:
 * @brief  Fast measurement task that handles both BHR and BHRV notifications
 * @param  None
 * @retval None
 */
static void Custom_Fast_Send_Notification(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  // Send notifications for both BHR and BHRV if enabled
  if (Custom_App_Context.Bhr_Notification_Status)
 8008384:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <Custom_Fast_Send_Notification+0x20>)
 8008386:	789b      	ldrb	r3, [r3, #2]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <Custom_Fast_Send_Notification+0x10>
  {
    Custom_Bhr_Send_Notification();
 800838c:	f7ff ff8e 	bl	80082ac <Custom_Bhr_Send_Notification>
  }
  
  if (Custom_App_Context.Bhrv_Notification_Status)
 8008390:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <Custom_Fast_Send_Notification+0x20>)
 8008392:	791b      	ldrb	r3, [r3, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <Custom_Fast_Send_Notification+0x1c>
  {
    Custom_Bhrv_Send_Notification();
 8008398:	f7ff ffba 	bl	8008310 <Custom_Bhrv_Send_Notification>
  }
}
 800839c:	bf00      	nop
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	200004c0 	.word	0x200004c0

080083a4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08e      	sub	sp, #56	@ 0x38
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3301      	adds	r3, #1
 80083b6:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	2bff      	cmp	r3, #255	@ 0xff
 80083be:	f040 8197 	bne.w	80086f0 <Custom_STM_Event_Handler+0x34c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	3302      	adds	r3, #2
 80083c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 80083c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80083d2:	2b1a      	cmp	r3, #26
 80083d4:	f200 8184 	bhi.w	80086e0 <Custom_STM_Event_Handler+0x33c>
 80083d8:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <Custom_STM_Event_Handler+0x3c>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	0800844d 	.word	0x0800844d
 80083e4:	080086e1 	.word	0x080086e1
 80083e8:	080086e1 	.word	0x080086e1
 80083ec:	080086e1 	.word	0x080086e1
 80083f0:	080086e1 	.word	0x080086e1
 80083f4:	080086e1 	.word	0x080086e1
 80083f8:	080086e1 	.word	0x080086e1
 80083fc:	080086e1 	.word	0x080086e1
 8008400:	080086e1 	.word	0x080086e1
 8008404:	080086e1 	.word	0x080086e1
 8008408:	080086e1 	.word	0x080086e1
 800840c:	080086e1 	.word	0x080086e1
 8008410:	080086e1 	.word	0x080086e1
 8008414:	080086e1 	.word	0x080086e1
 8008418:	080086e1 	.word	0x080086e1
 800841c:	080086e1 	.word	0x080086e1
 8008420:	080086e1 	.word	0x080086e1
 8008424:	080086e1 	.word	0x080086e1
 8008428:	0800866f 	.word	0x0800866f
 800842c:	080085f7 	.word	0x080085f7
 8008430:	080086e1 	.word	0x080086e1
 8008434:	080086e1 	.word	0x080086e1
 8008438:	080086e1 	.word	0x080086e1
 800843c:	080086e1 	.word	0x080086e1
 8008440:	080086e1 	.word	0x080086e1
 8008444:	080086e1 	.word	0x080086e1
 8008448:	080086c3 	.word	0x080086c3
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800844c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844e:	3302      	adds	r3, #2
 8008450:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	885b      	ldrh	r3, [r3, #2]
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	4ba9      	ldr	r3, [pc, #676]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	3302      	adds	r3, #2
 8008460:	429a      	cmp	r2, r3
 8008462:	d12d      	bne.n	80084c0 <Custom_STM_Event_Handler+0x11c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008464:	2301      	movs	r3, #1
 8008466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */

            switch (attribute_modified->Attr_Data[0])
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	7a1b      	ldrb	r3, [r3, #8]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d01e      	beq.n	80084b0 <Custom_STM_Event_Handler+0x10c>
 8008472:	2b02      	cmp	r3, #2
 8008474:	f300 80b9 	bgt.w	80085ea <Custom_STM_Event_Handler+0x246>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <Custom_STM_Event_Handler+0xde>
 800847c:	2b01      	cmp	r3, #1
 800847e:	d00f      	beq.n	80084a0 <Custom_STM_Event_Handler+0xfc>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
                break;
 8008480:	e0b3      	b.n	80085ea <Custom_STM_Event_Handler+0x246>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_NOTIFY_DISABLED_EVT;
 8008482:	2304      	movs	r3, #4
 8008484:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008486:	f107 0308 	add.w	r3, r7, #8
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff fcdc 	bl	8007e48 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_INDICATE_DISABLED_EVT;
 8008490:	2306      	movs	r3, #6
 8008492:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff fcd5 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 800849e:	e0a9      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_NOTIFY_ENABLED_EVT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fccd 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 80084ae:	e0a1      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHW_INDICATE_ENABLED_EVT;
 80084b0:	2305      	movs	r3, #5
 80084b2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80084b4:	f107 0308 	add.w	r3, r7, #8
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff fcc5 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 80084be:	e099      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	885b      	ldrh	r3, [r3, #2]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b8d      	ldr	r3, [pc, #564]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 80084ca:	889b      	ldrh	r3, [r3, #4]
 80084cc:	3302      	adds	r3, #2
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d12d      	bne.n	800852e <Custom_STM_Event_Handler+0x18a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80084d2:	2301      	movs	r3, #1
 80084d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */

            switch (attribute_modified->Attr_Data[0])
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	7a1b      	ldrb	r3, [r3, #8]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d01e      	beq.n	800851e <Custom_STM_Event_Handler+0x17a>
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	f300 8084 	bgt.w	80085ee <Custom_STM_Event_Handler+0x24a>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <Custom_STM_Event_Handler+0x14c>
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d00f      	beq.n	800850e <Custom_STM_Event_Handler+0x16a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
                break;
 80084ee:	e07e      	b.n	80085ee <Custom_STM_Event_Handler+0x24a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_NOTIFY_DISABLED_EVT;
 80084f0:	230b      	movs	r3, #11
 80084f2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff fca5 	bl	8007e48 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_INDICATE_DISABLED_EVT;
 80084fe:	230d      	movs	r3, #13
 8008500:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff fc9e 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 800850c:	e072      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_NOTIFY_ENABLED_EVT;
 800850e:	230a      	movs	r3, #10
 8008510:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	4618      	mov	r0, r3
 8008518:	f7ff fc96 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 800851c:	e06a      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHR_INDICATE_ENABLED_EVT;
 800851e:	230c      	movs	r3, #12
 8008520:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008522:	f107 0308 	add.w	r3, r7, #8
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff fc8e 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 800852c:	e062      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	b29b      	uxth	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	4b72      	ldr	r3, [pc, #456]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	3302      	adds	r3, #2
 800853c:	429a      	cmp	r2, r3
 800853e:	d12c      	bne.n	800859a <Custom_STM_Event_Handler+0x1f6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_3 */

            switch (attribute_modified->Attr_Data[0])
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	7a1b      	ldrb	r3, [r3, #8]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d01d      	beq.n	800858a <Custom_STM_Event_Handler+0x1e6>
 800854e:	2b02      	cmp	r3, #2
 8008550:	dc4f      	bgt.n	80085f2 <Custom_STM_Event_Handler+0x24e>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <Custom_STM_Event_Handler+0x1b8>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d00f      	beq.n	800857a <Custom_STM_Event_Handler+0x1d6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_3_default */
                break;
 800855a:	e04a      	b.n	80085f2 <Custom_STM_Event_Handler+0x24e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_NOTIFY_DISABLED_EVT;
 800855c:	2312      	movs	r3, #18
 800855e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008560:	f107 0308 	add.w	r3, r7, #8
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff fc6f 	bl	8007e48 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_INDICATE_DISABLED_EVT;
 800856a:	2314      	movs	r3, #20
 800856c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800856e:	f107 0308 	add.w	r3, r7, #8
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fc68 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 8008578:	e03c      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_NOTIFY_ENABLED_EVT;
 800857a:	2311      	movs	r3, #17
 800857c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fc60 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 8008588:	e034      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BHRV_INDICATE_ENABLED_EVT;
 800858a:	2313      	movs	r3, #19
 800858c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800858e:	f107 0308 	add.w	r3, r7, #8
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fc58 	bl	8007e48 <Custom_STM_App_Notification>
                break;
 8008598:	e02c      	b.n	80085f4 <Custom_STM_Event_Handler+0x250>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	4b57      	ldr	r3, [pc, #348]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	3301      	adds	r3, #1
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d103      	bne.n	80085b4 <Custom_STM_Event_Handler+0x210>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80085b2:	e097      	b.n	80086e4 <Custom_STM_Event_Handler+0x340>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	885b      	ldrh	r3, [r3, #2]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	4b50      	ldr	r3, [pc, #320]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 80085be:	889b      	ldrh	r3, [r3, #4]
 80085c0:	3301      	adds	r3, #1
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d103      	bne.n	80085ce <Custom_STM_Event_Handler+0x22a>
            return_value = SVCCTL_EvtAckFlowEnable;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 80085cc:	e08a      	b.n	80086e4 <Custom_STM_Event_Handler+0x340>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	885b      	ldrh	r3, [r3, #2]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 80085d8:	88db      	ldrh	r3, [r3, #6]
 80085da:	3301      	adds	r3, #1
 80085dc:	429a      	cmp	r2, r3
 80085de:	f040 8081 	bne.w	80086e4 <Custom_STM_Event_Handler+0x340>
            return_value = SVCCTL_EvtAckFlowEnable;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 80085e8:	e07c      	b.n	80086e4 <Custom_STM_Event_Handler+0x340>
                break;
 80085ea:	bf00      	nop
 80085ec:	e07a      	b.n	80086e4 <Custom_STM_Event_Handler+0x340>
                break;
 80085ee:	bf00      	nop
 80085f0:	e078      	b.n	80086e4 <Custom_STM_Event_Handler+0x340>
                break;
 80085f2:	bf00      	nop
          break;
 80085f4:	e076      	b.n	80086e4 <Custom_STM_Event_Handler+0x340>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	3302      	adds	r3, #2
 80085fa:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	b29b      	uxth	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	4b3e      	ldr	r3, [pc, #248]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 8008606:	885b      	ldrh	r3, [r3, #2]
 8008608:	3301      	adds	r3, #1
 800860a:	429a      	cmp	r2, r3
 800860c:	d109      	bne.n	8008622 <Custom_STM_Event_Handler+0x27e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b29b      	uxth	r3, r3
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fdc2 	bl	80061a4 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8008620:	e062      	b.n	80086e8 <Custom_STM_Event_Handler+0x344>
          else if (read_req->Attribute_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	885b      	ldrh	r3, [r3, #2]
 8008626:	b29b      	uxth	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	4b35      	ldr	r3, [pc, #212]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 800862c:	889b      	ldrh	r3, [r3, #4]
 800862e:	3301      	adds	r3, #1
 8008630:	429a      	cmp	r2, r3
 8008632:	d109      	bne.n	8008648 <Custom_STM_Event_Handler+0x2a4>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd fdaf 	bl	80061a4 <aci_gatt_allow_read>
          break;
 8008646:	e04f      	b.n	80086e8 <Custom_STM_Event_Handler+0x344>
          else if (read_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864a:	885b      	ldrh	r3, [r3, #2]
 800864c:	b29b      	uxth	r3, r3
 800864e:	461a      	mov	r2, r3
 8008650:	4b2b      	ldr	r3, [pc, #172]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 8008652:	88db      	ldrh	r3, [r3, #6]
 8008654:	3301      	adds	r3, #1
 8008656:	429a      	cmp	r2, r3
 8008658:	d146      	bne.n	80086e8 <Custom_STM_Event_Handler+0x344>
            return_value = SVCCTL_EvtAckFlowEnable;
 800865a:	2301      	movs	r3, #1
 800865c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            aci_gatt_allow_read(read_req->Connection_Handle);
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd fd9c 	bl	80061a4 <aci_gatt_allow_read>
          break;
 800866c:	e03c      	b.n	80086e8 <Custom_STM_Event_Handler+0x344>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800866e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008670:	3302      	adds	r3, #2
 8008672:	623b      	str	r3, [r7, #32]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhwHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	885b      	ldrh	r3, [r3, #2]
 8008678:	b29b      	uxth	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	4b20      	ldr	r3, [pc, #128]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 800867e:	885b      	ldrh	r3, [r3, #2]
 8008680:	3301      	adds	r3, #1
 8008682:	429a      	cmp	r2, r3
 8008684:	d103      	bne.n	800868e <Custom_STM_Event_Handler+0x2ea>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /*if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800868c:	e02e      	b.n	80086ec <Custom_STM_Event_Handler+0x348>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhrHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	b29b      	uxth	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	4b1a      	ldr	r3, [pc, #104]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	3301      	adds	r3, #1
 800869c:	429a      	cmp	r2, r3
 800869e:	d103      	bne.n	80086a8 <Custom_STM_Event_Handler+0x304>
            return_value = SVCCTL_EvtAckFlowEnable;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 80086a6:	e021      	b.n	80086ec <Custom_STM_Event_Handler+0x348>
          else if (write_perm_req->Attribute_Handle == (CustomContext.CustomBhrvHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	885b      	ldrh	r3, [r3, #2]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	4b13      	ldr	r3, [pc, #76]	@ (8008700 <Custom_STM_Event_Handler+0x35c>)
 80086b2:	88db      	ldrh	r3, [r3, #6]
 80086b4:	3301      	adds	r3, #1
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d118      	bne.n	80086ec <Custom_STM_Event_Handler+0x348>
            return_value = SVCCTL_EvtAckFlowEnable;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          break;
 80086c0:	e014      	b.n	80086ec <Custom_STM_Event_Handler+0x348>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	3302      	adds	r3, #2
 80086c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80086c8:	2315      	movs	r3, #21
 80086ca:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80086d4:	f107 0308 	add.w	r3, r7, #8
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fbb5 	bl	8007e48 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80086de:	e006      	b.n	80086ee <Custom_STM_Event_Handler+0x34a>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80086e0:	bf00      	nop
 80086e2:	e006      	b.n	80086f2 <Custom_STM_Event_Handler+0x34e>
          break;
 80086e4:	bf00      	nop
 80086e6:	e004      	b.n	80086f2 <Custom_STM_Event_Handler+0x34e>
          break;
 80086e8:	bf00      	nop
 80086ea:	e002      	b.n	80086f2 <Custom_STM_Event_Handler+0x34e>
          break;
 80086ec:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80086ee:	e000      	b.n	80086f2 <Custom_STM_Event_Handler+0x34e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80086f0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80086f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 80086f6:	4618      	mov	r0, r3
 80086f8:	3738      	adds	r7, #56	@ 0x38
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200006d0 	.word	0x200006d0

08008704 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08c      	sub	sp, #48	@ 0x30
 8008708:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800870a:	2392      	movs	r3, #146	@ 0x92
 800870c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800870e:	484c      	ldr	r0, [pc, #304]	@ (8008840 <SVCCTL_InitCustomSvc+0x13c>)
 8008710:	f7fe f910 	bl	8006934 <SVCCTL_RegisterSvcHandler>
   *                              = 10
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 10;
 8008714:	230a      	movs	r3, #10
 8008716:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x0001;
 8008718:	2301      	movs	r3, #1
 800871a:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800871c:	7dbb      	ldrb	r3, [r7, #22]
 800871e:	1d39      	adds	r1, r7, #4
 8008720:	4a48      	ldr	r2, [pc, #288]	@ (8008844 <SVCCTL_InitCustomSvc+0x140>)
 8008722:	9200      	str	r2, [sp, #0]
 8008724:	2201      	movs	r2, #1
 8008726:	2001      	movs	r0, #1
 8008728:	f7fd fa60 	bl	8005bec <aci_gatt_add_service>
 800872c:	4603      	mov	r3, r0
 800872e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  BalodiHeartWave
   */
  uuid.Char_UUID_16 = 0x0010;
 8008730:	2310      	movs	r3, #16
 8008732:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomBhHdle,
 8008734:	4b43      	ldr	r3, [pc, #268]	@ (8008844 <SVCCTL_InitCustomSvc+0x140>)
 8008736:	8818      	ldrh	r0, [r3, #0]
 8008738:	4b43      	ldr	r3, [pc, #268]	@ (8008848 <SVCCTL_InitCustomSvc+0x144>)
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	1d3a      	adds	r2, r7, #4
 800873e:	4943      	ldr	r1, [pc, #268]	@ (800884c <SVCCTL_InitCustomSvc+0x148>)
 8008740:	9105      	str	r1, [sp, #20]
 8008742:	2100      	movs	r1, #0
 8008744:	9104      	str	r1, [sp, #16]
 8008746:	2110      	movs	r1, #16
 8008748:	9103      	str	r1, [sp, #12]
 800874a:	2107      	movs	r1, #7
 800874c:	9102      	str	r1, [sp, #8]
 800874e:	2100      	movs	r1, #0
 8008750:	9101      	str	r1, [sp, #4]
 8008752:	213e      	movs	r1, #62	@ 0x3e
 8008754:	9100      	str	r1, [sp, #0]
 8008756:	2101      	movs	r1, #1
 8008758:	f7fd fb1e 	bl	8005d98 <aci_gatt_add_char>
 800875c:	4603      	mov	r3, r0
 800875e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  BalodiHeartRate
   */
  COPY_BALODIHEARTRATE_UUID(uuid.Char_UUID_128);
 8008760:	2319      	movs	r3, #25
 8008762:	713b      	strb	r3, [r7, #4]
 8008764:	23ed      	movs	r3, #237	@ 0xed
 8008766:	717b      	strb	r3, [r7, #5]
 8008768:	2382      	movs	r3, #130	@ 0x82
 800876a:	71bb      	strb	r3, [r7, #6]
 800876c:	23ae      	movs	r3, #174	@ 0xae
 800876e:	71fb      	strb	r3, [r7, #7]
 8008770:	23ed      	movs	r3, #237	@ 0xed
 8008772:	723b      	strb	r3, [r7, #8]
 8008774:	2321      	movs	r3, #33	@ 0x21
 8008776:	727b      	strb	r3, [r7, #9]
 8008778:	234c      	movs	r3, #76	@ 0x4c
 800877a:	72bb      	strb	r3, [r7, #10]
 800877c:	239d      	movs	r3, #157	@ 0x9d
 800877e:	72fb      	strb	r3, [r7, #11]
 8008780:	2341      	movs	r3, #65	@ 0x41
 8008782:	733b      	strb	r3, [r7, #12]
 8008784:	2345      	movs	r3, #69	@ 0x45
 8008786:	737b      	strb	r3, [r7, #13]
 8008788:	2322      	movs	r3, #34	@ 0x22
 800878a:	73bb      	strb	r3, [r7, #14]
 800878c:	238e      	movs	r3, #142	@ 0x8e
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	2301      	movs	r3, #1
 8008792:	743b      	strb	r3, [r7, #16]
 8008794:	2300      	movs	r3, #0
 8008796:	747b      	strb	r3, [r7, #17]
 8008798:	2300      	movs	r3, #0
 800879a:	74bb      	strb	r3, [r7, #18]
 800879c:	2300      	movs	r3, #0
 800879e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBhHdle,
 80087a0:	4b28      	ldr	r3, [pc, #160]	@ (8008844 <SVCCTL_InitCustomSvc+0x140>)
 80087a2:	8818      	ldrh	r0, [r3, #0]
 80087a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008850 <SVCCTL_InitCustomSvc+0x14c>)
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	1d3a      	adds	r2, r7, #4
 80087aa:	492a      	ldr	r1, [pc, #168]	@ (8008854 <SVCCTL_InitCustomSvc+0x150>)
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	2100      	movs	r1, #0
 80087b0:	9104      	str	r1, [sp, #16]
 80087b2:	2110      	movs	r1, #16
 80087b4:	9103      	str	r1, [sp, #12]
 80087b6:	2107      	movs	r1, #7
 80087b8:	9102      	str	r1, [sp, #8]
 80087ba:	2100      	movs	r1, #0
 80087bc:	9101      	str	r1, [sp, #4]
 80087be:	213e      	movs	r1, #62	@ 0x3e
 80087c0:	9100      	str	r1, [sp, #0]
 80087c2:	2102      	movs	r1, #2
 80087c4:	f7fd fae8 	bl	8005d98 <aci_gatt_add_char>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  BalodiHRV
   */
  COPY_BALODIHRV_UUID(uuid.Char_UUID_128);
 80087cc:	2319      	movs	r3, #25
 80087ce:	713b      	strb	r3, [r7, #4]
 80087d0:	23ed      	movs	r3, #237	@ 0xed
 80087d2:	717b      	strb	r3, [r7, #5]
 80087d4:	2382      	movs	r3, #130	@ 0x82
 80087d6:	71bb      	strb	r3, [r7, #6]
 80087d8:	23ae      	movs	r3, #174	@ 0xae
 80087da:	71fb      	strb	r3, [r7, #7]
 80087dc:	23ed      	movs	r3, #237	@ 0xed
 80087de:	723b      	strb	r3, [r7, #8]
 80087e0:	2321      	movs	r3, #33	@ 0x21
 80087e2:	727b      	strb	r3, [r7, #9]
 80087e4:	234c      	movs	r3, #76	@ 0x4c
 80087e6:	72bb      	strb	r3, [r7, #10]
 80087e8:	239d      	movs	r3, #157	@ 0x9d
 80087ea:	72fb      	strb	r3, [r7, #11]
 80087ec:	2341      	movs	r3, #65	@ 0x41
 80087ee:	733b      	strb	r3, [r7, #12]
 80087f0:	2345      	movs	r3, #69	@ 0x45
 80087f2:	737b      	strb	r3, [r7, #13]
 80087f4:	2322      	movs	r3, #34	@ 0x22
 80087f6:	73bb      	strb	r3, [r7, #14]
 80087f8:	238e      	movs	r3, #142	@ 0x8e
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	2302      	movs	r3, #2
 80087fe:	743b      	strb	r3, [r7, #16]
 8008800:	2300      	movs	r3, #0
 8008802:	747b      	strb	r3, [r7, #17]
 8008804:	2300      	movs	r3, #0
 8008806:	74bb      	strb	r3, [r7, #18]
 8008808:	2300      	movs	r3, #0
 800880a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBhHdle,
 800880c:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <SVCCTL_InitCustomSvc+0x140>)
 800880e:	8818      	ldrh	r0, [r3, #0]
 8008810:	4b11      	ldr	r3, [pc, #68]	@ (8008858 <SVCCTL_InitCustomSvc+0x154>)
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	1d3a      	adds	r2, r7, #4
 8008816:	4911      	ldr	r1, [pc, #68]	@ (800885c <SVCCTL_InitCustomSvc+0x158>)
 8008818:	9105      	str	r1, [sp, #20]
 800881a:	2100      	movs	r1, #0
 800881c:	9104      	str	r1, [sp, #16]
 800881e:	2110      	movs	r1, #16
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	2107      	movs	r1, #7
 8008824:	9102      	str	r1, [sp, #8]
 8008826:	2100      	movs	r1, #0
 8008828:	9101      	str	r1, [sp, #4]
 800882a:	213e      	movs	r1, #62	@ 0x3e
 800882c:	9100      	str	r1, [sp, #0]
 800882e:	2102      	movs	r1, #2
 8008830:	f7fd fab2 	bl	8005d98 <aci_gatt_add_char>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008838:	bf00      	nop
}
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	080083a5 	.word	0x080083a5
 8008844:	200006d0 	.word	0x200006d0
 8008848:	20000066 	.word	0x20000066
 800884c:	200006d2 	.word	0x200006d2
 8008850:	20000068 	.word	0x20000068
 8008854:	200006d4 	.word	0x200006d4
 8008858:	2000006a 	.word	0x2000006a
 800885c:	200006d6 	.word	0x200006d6

08008860 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af02      	add	r7, sp, #8
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800886c:	2392      	movs	r3, #146	@ 0x92
 800886e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d026      	beq.n	80088c4 <Custom_STM_App_Update_Char+0x64>
 8008876:	2b02      	cmp	r3, #2
 8008878:	dc34      	bgt.n	80088e4 <Custom_STM_App_Update_Char+0x84>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <Custom_STM_App_Update_Char+0x24>
 800887e:	2b01      	cmp	r3, #1
 8008880:	d010      	beq.n	80088a4 <Custom_STM_App_Update_Char+0x44>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;

    default:
      break;
 8008882:	e02f      	b.n	80088e4 <Custom_STM_App_Update_Char+0x84>
      ret = aci_gatt_update_char_value(CustomContext.CustomBhHdle,
 8008884:	4b1a      	ldr	r3, [pc, #104]	@ (80088f0 <Custom_STM_App_Update_Char+0x90>)
 8008886:	8818      	ldrh	r0, [r3, #0]
 8008888:	4b19      	ldr	r3, [pc, #100]	@ (80088f0 <Custom_STM_App_Update_Char+0x90>)
 800888a:	8859      	ldrh	r1, [r3, #2]
 800888c:	4b19      	ldr	r3, [pc, #100]	@ (80088f4 <Custom_STM_App_Update_Char+0x94>)
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b2da      	uxtb	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	2200      	movs	r2, #0
 800889a:	f7fd fb85 	bl	8005fa8 <aci_gatt_update_char_value>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e020      	b.n	80088e6 <Custom_STM_App_Update_Char+0x86>
      ret = aci_gatt_update_char_value(CustomContext.CustomBhHdle,
 80088a4:	4b12      	ldr	r3, [pc, #72]	@ (80088f0 <Custom_STM_App_Update_Char+0x90>)
 80088a6:	8818      	ldrh	r0, [r3, #0]
 80088a8:	4b11      	ldr	r3, [pc, #68]	@ (80088f0 <Custom_STM_App_Update_Char+0x90>)
 80088aa:	8899      	ldrh	r1, [r3, #4]
 80088ac:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <Custom_STM_App_Update_Char+0x98>)
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	2200      	movs	r2, #0
 80088ba:	f7fd fb75 	bl	8005fa8 <aci_gatt_update_char_value>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]
      break;
 80088c2:	e010      	b.n	80088e6 <Custom_STM_App_Update_Char+0x86>
      ret = aci_gatt_update_char_value(CustomContext.CustomBhHdle,
 80088c4:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <Custom_STM_App_Update_Char+0x90>)
 80088c6:	8818      	ldrh	r0, [r3, #0]
 80088c8:	4b09      	ldr	r3, [pc, #36]	@ (80088f0 <Custom_STM_App_Update_Char+0x90>)
 80088ca:	88d9      	ldrh	r1, [r3, #6]
 80088cc:	4b0b      	ldr	r3, [pc, #44]	@ (80088fc <Custom_STM_App_Update_Char+0x9c>)
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	4613      	mov	r3, r2
 80088d8:	2200      	movs	r2, #0
 80088da:	f7fd fb65 	bl	8005fa8 <aci_gatt_update_char_value>
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]
      break;
 80088e2:	e000      	b.n	80088e6 <Custom_STM_App_Update_Char+0x86>
      break;
 80088e4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200006d0 	.word	0x200006d0
 80088f4:	20000066 	.word	0x20000066
 80088f8:	20000068 	.word	0x20000068
 80088fc:	2000006a 	.word	0x2000006a

08008900 <Custom_STM_App_Update_Char_Ext>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pPayload: Characteristic value
 *
 */
tBleStatus Custom_STM_App_Update_Char_Ext(uint16_t Connection_Handle, Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8008900:	b590      	push	{r4, r7, lr}
 8008902:	b087      	sub	sp, #28
 8008904:	af02      	add	r7, sp, #8
 8008906:	4603      	mov	r3, r0
 8008908:	603a      	str	r2, [r7, #0]
 800890a:	80fb      	strh	r3, [r7, #6]
 800890c:	460b      	mov	r3, r1
 800890e:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008910:	2392      	movs	r3, #146	@ 0x92
 8008912:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_1 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_1 */

  switch (CharOpcode)
 8008914:	797b      	ldrb	r3, [r7, #5]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d020      	beq.n	800895c <Custom_STM_App_Update_Char_Ext+0x5c>
 800891a:	2b02      	cmp	r3, #2
 800891c:	dc2b      	bgt.n	8008976 <Custom_STM_App_Update_Char_Ext+0x76>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <Custom_STM_App_Update_Char_Ext+0x28>
 8008922:	2b01      	cmp	r3, #1
 8008924:	d00d      	beq.n	8008942 <Custom_STM_App_Update_Char_Ext+0x42>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhrvHdle, SizeBhrv, pPayload);

      break;

    default:
      break;
 8008926:	e026      	b.n	8008976 <Custom_STM_App_Update_Char_Ext+0x76>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhwHdle, SizeBhw, pPayload);
 8008928:	4b16      	ldr	r3, [pc, #88]	@ (8008984 <Custom_STM_App_Update_Char_Ext+0x84>)
 800892a:	8819      	ldrh	r1, [r3, #0]
 800892c:	4b15      	ldr	r3, [pc, #84]	@ (8008984 <Custom_STM_App_Update_Char_Ext+0x84>)
 800892e:	885a      	ldrh	r2, [r3, #2]
 8008930:	4b15      	ldr	r3, [pc, #84]	@ (8008988 <Custom_STM_App_Update_Char_Ext+0x88>)
 8008932:	881c      	ldrh	r4, [r3, #0]
 8008934:	88f8      	ldrh	r0, [r7, #6]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4623      	mov	r3, r4
 800893c:	f000 f82a 	bl	8008994 <Generic_STM_App_Update_Char_Ext>
      break;
 8008940:	e01a      	b.n	8008978 <Custom_STM_App_Update_Char_Ext+0x78>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhrHdle, SizeBhr, pPayload);
 8008942:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <Custom_STM_App_Update_Char_Ext+0x84>)
 8008944:	8819      	ldrh	r1, [r3, #0]
 8008946:	4b0f      	ldr	r3, [pc, #60]	@ (8008984 <Custom_STM_App_Update_Char_Ext+0x84>)
 8008948:	889a      	ldrh	r2, [r3, #4]
 800894a:	4b10      	ldr	r3, [pc, #64]	@ (800898c <Custom_STM_App_Update_Char_Ext+0x8c>)
 800894c:	881c      	ldrh	r4, [r3, #0]
 800894e:	88f8      	ldrh	r0, [r7, #6]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	4623      	mov	r3, r4
 8008956:	f000 f81d 	bl	8008994 <Generic_STM_App_Update_Char_Ext>
      break;
 800895a:	e00d      	b.n	8008978 <Custom_STM_App_Update_Char_Ext+0x78>
	  Generic_STM_App_Update_Char_Ext(Connection_Handle, CustomContext.CustomBhHdle, CustomContext.CustomBhrvHdle, SizeBhrv, pPayload);
 800895c:	4b09      	ldr	r3, [pc, #36]	@ (8008984 <Custom_STM_App_Update_Char_Ext+0x84>)
 800895e:	8819      	ldrh	r1, [r3, #0]
 8008960:	4b08      	ldr	r3, [pc, #32]	@ (8008984 <Custom_STM_App_Update_Char_Ext+0x84>)
 8008962:	88da      	ldrh	r2, [r3, #6]
 8008964:	4b0a      	ldr	r3, [pc, #40]	@ (8008990 <Custom_STM_App_Update_Char_Ext+0x90>)
 8008966:	881c      	ldrh	r4, [r3, #0]
 8008968:	88f8      	ldrh	r0, [r7, #6]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	4623      	mov	r3, r4
 8008970:	f000 f810 	bl	8008994 <Generic_STM_App_Update_Char_Ext>
      break;
 8008974:	e000      	b.n	8008978 <Custom_STM_App_Update_Char_Ext+0x78>
      break;
 8008976:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_2 */

  /* USER CODE END Custom_STM_App_Update_Char_Ext_2 */

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	bd90      	pop	{r4, r7, pc}
 8008982:	bf00      	nop
 8008984:	200006d0 	.word	0x200006d0
 8008988:	20000066 	.word	0x20000066
 800898c:	20000068 	.word	0x20000068
 8008990:	2000006a 	.word	0x2000006a

08008994 <Generic_STM_App_Update_Char_Ext>:

static tBleStatus Generic_STM_App_Update_Char_Ext(uint16_t ConnectionHandle, uint16_t ServiceHandle, uint16_t CharHandle, uint16_t CharValueLen, uint8_t *pPayload)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b089      	sub	sp, #36	@ 0x24
 8008998:	af04      	add	r7, sp, #16
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	461a      	mov	r2, r3
 80089a2:	4623      	mov	r3, r4
 80089a4:	80fb      	strh	r3, [r7, #6]
 80089a6:	4603      	mov	r3, r0
 80089a8:	80bb      	strh	r3, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	807b      	strh	r3, [r7, #2]
 80089ae:	4613      	mov	r3, r2
 80089b0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80089b2:	2392      	movs	r3, #146	@ 0x92
 80089b4:	73fb      	strb	r3, [r7, #15]

  ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	88b9      	ldrh	r1, [r7, #4]
 80089ba:	88f8      	ldrh	r0, [r7, #6]
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	9303      	str	r3, [sp, #12]
 80089c0:	23f3      	movs	r3, #243	@ 0xf3
 80089c2:	9302      	str	r3, [sp, #8]
 80089c4:	2300      	movs	r3, #0
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	883b      	ldrh	r3, [r7, #0]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2300      	movs	r3, #0
 80089ce:	f7fd fc3e 	bl	800624e <aci_gatt_update_char_value_ext>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 1\n\r");
  }
  /* USER CODE BEGIN Custom_STM_App_Update_Char_Ext_Service_1_Char_1*/

  if (CharValueLen-243<=243)
 80089d6:	883b      	ldrh	r3, [r7, #0]
 80089d8:	f5b3 7ff3 	cmp.w	r3, #486	@ 0x1e6
 80089dc:	d815      	bhi.n	8008a0a <Generic_STM_App_Update_Char_Ext+0x76>
  {
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 80089de:	883b      	ldrh	r3, [r7, #0]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	330d      	adds	r3, #13
 80089e4:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         CharValueLen-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	32f3      	adds	r2, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 80089ea:	887c      	ldrh	r4, [r7, #2]
 80089ec:	88b9      	ldrh	r1, [r7, #4]
 80089ee:	88f8      	ldrh	r0, [r7, #6]
 80089f0:	9203      	str	r2, [sp, #12]
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	23f3      	movs	r3, #243	@ 0xf3
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	883b      	ldrh	r3, [r7, #0]
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	2301      	movs	r3, #1
 80089fe:	4622      	mov	r2, r4
 8008a00:	f7fd fc25 	bl	800624e <aci_gatt_update_char_value_ext>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
 8008a08:	e027      	b.n	8008a5a <Generic_STM_App_Update_Char_Ext+0xc6>
                                         CharHandle,
                                         0, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243, /* value offset */
                                         243, /* value length */
                                         (uint8_t *)  ((pPayload)+243));
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	33f3      	adds	r3, #243	@ 0xf3
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008a0e:	887a      	ldrh	r2, [r7, #2]
 8008a10:	88b9      	ldrh	r1, [r7, #4]
 8008a12:	88f8      	ldrh	r0, [r7, #6]
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	23f3      	movs	r3, #243	@ 0xf3
 8008a18:	9302      	str	r3, [sp, #8]
 8008a1a:	23f3      	movs	r3, #243	@ 0xf3
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	883b      	ldrh	r3, [r7, #0]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	f7fd fc13 	bl	800624e <aci_gatt_update_char_value_ext>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 3\n\r");
    }
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008a2c:	883b      	ldrh	r3, [r7, #0]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	331a      	adds	r3, #26
 8008a32:	b2db      	uxtb	r3, r3
                                         CharHandle,
                                         1, /* update type:0 do not notify, 1 notify, 2 indicate */
                                         CharValueLen, /* charValueLen */
                                         243+243, /* value offset */
                                         CharValueLen-243-243, /* value length */
                                         (uint8_t *)  ((pPayload)+243+243));
 8008a34:	6a3a      	ldr	r2, [r7, #32]
 8008a36:	f502 72f3 	add.w	r2, r2, #486	@ 0x1e6
    ret = aci_gatt_update_char_value_ext(ConnectionHandle,
 8008a3a:	887c      	ldrh	r4, [r7, #2]
 8008a3c:	88b9      	ldrh	r1, [r7, #4]
 8008a3e:	88f8      	ldrh	r0, [r7, #6]
 8008a40:	9203      	str	r2, [sp, #12]
 8008a42:	9302      	str	r3, [sp, #8]
 8008a44:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	883b      	ldrh	r3, [r7, #0]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4622      	mov	r2, r4
 8008a52:	f7fd fbfc 	bl	800624e <aci_gatt_update_char_value_ext>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73fb      	strb	r3, [r7, #15]
    else
    {
      APP_DBG_MSG("  Success: aci_gatt_update_char_value_ext command, part 4\n\r");
    }
  }
  return ret;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}

08008a64 <LL_PWR_EnableBootC2>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008a68:	4b05      	ldr	r3, [pc, #20]	@ (8008a80 <LL_PWR_EnableBootC2+0x1c>)
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	4a04      	ldr	r2, [pc, #16]	@ (8008a80 <LL_PWR_EnableBootC2+0x1c>)
 8008a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a72:	60d3      	str	r3, [r2, #12]
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	58000400 	.word	0x58000400

08008a84 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008a8c:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008a8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008a92:	4905      	ldr	r1, [pc, #20]	@ (8008aa8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	58000800 	.word	0x58000800

08008aac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008ab4:	4b05      	ldr	r3, [pc, #20]	@ (8008acc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	4904      	ldr	r1, [pc, #16]	@ (8008acc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	620b      	str	r3, [r1, #32]
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	58000800 	.word	0x58000800

08008ad0 <LL_AHB3_GRP1_EnableClock>:
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008adc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008aec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4013      	ands	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008af4:	68fb      	ldr	r3, [r7, #12]
}
 8008af6:	bf00      	nop
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b22:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
}
 8008b2e:	bf00      	nop
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f043 0201 	orr.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	041b      	lsls	r3, r3, #16
 8008b8c:	43db      	mvns	r3, r3
 8008b8e:	401a      	ands	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	041b      	lsls	r3, r3, #16
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	605a      	str	r2, [r3, #4]
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	401a      	ands	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	605a      	str	r2, [r3, #4]
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	609a      	str	r2, [r3, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	041a      	lsls	r2, r3, #16
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	609a      	str	r2, [r3, #8]
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	4013      	ands	r3, r2
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d101      	bne.n	8008c3e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69da      	ldr	r2, [r3, #28]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d101      	bne.n	8008c68 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4818      	ldr	r0, [pc, #96]	@ (8008ce0 <HW_IPCC_Rx_Handler+0x68>)
 8008c80:	f7ff ffe4 	bl	8008c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d008      	beq.n	8008c9c <HW_IPCC_Rx_Handler+0x24>
 8008c8a:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <HW_IPCC_Rx_Handler+0x68>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8008c96:	f000 f8d5 	bl	8008e44 <HW_IPCC_SYS_EvtHandler>
 8008c9a:	e01e      	b.n	8008cda <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4810      	ldr	r0, [pc, #64]	@ (8008ce0 <HW_IPCC_Rx_Handler+0x68>)
 8008ca0:	f7ff ffd4 	bl	8008c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <HW_IPCC_Rx_Handler+0x44>
 8008caa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <HW_IPCC_Rx_Handler+0x68>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8008cb6:	f000 f889 	bl	8008dcc <HW_IPCC_BLE_EvtHandler>
 8008cba:	e00e      	b.n	8008cda <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008cbc:	2108      	movs	r1, #8
 8008cbe:	4808      	ldr	r0, [pc, #32]	@ (8008ce0 <HW_IPCC_Rx_Handler+0x68>)
 8008cc0:	f7ff ffc4 	bl	8008c4c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d008      	beq.n	8008cdc <HW_IPCC_Rx_Handler+0x64>
 8008cca:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <HW_IPCC_Rx_Handler+0x68>)
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d102      	bne.n	8008cdc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008cd6:	f000 f901 	bl	8008edc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
}
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	58000c00 	.word	0x58000c00

08008ce4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008ce8:	2102      	movs	r1, #2
 8008cea:	4818      	ldr	r0, [pc, #96]	@ (8008d4c <HW_IPCC_Tx_Handler+0x68>)
 8008cec:	f7ff ff99 	bl	8008c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d108      	bne.n	8008d08 <HW_IPCC_Tx_Handler+0x24>
 8008cf6:	4b15      	ldr	r3, [pc, #84]	@ (8008d4c <HW_IPCC_Tx_Handler+0x68>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008d02:	f000 f893 	bl	8008e2c <HW_IPCC_SYS_CmdEvtHandler>
 8008d06:	e01e      	b.n	8008d46 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008d08:	2108      	movs	r1, #8
 8008d0a:	4810      	ldr	r0, [pc, #64]	@ (8008d4c <HW_IPCC_Tx_Handler+0x68>)
 8008d0c:	f7ff ff89 	bl	8008c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d108      	bne.n	8008d28 <HW_IPCC_Tx_Handler+0x44>
 8008d16:	4b0d      	ldr	r3, [pc, #52]	@ (8008d4c <HW_IPCC_Tx_Handler+0x68>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008d22:	f000 f8bd 	bl	8008ea0 <HW_IPCC_MM_FreeBufHandler>
 8008d26:	e00e      	b.n	8008d46 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008d28:	2120      	movs	r1, #32
 8008d2a:	4808      	ldr	r0, [pc, #32]	@ (8008d4c <HW_IPCC_Tx_Handler+0x68>)
 8008d2c:	f7ff ff79 	bl	8008c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d108      	bne.n	8008d48 <HW_IPCC_Tx_Handler+0x64>
 8008d36:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <HW_IPCC_Tx_Handler+0x68>)
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008d42:	f000 f84f 	bl	8008de4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008d46:	bf00      	nop
 8008d48:	bf00      	nop
}
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	58000c00 	.word	0x58000c00

08008d50 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008d54:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008d58:	f7ff fed3 	bl	8008b02 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008d5c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008d60:	f7ff fea4 	bl	8008aac <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008d64:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008d68:	f7ff fe8c 	bl	8008a84 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008d6c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008d6e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008d70:	f7ff fe78 	bl	8008a64 <LL_PWR_EnableBootC2>

  return;
 8008d74:	bf00      	nop
}
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008d7c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008d80:	f7ff fea6 	bl	8008ad0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008d84:	4806      	ldr	r0, [pc, #24]	@ (8008da0 <HW_IPCC_Init+0x28>)
 8008d86:	f7ff fee8 	bl	8008b5a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008d8a:	4805      	ldr	r0, [pc, #20]	@ (8008da0 <HW_IPCC_Init+0x28>)
 8008d8c:	f7ff fed5 	bl	8008b3a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008d90:	202c      	movs	r0, #44	@ 0x2c
 8008d92:	f7f9 faf8 	bl	8002386 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008d96:	202d      	movs	r0, #45	@ 0x2d
 8008d98:	f7f9 faf5 	bl	8002386 <HAL_NVIC_EnableIRQ>

  return;
 8008d9c:	bf00      	nop
}
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	58000c00 	.word	0x58000c00

08008da4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008da8:	2101      	movs	r1, #1
 8008daa:	4802      	ldr	r0, [pc, #8]	@ (8008db4 <HW_IPCC_BLE_Init+0x10>)
 8008dac:	f7ff ff0a 	bl	8008bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008db0:	bf00      	nop
}
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	58000c00 	.word	0x58000c00

08008db8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	4802      	ldr	r0, [pc, #8]	@ (8008dc8 <HW_IPCC_BLE_SendCmd+0x10>)
 8008dc0:	f7ff ff20 	bl	8008c04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008dc4:	bf00      	nop
}
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	58000c00 	.word	0x58000c00

08008dcc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008dd0:	f7fe fa90 	bl	80072f4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4802      	ldr	r0, [pc, #8]	@ (8008de0 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008dd8:	f7ff ff06 	bl	8008be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008ddc:	bf00      	nop
}
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	58000c00 	.word	0x58000c00

08008de4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008de8:	2120      	movs	r1, #32
 8008dea:	4803      	ldr	r0, [pc, #12]	@ (8008df8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008dec:	f7ff fed8 	bl	8008ba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008df0:	f7fe fab0 	bl	8007354 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008df4:	bf00      	nop
}
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	58000c00 	.word	0x58000c00

08008dfc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008e00:	2102      	movs	r1, #2
 8008e02:	4802      	ldr	r0, [pc, #8]	@ (8008e0c <HW_IPCC_SYS_Init+0x10>)
 8008e04:	f7ff fede 	bl	8008bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008e08:	bf00      	nop
}
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	58000c00 	.word	0x58000c00

08008e10 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008e14:	2102      	movs	r1, #2
 8008e16:	4804      	ldr	r0, [pc, #16]	@ (8008e28 <HW_IPCC_SYS_SendCmd+0x18>)
 8008e18:	f7ff fef4 	bl	8008c04 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008e1c:	2102      	movs	r1, #2
 8008e1e:	4802      	ldr	r0, [pc, #8]	@ (8008e28 <HW_IPCC_SYS_SendCmd+0x18>)
 8008e20:	f7ff feab 	bl	8008b7a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008e24:	bf00      	nop
}
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	58000c00 	.word	0x58000c00

08008e2c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008e30:	2102      	movs	r1, #2
 8008e32:	4803      	ldr	r0, [pc, #12]	@ (8008e40 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008e34:	f7ff feb4 	bl	8008ba0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008e38:	f7fe fadc 	bl	80073f4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008e3c:	bf00      	nop
}
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	58000c00 	.word	0x58000c00

08008e44 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008e48:	f7fe faea 	bl	8007420 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008e4c:	2102      	movs	r1, #2
 8008e4e:	4802      	ldr	r0, [pc, #8]	@ (8008e58 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008e50:	f7ff feca 	bl	8008be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008e54:	bf00      	nop
}
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	58000c00 	.word	0x58000c00

08008e5c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008e64:	2108      	movs	r1, #8
 8008e66:	480c      	ldr	r0, [pc, #48]	@ (8008e98 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008e68:	f7ff fedb 	bl	8008c22 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d007      	beq.n	8008e82 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008e72:	4a0a      	ldr	r2, [pc, #40]	@ (8008e9c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008e78:	2108      	movs	r1, #8
 8008e7a:	4807      	ldr	r0, [pc, #28]	@ (8008e98 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008e7c:	f7ff fe7d 	bl	8008b7a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008e80:	e006      	b.n	8008e90 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008e86:	2108      	movs	r1, #8
 8008e88:	4803      	ldr	r0, [pc, #12]	@ (8008e98 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008e8a:	f7ff febb 	bl	8008c04 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008e8e:	bf00      	nop
}
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	58000c00 	.word	0x58000c00
 8008e9c:	200006d8 	.word	0x200006d8

08008ea0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008ea4:	2108      	movs	r1, #8
 8008ea6:	4806      	ldr	r0, [pc, #24]	@ (8008ec0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008ea8:	f7ff fe7a 	bl	8008ba0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008eac:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008eb2:	2108      	movs	r1, #8
 8008eb4:	4802      	ldr	r0, [pc, #8]	@ (8008ec0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008eb6:	f7ff fea5 	bl	8008c04 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008eba:	bf00      	nop
}
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	58000c00 	.word	0x58000c00
 8008ec4:	200006d8 	.word	0x200006d8

08008ec8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008ecc:	2108      	movs	r1, #8
 8008ece:	4802      	ldr	r0, [pc, #8]	@ (8008ed8 <HW_IPCC_TRACES_Init+0x10>)
 8008ed0:	f7ff fe78 	bl	8008bc4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008ed4:	bf00      	nop
}
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	58000c00 	.word	0x58000c00

08008edc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008ee0:	f7fe fb46 	bl	8007570 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008ee4:	2108      	movs	r1, #8
 8008ee6:	4802      	ldr	r0, [pc, #8]	@ (8008ef0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008ee8:	f7ff fe7e 	bl	8008be8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008eec:	bf00      	nop
}
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	58000c00 	.word	0x58000c00

08008ef4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <UTIL_LPM_Init+0x1c>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008efe:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <UTIL_LPM_Init+0x20>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008f04:	bf00      	nop
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	200006dc 	.word	0x200006dc
 8008f14:	200006e0 	.word	0x200006e0

08008f18 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f24:	f3ef 8310 	mrs	r3, PRIMASK
 8008f28:	613b      	str	r3, [r7, #16]
  return(result);
 8008f2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f2e:	b672      	cpsid	i
}
 8008f30:	bf00      	nop
  
  switch(state)
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <UTIL_LPM_SetOffMode+0x32>
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d10e      	bne.n	8008f5a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f74 <UTIL_LPM_SetOffMode+0x5c>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	4a0b      	ldr	r2, [pc, #44]	@ (8008f74 <UTIL_LPM_SetOffMode+0x5c>)
 8008f46:	6013      	str	r3, [r2, #0]
      break;
 8008f48:	e008      	b.n	8008f5c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	43da      	mvns	r2, r3
 8008f4e:	4b09      	ldr	r3, [pc, #36]	@ (8008f74 <UTIL_LPM_SetOffMode+0x5c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4013      	ands	r3, r2
 8008f54:	4a07      	ldr	r2, [pc, #28]	@ (8008f74 <UTIL_LPM_SetOffMode+0x5c>)
 8008f56:	6013      	str	r3, [r2, #0]
      break;
 8008f58:	e000      	b.n	8008f5c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008f5a:	bf00      	nop
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f383 8810 	msr	PRIMASK, r3
}
 8008f66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008f68:	bf00      	nop
 8008f6a:	371c      	adds	r7, #28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	200006e0 	.word	0x200006e0

08008f78 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b090      	sub	sp, #64	@ 0x40
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008f80:	4b73      	ldr	r3, [pc, #460]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008f86:	4b72      	ldr	r3, [pc, #456]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	4a70      	ldr	r2, [pc, #448]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8008f90:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8008f92:	4b70      	ldr	r3, [pc, #448]	@ (8009154 <UTIL_SEQ_Run+0x1dc>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008f98:	4b6f      	ldr	r3, [pc, #444]	@ (8009158 <UTIL_SEQ_Run+0x1e0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008f9e:	4b6f      	ldr	r3, [pc, #444]	@ (800915c <UTIL_SEQ_Run+0x1e4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8009160 <UTIL_SEQ_Run+0x1e8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008faa:	e08d      	b.n	80090c8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008fb0:	e002      	b.n	8008fb8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8008fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8008fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	4b62      	ldr	r3, [pc, #392]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0f1      	beq.n	8008fb2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008fce:	4a65      	ldr	r2, [pc, #404]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	401a      	ands	r2, r3
 8008fda:	4b5d      	ldr	r3, [pc, #372]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008fe2:	4a60      	ldr	r2, [pc, #384]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	4413      	add	r3, r2
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	4013      	ands	r3, r2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d106      	bne.n	8009002 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008ff4:	4a5b      	ldr	r2, [pc, #364]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8009000:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009002:	4a58      	ldr	r2, [pc, #352]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8009004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	4413      	add	r3, r2
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900e:	4013      	ands	r3, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f9b3 	bl	800937c <SEQ_BitPosition>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	4b53      	ldr	r3, [pc, #332]	@ (8009168 <UTIL_SEQ_Run+0x1f0>)
 800901c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800901e:	4a51      	ldr	r2, [pc, #324]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8009020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4413      	add	r3, r2
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	4b4f      	ldr	r3, [pc, #316]	@ (8009168 <UTIL_SEQ_Run+0x1f0>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2101      	movs	r1, #1
 800902e:	fa01 f303 	lsl.w	r3, r1, r3
 8009032:	43db      	mvns	r3, r3
 8009034:	401a      	ands	r2, r3
 8009036:	494b      	ldr	r1, [pc, #300]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8009038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	440b      	add	r3, r1
 800903e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009040:	f3ef 8310 	mrs	r3, PRIMASK
 8009044:	61bb      	str	r3, [r7, #24]
  return(result);
 8009046:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800904a:	b672      	cpsid	i
}
 800904c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800904e:	4b46      	ldr	r3, [pc, #280]	@ (8009168 <UTIL_SEQ_Run+0x1f0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2201      	movs	r2, #1
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	43da      	mvns	r2, r3
 800905a:	4b3e      	ldr	r3, [pc, #248]	@ (8009154 <UTIL_SEQ_Run+0x1dc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4013      	ands	r3, r2
 8009060:	4a3c      	ldr	r2, [pc, #240]	@ (8009154 <UTIL_SEQ_Run+0x1dc>)
 8009062:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009064:	2301      	movs	r3, #1
 8009066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009068:	e013      	b.n	8009092 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800906a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800906c:	3b01      	subs	r3, #1
 800906e:	4a3d      	ldr	r2, [pc, #244]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8009070:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009074:	4b3c      	ldr	r3, [pc, #240]	@ (8009168 <UTIL_SEQ_Run+0x1f0>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2201      	movs	r2, #1
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43da      	mvns	r2, r3
 8009080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009082:	3b01      	subs	r3, #1
 8009084:	400a      	ands	r2, r1
 8009086:	4937      	ldr	r1, [pc, #220]	@ (8009164 <UTIL_SEQ_Run+0x1ec>)
 8009088:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800908c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908e:	3b01      	subs	r3, #1
 8009090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e8      	bne.n	800906a <UTIL_SEQ_Run+0xf2>
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f383 8810 	msr	PRIMASK, r3
}
 80090a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80090a4:	4b30      	ldr	r3, [pc, #192]	@ (8009168 <UTIL_SEQ_Run+0x1f0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a30      	ldr	r2, [pc, #192]	@ (800916c <UTIL_SEQ_Run+0x1f4>)
 80090aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ae:	4798      	blx	r3

    local_taskset = TaskSet;
 80090b0:	4b28      	ldr	r3, [pc, #160]	@ (8009154 <UTIL_SEQ_Run+0x1dc>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80090b6:	4b28      	ldr	r3, [pc, #160]	@ (8009158 <UTIL_SEQ_Run+0x1e0>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80090bc:	4b27      	ldr	r3, [pc, #156]	@ (800915c <UTIL_SEQ_Run+0x1e4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80090c2:	4b27      	ldr	r3, [pc, #156]	@ (8009160 <UTIL_SEQ_Run+0x1e8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80090c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	401a      	ands	r2, r3
 80090ce:	4b20      	ldr	r3, [pc, #128]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <UTIL_SEQ_Run+0x16c>
 80090d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	4013      	ands	r3, r2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f43f af64 	beq.w	8008fac <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80090e4:	4b20      	ldr	r3, [pc, #128]	@ (8009168 <UTIL_SEQ_Run+0x1f0>)
 80090e6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ea:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80090ec:	f000 f938 	bl	8009360 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090f0:	f3ef 8310 	mrs	r3, PRIMASK
 80090f4:	613b      	str	r3, [r7, #16]
  return(result);
 80090f6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80090f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80090fa:	b672      	cpsid	i
}
 80090fc:	bf00      	nop
  local_taskset = TaskSet;
 80090fe:	4b15      	ldr	r3, [pc, #84]	@ (8009154 <UTIL_SEQ_Run+0x1dc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009104:	4b14      	ldr	r3, [pc, #80]	@ (8009158 <UTIL_SEQ_Run+0x1e0>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800910a:	4b14      	ldr	r3, [pc, #80]	@ (800915c <UTIL_SEQ_Run+0x1e4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	401a      	ands	r2, r3
 8009116:	4b0e      	ldr	r3, [pc, #56]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4013      	ands	r3, r2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d107      	bne.n	8009130 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009120:	4b0f      	ldr	r3, [pc, #60]	@ (8009160 <UTIL_SEQ_Run+0x1e8>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800912c:	f7f7 fcbc 	bl	8000aa8 <UTIL_SEQ_Idle>
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f383 8810 	msr	PRIMASK, r3
}
 800913a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800913c:	f000 f917 	bl	800936e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009140:	4a03      	ldr	r2, [pc, #12]	@ (8009150 <UTIL_SEQ_Run+0x1d8>)
 8009142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009144:	6013      	str	r3, [r2, #0]

  return;
 8009146:	bf00      	nop
}
 8009148:	3740      	adds	r7, #64	@ 0x40
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000070 	.word	0x20000070
 8009154:	200006e4 	.word	0x200006e4
 8009158:	200006e8 	.word	0x200006e8
 800915c:	2000006c 	.word	0x2000006c
 8009160:	200006ec 	.word	0x200006ec
 8009164:	20000774 	.word	0x20000774
 8009168:	200006f0 	.word	0x200006f0
 800916c:	200006f4 	.word	0x200006f4

08009170 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917c:	f3ef 8310 	mrs	r3, PRIMASK
 8009180:	617b      	str	r3, [r7, #20]
  return(result);
 8009182:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009186:	b672      	cpsid	i
}
 8009188:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f8f6 	bl	800937c <SEQ_BitPosition>
 8009190:	4603      	mov	r3, r0
 8009192:	4619      	mov	r1, r3
 8009194:	4a06      	ldr	r2, [pc, #24]	@ (80091b0 <UTIL_SEQ_RegTask+0x40>)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	f383 8810 	msr	PRIMASK, r3
}
 80091a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80091a8:	bf00      	nop
}
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200006f4 	.word	0x200006f4

080091b4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091be:	f3ef 8310 	mrs	r3, PRIMASK
 80091c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80091c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091c8:	b672      	cpsid	i
}
 80091ca:	bf00      	nop

  TaskSet |= TaskId_bm;
 80091cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009204 <UTIL_SEQ_SetTask+0x50>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009204 <UTIL_SEQ_SetTask+0x50>)
 80091d6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80091d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009208 <UTIL_SEQ_SetTask+0x54>)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	4908      	ldr	r1, [pc, #32]	@ (8009208 <UTIL_SEQ_SetTask+0x54>)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f383 8810 	msr	PRIMASK, r3
}
 80091f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80091f8:	bf00      	nop
}
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	200006e4 	.word	0x200006e4
 8009208:	20000774 	.word	0x20000774

0800920c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	60fb      	str	r3, [r7, #12]
  return(result);
 800921a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800921c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800921e:	b672      	cpsid	i
}
 8009220:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	43da      	mvns	r2, r3
 8009226:	4b08      	ldr	r3, [pc, #32]	@ (8009248 <UTIL_SEQ_PauseTask+0x3c>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4013      	ands	r3, r2
 800922c:	4a06      	ldr	r2, [pc, #24]	@ (8009248 <UTIL_SEQ_PauseTask+0x3c>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f383 8810 	msr	PRIMASK, r3
}
 800923a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800923c:	bf00      	nop
}
 800923e:	371c      	adds	r7, #28
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	2000006c 	.word	0x2000006c

0800924c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009254:	f3ef 8310 	mrs	r3, PRIMASK
 8009258:	60fb      	str	r3, [r7, #12]
  return(result);
 800925a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800925c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800925e:	b672      	cpsid	i
}
 8009260:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009262:	4b09      	ldr	r3, [pc, #36]	@ (8009288 <UTIL_SEQ_ResumeTask+0x3c>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4313      	orrs	r3, r2
 800926a:	4a07      	ldr	r2, [pc, #28]	@ (8009288 <UTIL_SEQ_ResumeTask+0x3c>)
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f383 8810 	msr	PRIMASK, r3
}
 8009278:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800927a:	bf00      	nop
}
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	2000006c 	.word	0x2000006c

0800928c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009294:	f3ef 8310 	mrs	r3, PRIMASK
 8009298:	60fb      	str	r3, [r7, #12]
  return(result);
 800929a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800929c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800929e:	b672      	cpsid	i
}
 80092a0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <UTIL_SEQ_SetEvt+0x3c>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	4a07      	ldr	r2, [pc, #28]	@ (80092c8 <UTIL_SEQ_SetEvt+0x3c>)
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f383 8810 	msr	PRIMASK, r3
}
 80092b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80092ba:	bf00      	nop
}
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	200006e8 	.word	0x200006e8

080092cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b088      	sub	sp, #32
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80092d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009354 <UTIL_SEQ_WaitEvt+0x88>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80092da:	4b1e      	ldr	r3, [pc, #120]	@ (8009354 <UTIL_SEQ_WaitEvt+0x88>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e2:	d102      	bne.n	80092ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e005      	b.n	80092f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80092ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009354 <UTIL_SEQ_WaitEvt+0x88>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2201      	movs	r2, #1
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80092f6:	4b18      	ldr	r3, [pc, #96]	@ (8009358 <UTIL_SEQ_WaitEvt+0x8c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80092fc:	4a16      	ldr	r2, [pc, #88]	@ (8009358 <UTIL_SEQ_WaitEvt+0x8c>)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009302:	e003      	b.n	800930c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	69f8      	ldr	r0, [r7, #28]
 8009308:	f7f7 fbd5 	bl	8000ab6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800930c:	4b13      	ldr	r3, [pc, #76]	@ (800935c <UTIL_SEQ_WaitEvt+0x90>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4013      	ands	r3, r2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f5      	beq.n	8009304 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009318:	4a0e      	ldr	r2, [pc, #56]	@ (8009354 <UTIL_SEQ_WaitEvt+0x88>)
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800931e:	f3ef 8310 	mrs	r3, PRIMASK
 8009322:	60bb      	str	r3, [r7, #8]
  return(result);
 8009324:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009328:	b672      	cpsid	i
}
 800932a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	43da      	mvns	r2, r3
 8009330:	4b0a      	ldr	r3, [pc, #40]	@ (800935c <UTIL_SEQ_WaitEvt+0x90>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4013      	ands	r3, r2
 8009336:	4a09      	ldr	r2, [pc, #36]	@ (800935c <UTIL_SEQ_WaitEvt+0x90>)
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f383 8810 	msr	PRIMASK, r3
}
 8009344:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009346:	4a04      	ldr	r2, [pc, #16]	@ (8009358 <UTIL_SEQ_WaitEvt+0x8c>)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	6013      	str	r3, [r2, #0]
  return;
 800934c:	bf00      	nop
}
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	200006f0 	.word	0x200006f0
 8009358:	200006ec 	.word	0x200006ec
 800935c:	200006e8 	.word	0x200006e8

08009360 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009360:	b480      	push	{r7}
 8009362:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009364:	bf00      	nop
}
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800936e:	b480      	push	{r7}
 8009370:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009372:	bf00      	nop
}
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <SEQ_BitPosition+0x16>
    return 32U;
 800938e:	2320      	movs	r3, #32
 8009390:	e003      	b.n	800939a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	fab3 f383 	clz	r3, r3
 8009398:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800939a:	f1c3 031f 	rsb	r3, r3, #31
 800939e:	b2db      	uxtb	r3, r3
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <memset>:
 80093ac:	4402      	add	r2, r0
 80093ae:	4603      	mov	r3, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d100      	bne.n	80093b6 <memset+0xa>
 80093b4:	4770      	bx	lr
 80093b6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ba:	e7f9      	b.n	80093b0 <memset+0x4>

080093bc <__libc_init_array>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4d0d      	ldr	r5, [pc, #52]	@ (80093f4 <__libc_init_array+0x38>)
 80093c0:	4c0d      	ldr	r4, [pc, #52]	@ (80093f8 <__libc_init_array+0x3c>)
 80093c2:	1b64      	subs	r4, r4, r5
 80093c4:	10a4      	asrs	r4, r4, #2
 80093c6:	2600      	movs	r6, #0
 80093c8:	42a6      	cmp	r6, r4
 80093ca:	d109      	bne.n	80093e0 <__libc_init_array+0x24>
 80093cc:	4d0b      	ldr	r5, [pc, #44]	@ (80093fc <__libc_init_array+0x40>)
 80093ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009400 <__libc_init_array+0x44>)
 80093d0:	f000 f826 	bl	8009420 <_init>
 80093d4:	1b64      	subs	r4, r4, r5
 80093d6:	10a4      	asrs	r4, r4, #2
 80093d8:	2600      	movs	r6, #0
 80093da:	42a6      	cmp	r6, r4
 80093dc:	d105      	bne.n	80093ea <__libc_init_array+0x2e>
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e4:	4798      	blx	r3
 80093e6:	3601      	adds	r6, #1
 80093e8:	e7ee      	b.n	80093c8 <__libc_init_array+0xc>
 80093ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ee:	4798      	blx	r3
 80093f0:	3601      	adds	r6, #1
 80093f2:	e7f2      	b.n	80093da <__libc_init_array+0x1e>
 80093f4:	080096a8 	.word	0x080096a8
 80093f8:	080096a8 	.word	0x080096a8
 80093fc:	080096a8 	.word	0x080096a8
 8009400:	080096ac 	.word	0x080096ac

08009404 <memcpy>:
 8009404:	440a      	add	r2, r1
 8009406:	4291      	cmp	r1, r2
 8009408:	f100 33ff 	add.w	r3, r0, #4294967295
 800940c:	d100      	bne.n	8009410 <memcpy+0xc>
 800940e:	4770      	bx	lr
 8009410:	b510      	push	{r4, lr}
 8009412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800941a:	4291      	cmp	r1, r2
 800941c:	d1f9      	bne.n	8009412 <memcpy+0xe>
 800941e:	bd10      	pop	{r4, pc}

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
